
AVRASM ver. 2.1.30  C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application14\List\program.asm Mon Apr 11 22:49:19 2016

C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application14\List\program.asm(1072): warning: Register r4 already defined by the .DEF directive
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application14\List\program.asm(1073): warning: Register r6 already defined by the .DEF directive
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application14\List\program.asm(1074): warning: Register r9 already defined by the .DEF directive
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application14\List\program.asm(1075): warning: Register r8 already defined by the .DEF directive
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application14\List\program.asm(1076): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 1.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _v=R4
                 	.DEF _s=R6
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0040 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 4441
00002b 3d43
00002c 2020
00002d 2020      	.DB  0x41,0x44,0x43,0x3D,0x20,0x20,0x20,0x20
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application14\List\program.asm(1109): warning: .cseg .db misalignment - padding zero byte
00002e 0000      	.DB  0x0
                 _0x2000060:
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application14\List\program.asm(1111): warning: .cseg .db misalignment - padding zero byte
00002f 0001      	.DB  0x1
                 _0x2000000:
000030 4e2d
000031 4e41
000032 4900
000033 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application14\List\program.asm(1114): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x0
                 _0x2020003:
000035 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000036 0009      	.DW  0x09
000037 0160      	.DW  _0xB
000038 0054      	.DW  _0x0*2
                 
000039 0001      	.DW  0x01
00003a 0169      	.DW  __seed_G100
00003b 005e      	.DW  _0x2000060*2
                 
00003c 0002      	.DW  0x02
00003d 016d      	.DW  __base_y_G101
00003e 006a      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00003f 0000      	.DW  0
                 
                 __RESET:
000040 94f8      	CLI
000041 27ee      	CLR  R30
000042 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000043 e0f1      	LDI  R31,1
000044 bffb      	OUT  GICR,R31
000045 bfeb      	OUT  GICR,R30
000046 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000047 e1f8      	LDI  R31,0x18
000048 bdf1      	OUT  WDTCR,R31
000049 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00004a e08d      	LDI  R24,(14-2)+1
00004b e0a2      	LDI  R26,2
00004c 27bb      	CLR  R27
                 __CLEAR_REG:
00004d 93ed      	ST   X+,R30
00004e 958a      	DEC  R24
00004f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000050 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000051 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000052 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000053 93ed      	ST   X+,R30
000054 9701      	SBIW R24,1
000055 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000056 e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000057 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000058 9185      	LPM  R24,Z+
000059 9195      	LPM  R25,Z+
00005a 9700      	SBIW R24,0
00005b f061      	BREQ __GLOBAL_INI_END
00005c 91a5      	LPM  R26,Z+
00005d 91b5      	LPM  R27,Z+
00005e 9005      	LPM  R0,Z+
00005f 9015      	LPM  R1,Z+
000060 01bf      	MOVW R22,R30
000061 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000062 9005      	LPM  R0,Z+
000063 920d      	ST   X+,R0
000064 9701      	SBIW R24,1
000065 f7e1      	BRNE __GLOBAL_INI_LOOP
000066 01fb      	MOVW R30,R22
000067 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000068 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000069 bfed      	OUT  SPL,R30
00006a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006e 940c 0070 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <lcd.h>
                 ;#asm
                 .equ __lcd_port=0x15 ;PORTC
                 ; 0000 0007 #endasm
                 ;int v;
                 ;char *s;
                 ;void main(void)
                 ; 0000 000B {
                 
                 	.CSEG
                 _main:
                 ; 0000 000C // Select ADC1 channel
                 ; 0000 000D //ADC Voltage Reference: AVcc pin
                 ; 0000 000E ADMUX=0B01000001;
000070 e4e1      	LDI  R30,LOW(65)
000071 b9e7      	OUT  0x7,R30
                 ; 0000 000F // ADC Clock frequency: 125 kHz
                 ; 0000 0010 // Single Conversion mode
                 ; 0000 0011 ADCSRA=0B10000011;
000072 e8e3      	LDI  R30,LOW(131)
000073 b9e6      	OUT  0x6,R30
                 ; 0000 0012 lcd_init(16);
000074 e1a0      	LDI  R26,LOW(16)
000075 940e 0167 	CALL _lcd_init
                 ; 0000 0013 lcd_clear();
000077 940e 0118 	CALL _lcd_clear
                 ; 0000 0014 while (1)
                 _0x3:
                 ; 0000 0015   {
                 ; 0000 0016 ADCSRA.6=1;   // Start the AD conversion
000079 9a36      	SBI  0x6,6
                 ; 0000 0017 while (ADCSRA.4==0){}  // Wait for the AD conversion to complete
                 _0x8:
00007a 9b34      	SBIS 0x6,4
00007b cffe      	RJMP _0x8
                 ; 0000 0018     v=ADCW;
                +
00007c b044     +IN R4 , 4
00007d b055     +IN R5 , 4 + 1
                 	__INWR 4,5,4
                 ; 0000 0019     itoa(v,s);
00007e 925a      	ST   -Y,R5
00007f 924a      	ST   -Y,R4
000080 01d3      	MOVW R26,R6
000081 940e 009a 	CALL _itoa
                 ; 0000 001A     lcd_gotoxy(0,0);
000083 e0e0      	LDI  R30,LOW(0)
000084 93ea      	ST   -Y,R30
000085 e0a0      	LDI  R26,LOW(0)
000086 940e 0108 	CALL _lcd_gotoxy
                 ; 0000 001B     lcd_puts("ADC=    ");
                +
000088 e6a0     +LDI R26 , LOW ( _0xB + ( 0 ) )
000089 e0b1     +LDI R27 , HIGH ( _0xB + ( 0 ) )
                 	__POINTW2MN _0xB,0
00008a 940e 0145 	CALL _lcd_puts
                 ; 0000 001C     lcd_gotoxy(4,0);
00008c e0e4      	LDI  R30,LOW(4)
00008d 93ea      	ST   -Y,R30
00008e e0a0      	LDI  R26,LOW(0)
00008f 940e 0108 	CALL _lcd_gotoxy
                 ; 0000 001D     lcd_puts(s);
000091 01d3      	MOVW R26,R6
000092 940e 0145 	CALL _lcd_puts
                 ; 0000 001E     delay_ms(250);
000094 efaa      	LDI  R26,LOW(250)
000095 e0b0      	LDI  R27,0
000096 940e 01a0 	CALL _delay_ms
                 ; 0000 001F   };
000098 cfe0      	RJMP _0x3
                 ; 0000 0020 }
                 _0xC:
000099 cfff      	RJMP _0xC
                 
                 	.DSEG
                 _0xB:
000160           	.BYTE 0x9
                 
                 	.CSEG
                 _itoa:
00009a 93ba      	ST   -Y,R27
00009b 93aa      	ST   -Y,R26
00009c 91a9          ld   r26,y+
00009d 91b9          ld   r27,y+
00009e 91e9          ld   r30,y+
00009f 91f9          ld   r31,y+
0000a0 9630          adiw r30,0
0000a1 f42a          brpl __itoa0
0000a2 95e0          com  r30
0000a3 95f0          com  r31
0000a4 9631          adiw r30,1
0000a5 e26d          ldi  r22,'-'
0000a6 936d          st   x+,r22
                 __itoa0:
0000a7 94e8          clt
0000a8 e180          ldi  r24,low(10000)
0000a9 e297          ldi  r25,high(10000)
0000aa d00d          rcall __itoa1
0000ab ee88          ldi  r24,low(1000)
0000ac e093          ldi  r25,high(1000)
0000ad d00a          rcall __itoa1
0000ae e684          ldi  r24,100
0000af 2799          clr  r25
0000b0 d007          rcall __itoa1
0000b1 e08a          ldi  r24,10
0000b2 d005          rcall __itoa1
0000b3 2f6e          mov  r22,r30
0000b4 d010          rcall __itoa5
0000b5 2766          clr  r22
0000b6 936c          st   x,r22
0000b7 9508          ret
                 
                 __itoa1:
0000b8 2766          clr	 r22
                 __itoa2:
0000b9 17e8          cp   r30,r24
0000ba 07f9          cpc  r31,r25
0000bb f020          brlo __itoa3
0000bc 9563          inc  r22
0000bd 1be8          sub  r30,r24
0000be 0bf9          sbc  r31,r25
0000bf f7c9          brne __itoa2
                 __itoa3:
0000c0 2366          tst  r22
0000c1 f411          brne __itoa4
0000c2 f016          brts __itoa5
0000c3 9508          ret
                 __itoa4:
0000c4 9468          set
                 __itoa5:
0000c5 5d60          subi r22,-0x30
0000c6 936d          st   x+,r22
0000c7 9508          ret
                 
                 	.DSEG
                 
                 	.CSEG
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G101:
0000c8 e0ff          ldi   r31,15
                 __lcd_delay0:
0000c9 95fa          dec   r31
0000ca f7f1          brne  __lcd_delay0
0000cb 9508      	RET
                 __lcd_ready:
0000cc b3a4          in    r26,__lcd_direction
0000cd 70af          andi  r26,0xf                 ;set as input
0000ce bba4          out   __lcd_direction,r26
0000cf 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0000d0 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
0000d1 dff6      	RCALL __lcd_delay_G101
0000d2 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0000d3 dff4      	RCALL __lcd_delay_G101
0000d4 b3a3          in    r26,__lcd_pin
0000d5 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0000d6 dff1      	RCALL __lcd_delay_G101
0000d7 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0000d8 dfef      	RCALL __lcd_delay_G101
0000d9 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0000da fda7          sbrc  r26,__lcd_busy_flag
0000db cff5          rjmp  __lcd_busy
0000dc 9508      	RET
                 __lcd_write_nibble_G101:
0000dd 7fa0          andi  r26,0xf0
0000de 2bab          or    r26,r27
0000df bba5          out   __lcd_port,r26          ;write
0000e0 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0000e1 940e 00c8 	CALL __lcd_delay_G101
0000e3 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0000e4 940e 00c8 	CALL __lcd_delay_G101
0000e6 9508      	RET
                 __lcd_write_data:
0000e7 93aa      	ST   -Y,R26
0000e8 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0000e9 b3a4          in    r26,__lcd_direction
0000ea 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0000eb bba4          out   __lcd_direction,r26
0000ec b3b5          in    r27,__lcd_port
0000ed 70bf          andi  r27,0xf
0000ee 81a8          ld    r26,y
0000ef dfed      	RCALL __lcd_write_nibble_G101
0000f0 81a8          ld    r26,y
0000f1 95a2          swap  r26
0000f2 dfea      	RCALL __lcd_write_nibble_G101
0000f3 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0000f4 940c 019e 	JMP  _0x20A0001
                 __lcd_read_nibble_G101:
0000f6 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0000f7 940e 00c8 	CALL __lcd_delay_G101
0000f9 b3e3          in    r30,__lcd_pin           ;read
0000fa 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0000fb 940e 00c8 	CALL __lcd_delay_G101
0000fd 7fe0          andi  r30,0xf0
0000fe 9508      	RET
                 _lcd_read_byte0_G101:
0000ff 940e 00c8 	CALL __lcd_delay_G101
000101 dff4      	RCALL __lcd_read_nibble_G101
000102 2fae          mov   r26,r30
000103 dff2      	RCALL __lcd_read_nibble_G101
000104 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
000105 95e2          swap  r30
000106 2bea          or    r30,r26
000107 9508      	RET
                 _lcd_gotoxy:
000108 93aa      	ST   -Y,R26
000109 940e 00cc 	CALL __lcd_ready
00010b 81e8      	LD   R30,Y
00010c e0f0      	LDI  R31,0
00010d 59e3      	SUBI R30,LOW(-__base_y_G101)
00010e 4ffe      	SBCI R31,HIGH(-__base_y_G101)
00010f 81e0      	LD   R30,Z
000110 81a9      	LDD  R26,Y+1
000111 0fae      	ADD  R26,R30
000112 940e 00e7 	CALL __lcd_write_data
000114 8099      	LDD  R9,Y+1
000115 8088      	LDD  R8,Y+0
000116 9622      	ADIW R28,2
000117 9508      	RET
                 _lcd_clear:
000118 940e 00cc 	CALL __lcd_ready
00011a e0a2      	LDI  R26,LOW(2)
00011b 940e 00e7 	CALL __lcd_write_data
00011d 940e 00cc 	CALL __lcd_ready
00011f e0ac      	LDI  R26,LOW(12)
000120 940e 00e7 	CALL __lcd_write_data
000122 940e 00cc 	CALL __lcd_ready
000124 e0a1      	LDI  R26,LOW(1)
000125 940e 00e7 	CALL __lcd_write_data
000127 e0e0      	LDI  R30,LOW(0)
000128 2e8e      	MOV  R8,R30
000129 2e9e      	MOV  R9,R30
00012a 9508      	RET
                 _lcd_putchar:
00012b 93aa      	ST   -Y,R26
00012c 93ef          push r30
00012d 93ff          push r31
00012e 81a8          ld   r26,y
00012f 9468          set
000130 30aa          cpi  r26,10
000131 f019          breq __lcd_putchar1
000132 94e8          clt
000133 149b      	CP   R9,R11
000134 f030      	BRLO _0x2020004
                 	__lcd_putchar1:
000135 9483      	INC  R8
000136 e0e0      	LDI  R30,LOW(0)
000137 93ea      	ST   -Y,R30
000138 2da8      	MOV  R26,R8
000139 dfce      	RCALL _lcd_gotoxy
00013a f036      	brts __lcd_putchar0
                 _0x2020004:
00013b 9493      	INC  R9
00013c df8f          rcall __lcd_ready
00013d 9aa8          sbi  __lcd_port,__lcd_rs ;RS=1
00013e 81a8      	LD   R26,Y
00013f 940e 00e7 	CALL __lcd_write_data
                 __lcd_putchar0:
000141 91ff          pop  r31
000142 91ef          pop  r30
000143 940c 019e 	JMP  _0x20A0001
                 _lcd_puts:
000145 93ba      	ST   -Y,R27
000146 93aa      	ST   -Y,R26
000147 931a      	ST   -Y,R17
                 _0x2020005:
000148 81a9      	LDD  R26,Y+1
000149 81ba      	LDD  R27,Y+1+1
00014a 91ed      	LD   R30,X+
00014b 83a9      	STD  Y+1,R26
00014c 83ba      	STD  Y+1+1,R27
00014d 2f1e      	MOV  R17,R30
00014e 30e0      	CPI  R30,0
00014f f019      	BREQ _0x2020007
000150 2fa1      	MOV  R26,R17
000151 dfd9      	RCALL _lcd_putchar
000152 cff5      	RJMP _0x2020005
                 _0x2020007:
000153 8118      	LDD  R17,Y+0
000154 9623      	ADIW R28,3
000155 9508      	RET
                 __long_delay_G101:
000156 27aa          clr   r26
000157 27bb          clr   r27
                 __long_delay0:
000158 9711          sbiw  r26,1         ;2 cycles
000159 f7f1          brne  __long_delay0 ;2 cycles
00015a 9508      	RET
                 __lcd_init_write_G101:
00015b 93aa      	ST   -Y,R26
00015c 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00015d b3a4          in    r26,__lcd_direction
00015e 6fa7          ori   r26,0xf7                ;set as output
00015f bba4          out   __lcd_direction,r26
000160 b3b5          in    r27,__lcd_port
000161 70bf          andi  r27,0xf
000162 81a8          ld    r26,y
000163 940e 00dd 	CALL __lcd_write_nibble_G101
000165 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000166 c037      	RJMP _0x20A0001
                 _lcd_init:
000167 93aa      	ST   -Y,R26
000168 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000169 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
00016a 80b8      	LDD  R11,Y+0
00016b 81e8      	LD   R30,Y
00016c 58e0      	SUBI R30,-LOW(128)
                +
00016d 93e0 016f+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00016f 81e8      	LD   R30,Y
000170 54e0      	SUBI R30,-LOW(192)
                +
000171 93e0 0170+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000173 dfe2      	RCALL __long_delay_G101
000174 e3a0      	LDI  R26,LOW(48)
000175 dfe5      	RCALL __lcd_init_write_G101
000176 dfdf      	RCALL __long_delay_G101
000177 e3a0      	LDI  R26,LOW(48)
000178 dfe2      	RCALL __lcd_init_write_G101
000179 dfdc      	RCALL __long_delay_G101
00017a e3a0      	LDI  R26,LOW(48)
00017b dfdf      	RCALL __lcd_init_write_G101
00017c dfd9      	RCALL __long_delay_G101
00017d e2a0      	LDI  R26,LOW(32)
00017e dfdc      	RCALL __lcd_init_write_G101
00017f dfd6      	RCALL __long_delay_G101
000180 e2a8      	LDI  R26,LOW(40)
000181 940e 00e7 	CALL __lcd_write_data
000183 dfd2      	RCALL __long_delay_G101
000184 e0a4      	LDI  R26,LOW(4)
000185 940e 00e7 	CALL __lcd_write_data
000187 dfce      	RCALL __long_delay_G101
000188 e8a5      	LDI  R26,LOW(133)
000189 940e 00e7 	CALL __lcd_write_data
00018b dfca      	RCALL __long_delay_G101
00018c b3a4          in    r26,__lcd_direction
00018d 70af          andi  r26,0xf                 ;set as input
00018e bba4          out   __lcd_direction,r26
00018f 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000190 940e 00ff 	CALL _lcd_read_byte0_G101
000192 30e5      	CPI  R30,LOW(0x5)
000193 f011      	BREQ _0x202000B
000194 e0e0      	LDI  R30,LOW(0)
000195 c008      	RJMP _0x20A0001
                 _0x202000B:
000196 940e 00cc 	CALL __lcd_ready
000198 e0a6      	LDI  R26,LOW(6)
000199 940e 00e7 	CALL __lcd_write_data
00019b 940e 0118 	CALL _lcd_clear
00019d e0e1      	LDI  R30,LOW(1)
                 _0x20A0001:
00019e 9621      	ADIW R28,1
00019f 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G100:
000169           	.BYTE 0x4
                 __base_y_G101:
00016d           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
0001a0 9610      	adiw r26,0
0001a1 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001a2 ef8a     +LDI R24 , LOW ( 0xFA )
0001a3 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001a4 9701     +SBIW R24 , 1
0001a5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001a6 95a8      	wdr
0001a7 9711      	sbiw r26,1
0001a8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001a9 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   2 r5 :   2 r6 :   2 r7 :   0 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  15 r25:   8 r26:  65 r27:  15 r28:   4 r29:   1 r30:  58 r31:  15 
x  :   7 y  :  36 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   6 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :   9 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   2 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  30 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   2 
cp    :   2 cpc   :   1 cpi   :   3 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   3 jmp   :  24 ld    :  14 ldd   :   7 ldi   :  50 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   7 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   2 out   :  15 pop   :   2 push  :   2 rcall :  28 ret   :  14 
reti  :   0 rjmp  :   8 rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :  10 sbic  :   0 sbis  :   1 sbiw  :   6 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  21 std   :   2 sts   :   2 sub   :   1 subi  :   4 swap  :   2 
tst   :   1 wdr   :   1 
Instructions used: 50 out of 116 (43.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000354    808     44    852   16384   5.2%
[.dseg] 0x000060 0x000171      0     17     17    1119   1.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
