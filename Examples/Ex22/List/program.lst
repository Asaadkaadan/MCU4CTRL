
AVRASM ver. 2.1.30  C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application24\List\program.asm Fri Apr 29 23:34:31 2016

C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application24\List\program.asm(1072): warning: Register r5 already defined by the .DEF directive
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application24\List\program.asm(1073): warning: Register r4 already defined by the .DEF directive
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application24\List\program.asm(1074): warning: Register r7 already defined by the .DEF directive
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application24\List\program.asm(1075): warning: Register r6 already defined by the .DEF directive
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application24\List\program.asm(1076): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 1.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _press_f=R5
                 	.DEF _kp=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 754e
00002b 626d
00002c 7265
00002d 003d      	.DB  0x4E,0x75,0x6D,0x62,0x65,0x72,0x3D,0x0
00002e 2020
00002f 2020
000030 2020
000031 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application24\List\program.asm(1110): warning: .cseg .db misalignment - padding zero byte
000032 0000      	.DB  0x0
                 _0x2000060:
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application24\List\program.asm(1112): warning: .cseg .db misalignment - padding zero byte
000033 0001      	.DB  0x1
                 _0x2000000:
000034 4e2d
000035 4e41
000036 4900
000037 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\shift\Desktop\my work\COURSE MICRO\applications\application24\List\program.asm(1115): warning: .cseg .db misalignment - padding zero byte
000038 0000      	.DB  0x0
                 _0x2020003:
000039 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003a 0008      	.DW  0x08
00003b 0160      	.DW  _0x3
00003c 0054      	.DW  _0x0*2
                 
00003d 0008      	.DW  0x08
00003e 0168      	.DW  _0x3+8
00003f 0054      	.DW  _0x0*2
                 
000040 0009      	.DW  0x09
000041 0170      	.DW  _0x3+16
000042 005c      	.DW  _0x0*2+8
                 
000043 0001      	.DW  0x01
000044 0185      	.DW  __seed_G100
000045 0066      	.DW  _0x2000060*2
                 
000046 0002      	.DW  0x02
000047 0189      	.DW  __base_y_G101
000048 0072      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000049 0000      	.DW  0
                 
                 __RESET:
00004a 94f8      	CLI
00004b 27ee      	CLR  R30
00004c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004d e0f1      	LDI  R31,1
00004e bffb      	OUT  GICR,R31
00004f bfeb      	OUT  GICR,R30
000050 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000051 e1f8      	LDI  R31,0x18
000052 bdf1      	OUT  WDTCR,R31
000053 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000054 e08d      	LDI  R24,(14-2)+1
000055 e0a2      	LDI  R26,2
000056 27bb      	CLR  R27
                 __CLEAR_REG:
000057 93ed      	ST   X+,R30
000058 958a      	DEC  R24
000059 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005d 93ed      	ST   X+,R30
00005e 9701      	SBIW R24,1
00005f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000060 e7e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000061 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000062 9185      	LPM  R24,Z+
000063 9195      	LPM  R25,Z+
000064 9700      	SBIW R24,0
000065 f061      	BREQ __GLOBAL_INI_END
000066 91a5      	LPM  R26,Z+
000067 91b5      	LPM  R27,Z+
000068 9005      	LPM  R0,Z+
000069 9015      	LPM  R1,Z+
00006a 01bf      	MOVW R22,R30
00006b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006c 9005      	LPM  R0,Z+
00006d 920d      	ST   X+,R0
00006e 9701      	SBIW R24,1
00006f f7e1      	BRNE __GLOBAL_INI_LOOP
000070 01fb      	MOVW R30,R22
000071 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000072 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000073 bfed      	OUT  SPL,R30
000074 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000075 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000076 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000077 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000078 940c 007a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <lcd.h>
                 ;#asm
                 .equ __lcd_port=0x1B ; PORTA
                 ; 0000 0007 #endasm
                 ;char keypad16(void);
                 ;char press_f;
                 ;long number;
                 ;eeprom long e_number;
                 ;char s[8];
                 ;char kp;
                 ;void main(void) {
                 ; 0000 000E void main(void) {
                 
                 	.CSEG
                 _main:
                 ; 0000 000F DDRD=0b00001111;
00007a e0ef      	LDI  R30,LOW(15)
00007b bbe1      	OUT  0x11,R30
                 ; 0000 0010 lcd_init(16);
00007c e1a0      	LDI  R26,LOW(16)
00007d 940e 02b8 	CALL _lcd_init
                 ; 0000 0011 lcd_gotoxy(0,0);
00007f e0e0      	LDI  R30,LOW(0)
000080 93ea      	ST   -Y,R30
000081 e0a0      	LDI  R26,LOW(0)
000082 940e 0259 	CALL _lcd_gotoxy
                 ; 0000 0012 lcd_puts("Number=");
                +
000084 e6a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
000085 e0b1     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
000086 940e 0296 	CALL _lcd_puts
                 ; 0000 0013 Loop:
                 _0x4:
                 ; 0000 0014 kp=keypad16();
000088 d089      	RCALL _keypad16
000089 2e4e      	MOV  R4,R30
                 ; 0000 0015 if (kp!=20)
00008a e1e4      	LDI  R30,LOW(20)
00008b 15e4      	CP   R30,R4
00008c f411      	BRNE PC+3
00008d 940c 0111 	JMP _0x5
                 ; 0000 0016 {
                 ; 0000 0017 if (kp<10)
00008f e0ea      	LDI  R30,LOW(10)
000090 164e      	CP   R4,R30
000091 f5c0      	BRSH _0x6
                 ; 0000 0018 {if(number<9999999)
000092 91a0 0179 	LDS  R26,_number
000094 91b0 017a 	LDS  R27,_number+1
000096 9180 017b 	LDS  R24,_number+2
000098 9190 017c 	LDS  R25,_number+3
                +
00009a 37af     +CPI R26 , LOW ( 0x98967F )
00009b e9e6     +LDI R30 , HIGH ( 0x98967F )
00009c 07be     +CPC R27 , R30
00009d e9e8     +LDI R30 , BYTE3 ( 0x98967F )
00009e 078e     +CPC R24 , R30
00009f e0e0     +LDI R30 , BYTE4 ( 0x98967F )
0000a0 079e     +CPC R25 , R30
                 	__CPD2N 0x98967F
0000a1 f4fc      	BRGE _0x7
                 ; 0000 0019 number=number*10+kp;
0000a2 91e0 0179 	LDS  R30,_number
0000a4 91f0 017a 	LDS  R31,_number+1
0000a6 9160 017b 	LDS  R22,_number+2
0000a8 9170 017c 	LDS  R23,_number+3
                +
0000aa e0aa     +LDI R26 , LOW ( 0xA )
0000ab e0b0     +LDI R27 , HIGH ( 0xA )
0000ac e080     +LDI R24 , BYTE3 ( 0xA )
0000ad e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
0000ae 940e 032d 	CALL __MULD12
0000b0 01df      	MOVW R26,R30
0000b1 01cb      	MOVW R24,R22
0000b2 2de4      	MOV  R30,R4
0000b3 e0f0      	LDI  R31,0
0000b4 940e 0308 	CALL __CWD1
0000b6 940e 02fb 	CALL __ADDD12
0000b8 93e0 0179 	STS  _number,R30
0000ba 93f0 017a 	STS  _number+1,R31
0000bc 9360 017b 	STS  _number+2,R22
0000be 9370 017c 	STS  _number+3,R23
                 ; 0000 001A else
0000c0 c009      	RJMP _0x8
                 _0x7:
                 ; 0000 001B number=0;}
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 93e0 0179 	STS  _number,R30
0000c4 93e0 017a 	STS  _number+1,R30
0000c6 93e0 017b 	STS  _number+2,R30
0000c8 93e0 017c 	STS  _number+3,R30
                 _0x8:
                 ; 0000 001C if (kp==10)e_number=number;
                 _0x6:
0000ca e0ea      	LDI  R30,LOW(10)
0000cb 15e4      	CP   R30,R4
0000cc f461      	BRNE _0x9
0000cd 91e0 0179 	LDS  R30,_number
0000cf 91f0 017a 	LDS  R31,_number+1
0000d1 9160 017b 	LDS  R22,_number+2
0000d3 9170 017c 	LDS  R23,_number+3
0000d5 e0a0      	LDI  R26,LOW(_e_number)
0000d6 e0b0      	LDI  R27,HIGH(_e_number)
0000d7 940e 0387 	CALL __EEPROMWRD
                 ; 0000 001D if (kp==11)number=e_number;
                 _0x9:
0000d9 e0eb      	LDI  R30,LOW(11)
0000da 15e4      	CP   R30,R4
0000db f461      	BRNE _0xA
0000dc e0a0      	LDI  R26,LOW(_e_number)
0000dd e0b0      	LDI  R27,HIGH(_e_number)
0000de 940e 0373 	CALL __EEPROMRDD
0000e0 93e0 0179 	STS  _number,R30
0000e2 93f0 017a 	STS  _number+1,R31
0000e4 9360 017b 	STS  _number+2,R22
0000e6 9370 017c 	STS  _number+3,R23
                 ; 0000 001E lcd_gotoxy(0,0);
                 _0xA:
0000e8 e0e0      	LDI  R30,LOW(0)
0000e9 93ea      	ST   -Y,R30
0000ea e0a0      	LDI  R26,LOW(0)
0000eb 940e 0259 	CALL _lcd_gotoxy
                 ; 0000 001F lcd_puts("Number=");
                +
0000ed e6a8     +LDI R26 , LOW ( _0x3 + ( 8 ) )
0000ee e0b1     +LDI R27 , HIGH ( _0x3 + ( 8 ) )
                 	__POINTW2MN _0x3,8
0000ef 940e 0296 	CALL _lcd_puts
                 ; 0000 0020 ltoa(number,s);
0000f1 91e0 0179 	LDS  R30,_number
0000f3 91f0 017a 	LDS  R31,_number+1
0000f5 9160 017b 	LDS  R22,_number+2
0000f7 9170 017c 	LDS  R23,_number+3
0000f9 940e 036e 	CALL __PUTPARD1
0000fb e7ad      	LDI  R26,LOW(_s)
0000fc e0b1      	LDI  R27,HIGH(_s)
0000fd 940e 01a9 	CALL _ltoa
                 ; 0000 0021 lcd_gotoxy(7,0);
0000ff e0e7      	LDI  R30,LOW(7)
000100 93ea      	ST   -Y,R30
000101 e0a0      	LDI  R26,LOW(0)
000102 940e 0259 	CALL _lcd_gotoxy
                 ; 0000 0022 lcd_puts("        ");
                +
000104 e7a0     +LDI R26 , LOW ( _0x3 + ( 16 ) )
000105 e0b1     +LDI R27 , HIGH ( _0x3 + ( 16 ) )
                 	__POINTW2MN _0x3,16
000106 940e 0296 	CALL _lcd_puts
                 ; 0000 0023 lcd_gotoxy(7,0);
000108 e0e7      	LDI  R30,LOW(7)
000109 93ea      	ST   -Y,R30
00010a e0a0      	LDI  R26,LOW(0)
00010b 940e 0259 	CALL _lcd_gotoxy
                 ; 0000 0024 lcd_puts(s);}
00010d e7ad      	LDI  R26,LOW(_s)
00010e e0b1      	LDI  R27,HIGH(_s)
00010f 940e 0296 	CALL _lcd_puts
                 ; 0000 0025 goto Loop;}
                 _0x5:
000111 cf76      	RJMP _0x4
                 
                 	.DSEG
                 _0x3:
000160           	.BYTE 0x19
                 ;char keypad16(void)
                 ; 0000 0027 {char key=20;
                 
                 	.CSEG
                 _keypad16:
                 ; 0000 0028 PORTD=0B00000001;delay_ms(1);
000112 931a      	ST   -Y,R17
                 ;	key -> R17
000113 e114      	LDI  R17,20
000114 e0e1      	LDI  R30,LOW(1)
000115 bbe2      	OUT  0x12,R30
000116 e0a1      	LDI  R26,LOW(1)
000117 e0b0      	LDI  R27,0
000118 940e 02f1 	CALL _delay_ms
                 ; 0000 0029 if (PIND.4==1 && press_f==0)
00011a 9b84      	SBIS 0x10,4
00011b c003      	RJMP _0xC
00011c e0e0      	LDI  R30,LOW(0)
00011d 15e5      	CP   R30,R5
00011e f009      	BREQ _0xD
                 _0xC:
00011f c003      	RJMP _0xB
                 _0xD:
                 ; 0000 002A {key=1;press_f=1;}
000120 e011      	LDI  R17,LOW(1)
000121 e0e1      	LDI  R30,LOW(1)
000122 2e5e      	MOV  R5,R30
                 ; 0000 002B if (PIND.5==1 && press_f==0)
                 _0xB:
000123 9b85      	SBIS 0x10,5
000124 c003      	RJMP _0xF
000125 e0e0      	LDI  R30,LOW(0)
000126 15e5      	CP   R30,R5
000127 f009      	BREQ _0x10
                 _0xF:
000128 c003      	RJMP _0xE
                 _0x10:
                 ; 0000 002C {key=2;press_f=1;}
000129 e012      	LDI  R17,LOW(2)
00012a e0e1      	LDI  R30,LOW(1)
00012b 2e5e      	MOV  R5,R30
                 ; 0000 002D if (PIND.6==1 && press_f==0)
                 _0xE:
00012c 9b86      	SBIS 0x10,6
00012d c003      	RJMP _0x12
00012e e0e0      	LDI  R30,LOW(0)
00012f 15e5      	CP   R30,R5
000130 f009      	BREQ _0x13
                 _0x12:
000131 c003      	RJMP _0x11
                 _0x13:
                 ; 0000 002E {key=3;press_f=1;}
000132 e013      	LDI  R17,LOW(3)
000133 e0e1      	LDI  R30,LOW(1)
000134 2e5e      	MOV  R5,R30
                 ; 0000 002F PORTD=0B00000010;delay_ms(1);
                 _0x11:
000135 e0e2      	LDI  R30,LOW(2)
000136 bbe2      	OUT  0x12,R30
000137 e0a1      	LDI  R26,LOW(1)
000138 e0b0      	LDI  R27,0
000139 940e 02f1 	CALL _delay_ms
                 ; 0000 0030 if (PIND.4==1 && press_f==0)
00013b 9b84      	SBIS 0x10,4
00013c c003      	RJMP _0x15
00013d e0e0      	LDI  R30,LOW(0)
00013e 15e5      	CP   R30,R5
00013f f009      	BREQ _0x16
                 _0x15:
000140 c003      	RJMP _0x14
                 _0x16:
                 ; 0000 0031 {key=4;press_f=1;}
000141 e014      	LDI  R17,LOW(4)
000142 e0e1      	LDI  R30,LOW(1)
000143 2e5e      	MOV  R5,R30
                 ; 0000 0032 if (PIND.5==1 && press_f==0)
                 _0x14:
000144 9b85      	SBIS 0x10,5
000145 c003      	RJMP _0x18
000146 e0e0      	LDI  R30,LOW(0)
000147 15e5      	CP   R30,R5
000148 f009      	BREQ _0x19
                 _0x18:
000149 c003      	RJMP _0x17
                 _0x19:
                 ; 0000 0033 {key=5;press_f=1;}
00014a e015      	LDI  R17,LOW(5)
00014b e0e1      	LDI  R30,LOW(1)
00014c 2e5e      	MOV  R5,R30
                 ; 0000 0034 if (PIND.6==1 && press_f==0)
                 _0x17:
00014d 9b86      	SBIS 0x10,6
00014e c003      	RJMP _0x1B
00014f e0e0      	LDI  R30,LOW(0)
000150 15e5      	CP   R30,R5
000151 f009      	BREQ _0x1C
                 _0x1B:
000152 c003      	RJMP _0x1A
                 _0x1C:
                 ; 0000 0035 {key=6;press_f=1;}
000153 e016      	LDI  R17,LOW(6)
000154 e0e1      	LDI  R30,LOW(1)
000155 2e5e      	MOV  R5,R30
                 ; 0000 0036 PORTD=0B00000100;delay_ms(1);
                 _0x1A:
000156 e0e4      	LDI  R30,LOW(4)
000157 bbe2      	OUT  0x12,R30
000158 e0a1      	LDI  R26,LOW(1)
000159 e0b0      	LDI  R27,0
00015a 940e 02f1 	CALL _delay_ms
                 ; 0000 0037 if (PIND.4==1 && press_f==0)
00015c 9b84      	SBIS 0x10,4
00015d c003      	RJMP _0x1E
00015e e0e0      	LDI  R30,LOW(0)
00015f 15e5      	CP   R30,R5
000160 f009      	BREQ _0x1F
                 _0x1E:
000161 c003      	RJMP _0x1D
                 _0x1F:
                 ; 0000 0038 {key=7;press_f=1;}
000162 e017      	LDI  R17,LOW(7)
000163 e0e1      	LDI  R30,LOW(1)
000164 2e5e      	MOV  R5,R30
                 ; 0000 0039 if (PIND.5==1 && press_f==0)
                 _0x1D:
000165 9b85      	SBIS 0x10,5
000166 c003      	RJMP _0x21
000167 e0e0      	LDI  R30,LOW(0)
000168 15e5      	CP   R30,R5
000169 f009      	BREQ _0x22
                 _0x21:
00016a c003      	RJMP _0x20
                 _0x22:
                 ; 0000 003A {key=8;press_f=1;}
00016b e018      	LDI  R17,LOW(8)
00016c e0e1      	LDI  R30,LOW(1)
00016d 2e5e      	MOV  R5,R30
                 ; 0000 003B if (PIND.6==1 && press_f==0)
                 _0x20:
00016e 9b86      	SBIS 0x10,6
00016f c003      	RJMP _0x24
000170 e0e0      	LDI  R30,LOW(0)
000171 15e5      	CP   R30,R5
000172 f009      	BREQ _0x25
                 _0x24:
000173 c003      	RJMP _0x23
                 _0x25:
                 ; 0000 003C {key=9;press_f=1;}
000174 e019      	LDI  R17,LOW(9)
000175 e0e1      	LDI  R30,LOW(1)
000176 2e5e      	MOV  R5,R30
                 ; 0000 003D PORTD=0B00001000;delay_ms(1);
                 _0x23:
000177 e0e8      	LDI  R30,LOW(8)
000178 bbe2      	OUT  0x12,R30
000179 e0a1      	LDI  R26,LOW(1)
00017a e0b0      	LDI  R27,0
00017b 940e 02f1 	CALL _delay_ms
                 ; 0000 003E if (PIND.4==1 && press_f==0)
00017d 9b84      	SBIS 0x10,4
00017e c003      	RJMP _0x27
00017f e0e0      	LDI  R30,LOW(0)
000180 15e5      	CP   R30,R5
000181 f009      	BREQ _0x28
                 _0x27:
000182 c003      	RJMP _0x26
                 _0x28:
                 ; 0000 003F {key=10;press_f=1;}
000183 e01a      	LDI  R17,LOW(10)
000184 e0e1      	LDI  R30,LOW(1)
000185 2e5e      	MOV  R5,R30
                 ; 0000 0040 if (PIND.5==1 && press_f==0)
                 _0x26:
000186 9b85      	SBIS 0x10,5
000187 c003      	RJMP _0x2A
000188 e0e0      	LDI  R30,LOW(0)
000189 15e5      	CP   R30,R5
00018a f009      	BREQ _0x2B
                 _0x2A:
00018b c003      	RJMP _0x29
                 _0x2B:
                 ; 0000 0041 {key=0;press_f=1;}
00018c e010      	LDI  R17,LOW(0)
00018d e0e1      	LDI  R30,LOW(1)
00018e 2e5e      	MOV  R5,R30
                 ; 0000 0042 if (PIND.6==1 && press_f==0)
                 _0x29:
00018f 9b86      	SBIS 0x10,6
000190 c003      	RJMP _0x2D
000191 e0e0      	LDI  R30,LOW(0)
000192 15e5      	CP   R30,R5
000193 f009      	BREQ _0x2E
                 _0x2D:
000194 c003      	RJMP _0x2C
                 _0x2E:
                 ; 0000 0043 {key=11;press_f=1;}
000195 e01b      	LDI  R17,LOW(11)
000196 e0e1      	LDI  R30,LOW(1)
000197 2e5e      	MOV  R5,R30
                 ; 0000 0044 PORTD=0B00001111;delay_ms(1);
                 _0x2C:
000198 e0ef      	LDI  R30,LOW(15)
000199 bbe2      	OUT  0x12,R30
00019a e0a1      	LDI  R26,LOW(1)
00019b e0b0      	LDI  R27,0
00019c 940e 02f1 	CALL _delay_ms
                 ; 0000 0045 if (PIND==0B00001111 && press_f==1)
00019e b3e0      	IN   R30,0x10
00019f 30ef      	CPI  R30,LOW(0xF)
0001a0 f419      	BRNE _0x30
0001a1 e0e1      	LDI  R30,LOW(1)
0001a2 15e5      	CP   R30,R5
0001a3 f009      	BREQ _0x31
                 _0x30:
0001a4 c001      	RJMP _0x2F
                 _0x31:
                 ; 0000 0046 {press_f=0;}
0001a5 2455      	CLR  R5
                 ; 0000 0047 return key;}
                 _0x2F:
0001a6 2fe1      	MOV  R30,R17
0001a7 9119      	LD   R17,Y+
0001a8 9508      	RET
                 
                 	.CSEG
                 _ltoa:
0001a9 93ba      	ST   -Y,R27
0001aa 93aa      	ST   -Y,R26
0001ab 9724      	SBIW R28,4
0001ac 931a      	ST   -Y,R17
0001ad 930a      	ST   -Y,R16
                +
0001ae e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0001af ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0001b0 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0001b1 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
                +
0001b2 83ea     +STD Y + 2 , R30
0001b3 83fb     +STD Y + 2 + 1 , R31
0001b4 836c     +STD Y + 2 + 2 , R22
0001b5 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0001b6 e000      	LDI  R16,LOW(0)
0001b7 85ab      	LDD  R26,Y+11
0001b8 23aa      	TST  R26
0001b9 f492      	BRPL _0x2000003
                +
0001ba 85e8     +LDD R30 , Y + 8
0001bb 85f9     +LDD R31 , Y + 8 + 1
0001bc 856a     +LDD R22 , Y + 8 + 2
0001bd 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0001be 940e 0300 	CALL __ANEGD1
                +
0001c0 87e8     +STD Y + 8 , R30
0001c1 87f9     +STD Y + 8 + 1 , R31
0001c2 876a     +STD Y + 8 + 2 , R22
0001c3 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0001c4 81ae      	LDD  R26,Y+6
0001c5 81bf      	LDD  R27,Y+6+1
0001c6 9611      	ADIW R26,1
0001c7 83ae      	STD  Y+6,R26
0001c8 83bf      	STD  Y+6+1,R27
0001c9 9711      	SBIW R26,1
0001ca e2ed      	LDI  R30,LOW(45)
0001cb 93ec      	ST   X,R30
                 _0x2000003:
                 _0x2000005:
                +
0001cc 81ea     +LDD R30 , Y + 2
0001cd 81fb     +LDD R31 , Y + 2 + 1
0001ce 816c     +LDD R22 , Y + 2 + 2
0001cf 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0001d0 85a8     +LDD R26 , Y + 8
0001d1 85b9     +LDD R27 , Y + 8 + 1
0001d2 858a     +LDD R24 , Y + 8 + 2
0001d3 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0001d4 940e 0332 	CALL __DIVD21U
0001d6 2f1e      	MOV  R17,R30
0001d7 3010      	CPI  R17,0
0001d8 f471      	BRNE _0x2000008
0001d9 3000      	CPI  R16,0
0001da f461      	BRNE _0x2000008
                +
0001db 81aa     +LDD R26 , Y + 2
0001dc 81bb     +LDD R27 , Y + 2 + 1
0001dd 818c     +LDD R24 , Y + 2 + 2
0001de 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
0001df 30a1     +CPI R26 , LOW ( 0x1 )
0001e0 e0e0     +LDI R30 , HIGH ( 0x1 )
0001e1 07be     +CPC R27 , R30
0001e2 e0e0     +LDI R30 , BYTE3 ( 0x1 )
0001e3 078e     +CPC R24 , R30
0001e4 e0e0     +LDI R30 , BYTE4 ( 0x1 )
0001e5 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0001e6 f451      	BRNE _0x2000007
                 _0x2000008:
0001e7 81ae      	LDD  R26,Y+6
0001e8 81bf      	LDD  R27,Y+6+1
0001e9 9611      	ADIW R26,1
0001ea 83ae      	STD  Y+6,R26
0001eb 83bf      	STD  Y+6+1,R27
0001ec 9711      	SBIW R26,1
0001ed 2fe1      	MOV  R30,R17
0001ee 5de0      	SUBI R30,-LOW(48)
0001ef 93ec      	ST   X,R30
0001f0 e001      	LDI  R16,LOW(1)
                 _0x2000007:
                +
0001f1 81ea     +LDD R30 , Y + 2
0001f2 81fb     +LDD R31 , Y + 2 + 1
0001f3 816c     +LDD R22 , Y + 2 + 2
0001f4 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
0001f5 85a8     +LDD R26 , Y + 8
0001f6 85b9     +LDD R27 , Y + 8 + 1
0001f7 858a     +LDD R24 , Y + 8 + 2
0001f8 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0001f9 940e 0357 	CALL __MODD21U
                +
0001fb 87e8     +STD Y + 8 , R30
0001fc 87f9     +STD Y + 8 + 1 , R31
0001fd 876a     +STD Y + 8 + 2 , R22
0001fe 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                +
0001ff 81aa     +LDD R26 , Y + 2
000200 81bb     +LDD R27 , Y + 2 + 1
000201 818c     +LDD R24 , Y + 2 + 2
000202 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
000203 e0ea     +LDI R30 , LOW ( 0xA )
000204 e0f0     +LDI R31 , HIGH ( 0xA )
000205 e060     +LDI R22 , BYTE3 ( 0xA )
000206 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000207 940e 0332 	CALL __DIVD21U
                +
000209 83ea     +STD Y + 2 , R30
00020a 83fb     +STD Y + 2 + 1 , R31
00020b 836c     +STD Y + 2 + 2 , R22
00020c 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00020d 940e 03a8 	CALL __CPD10
00020f f009      	BREQ _0x2000006
000210 cfbb      	RJMP _0x2000005
                 _0x2000006:
000211 81ae      	LDD  R26,Y+6
000212 81bf      	LDD  R27,Y+6+1
000213 e0e0      	LDI  R30,LOW(0)
000214 93ec      	ST   X,R30
000215 8119      	LDD  R17,Y+1
000216 8108      	LDD  R16,Y+0
000217 962c      	ADIW R28,12
000218 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G101:
000219 e0ff          ldi   r31,15
                 __lcd_delay0:
00021a 95fa          dec   r31
00021b f7f1          brne  __lcd_delay0
00021c 9508      	RET
                 __lcd_ready:
00021d b3aa          in    r26,__lcd_direction
00021e 70af          andi  r26,0xf                 ;set as input
00021f bbaa          out   __lcd_direction,r26
000220 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000221 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000222 dff6      	RCALL __lcd_delay_G101
000223 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000224 dff4      	RCALL __lcd_delay_G101
000225 b3a9          in    r26,__lcd_pin
000226 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000227 dff1      	RCALL __lcd_delay_G101
000228 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000229 dfef      	RCALL __lcd_delay_G101
00022a 98da          cbi   __lcd_port,__lcd_enable ;EN=0
00022b fda7          sbrc  r26,__lcd_busy_flag
00022c cff5          rjmp  __lcd_busy
00022d 9508      	RET
                 __lcd_write_nibble_G101:
00022e 7fa0          andi  r26,0xf0
00022f 2bab          or    r26,r27
000230 bbab          out   __lcd_port,r26          ;write
000231 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000232 940e 0219 	CALL __lcd_delay_G101
000234 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000235 940e 0219 	CALL __lcd_delay_G101
000237 9508      	RET
                 __lcd_write_data:
000238 93aa      	ST   -Y,R26
000239 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00023a b3aa          in    r26,__lcd_direction
00023b 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
00023c bbaa          out   __lcd_direction,r26
00023d b3bb          in    r27,__lcd_port
00023e 70bf          andi  r27,0xf
00023f 81a8          ld    r26,y
000240 dfed      	RCALL __lcd_write_nibble_G101
000241 81a8          ld    r26,y
000242 95a2          swap  r26
000243 dfea      	RCALL __lcd_write_nibble_G101
000244 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000245 940c 02ef 	JMP  _0x20A0001
                 __lcd_read_nibble_G101:
000247 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000248 940e 0219 	CALL __lcd_delay_G101
00024a b3e9          in    r30,__lcd_pin           ;read
00024b 98da          cbi   __lcd_port,__lcd_enable ;EN=0
00024c 940e 0219 	CALL __lcd_delay_G101
00024e 7fe0          andi  r30,0xf0
00024f 9508      	RET
                 _lcd_read_byte0_G101:
000250 940e 0219 	CALL __lcd_delay_G101
000252 dff4      	RCALL __lcd_read_nibble_G101
000253 2fae          mov   r26,r30
000254 dff2      	RCALL __lcd_read_nibble_G101
000255 98d9          cbi   __lcd_port,__lcd_rd     ;RD=0
000256 95e2          swap  r30
000257 2bea          or    r30,r26
000258 9508      	RET
                 _lcd_gotoxy:
000259 93aa      	ST   -Y,R26
00025a 940e 021d 	CALL __lcd_ready
00025c 81e8      	LD   R30,Y
00025d e0f0      	LDI  R31,0
00025e 57e7      	SUBI R30,LOW(-__base_y_G101)
00025f 4ffe      	SBCI R31,HIGH(-__base_y_G101)
000260 81e0      	LD   R30,Z
000261 81a9      	LDD  R26,Y+1
000262 0fae      	ADD  R26,R30
000263 940e 0238 	CALL __lcd_write_data
000265 8079      	LDD  R7,Y+1
000266 8068      	LDD  R6,Y+0
000267 9622      	ADIW R28,2
000268 9508      	RET
                 _lcd_clear:
000269 940e 021d 	CALL __lcd_ready
00026b e0a2      	LDI  R26,LOW(2)
00026c 940e 0238 	CALL __lcd_write_data
00026e 940e 021d 	CALL __lcd_ready
000270 e0ac      	LDI  R26,LOW(12)
000271 940e 0238 	CALL __lcd_write_data
000273 940e 021d 	CALL __lcd_ready
000275 e0a1      	LDI  R26,LOW(1)
000276 940e 0238 	CALL __lcd_write_data
000278 e0e0      	LDI  R30,LOW(0)
000279 2e6e      	MOV  R6,R30
00027a 2e7e      	MOV  R7,R30
00027b 9508      	RET
                 _lcd_putchar:
00027c 93aa      	ST   -Y,R26
00027d 93ef          push r30
00027e 93ff          push r31
00027f 81a8          ld   r26,y
000280 9468          set
000281 30aa          cpi  r26,10
000282 f019          breq __lcd_putchar1
000283 94e8          clt
000284 1479      	CP   R7,R9
000285 f030      	BRLO _0x2020004
                 	__lcd_putchar1:
000286 9463      	INC  R6
000287 e0e0      	LDI  R30,LOW(0)
000288 93ea      	ST   -Y,R30
000289 2da6      	MOV  R26,R6
00028a dfce      	RCALL _lcd_gotoxy
00028b f036      	brts __lcd_putchar0
                 _0x2020004:
00028c 9473      	INC  R7
00028d df8f          rcall __lcd_ready
00028e 9ad8          sbi  __lcd_port,__lcd_rs ;RS=1
00028f 81a8      	LD   R26,Y
000290 940e 0238 	CALL __lcd_write_data
                 __lcd_putchar0:
000292 91ff          pop  r31
000293 91ef          pop  r30
000294 940c 02ef 	JMP  _0x20A0001
                 _lcd_puts:
000296 93ba      	ST   -Y,R27
000297 93aa      	ST   -Y,R26
000298 931a      	ST   -Y,R17
                 _0x2020005:
000299 81a9      	LDD  R26,Y+1
00029a 81ba      	LDD  R27,Y+1+1
00029b 91ed      	LD   R30,X+
00029c 83a9      	STD  Y+1,R26
00029d 83ba      	STD  Y+1+1,R27
00029e 2f1e      	MOV  R17,R30
00029f 30e0      	CPI  R30,0
0002a0 f019      	BREQ _0x2020007
0002a1 2fa1      	MOV  R26,R17
0002a2 dfd9      	RCALL _lcd_putchar
0002a3 cff5      	RJMP _0x2020005
                 _0x2020007:
0002a4 8118      	LDD  R17,Y+0
0002a5 9623      	ADIW R28,3
0002a6 9508      	RET
                 __long_delay_G101:
0002a7 27aa          clr   r26
0002a8 27bb          clr   r27
                 __long_delay0:
0002a9 9711          sbiw  r26,1         ;2 cycles
0002aa f7f1          brne  __long_delay0 ;2 cycles
0002ab 9508      	RET
                 __lcd_init_write_G101:
0002ac 93aa      	ST   -Y,R26
0002ad 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0002ae b3aa          in    r26,__lcd_direction
0002af 6fa7          ori   r26,0xf7                ;set as output
0002b0 bbaa          out   __lcd_direction,r26
0002b1 b3bb          in    r27,__lcd_port
0002b2 70bf          andi  r27,0xf
0002b3 81a8          ld    r26,y
0002b4 940e 022e 	CALL __lcd_write_nibble_G101
0002b6 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
0002b7 c037      	RJMP _0x20A0001
                 _lcd_init:
0002b8 93aa      	ST   -Y,R26
0002b9 98da          cbi   __lcd_port,__lcd_enable ;EN=0
0002ba 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
0002bb 8098      	LDD  R9,Y+0
0002bc 81e8      	LD   R30,Y
0002bd 58e0      	SUBI R30,-LOW(128)
                +
0002be 93e0 018b+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0002c0 81e8      	LD   R30,Y
0002c1 54e0      	SUBI R30,-LOW(192)
                +
0002c2 93e0 018c+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0002c4 dfe2      	RCALL __long_delay_G101
0002c5 e3a0      	LDI  R26,LOW(48)
0002c6 dfe5      	RCALL __lcd_init_write_G101
0002c7 dfdf      	RCALL __long_delay_G101
0002c8 e3a0      	LDI  R26,LOW(48)
0002c9 dfe2      	RCALL __lcd_init_write_G101
0002ca dfdc      	RCALL __long_delay_G101
0002cb e3a0      	LDI  R26,LOW(48)
0002cc dfdf      	RCALL __lcd_init_write_G101
0002cd dfd9      	RCALL __long_delay_G101
0002ce e2a0      	LDI  R26,LOW(32)
0002cf dfdc      	RCALL __lcd_init_write_G101
0002d0 dfd6      	RCALL __long_delay_G101
0002d1 e2a8      	LDI  R26,LOW(40)
0002d2 940e 0238 	CALL __lcd_write_data
0002d4 dfd2      	RCALL __long_delay_G101
0002d5 e0a4      	LDI  R26,LOW(4)
0002d6 940e 0238 	CALL __lcd_write_data
0002d8 dfce      	RCALL __long_delay_G101
0002d9 e8a5      	LDI  R26,LOW(133)
0002da 940e 0238 	CALL __lcd_write_data
0002dc dfca      	RCALL __long_delay_G101
0002dd b3aa          in    r26,__lcd_direction
0002de 70af          andi  r26,0xf                 ;set as input
0002df bbaa          out   __lcd_direction,r26
0002e0 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
0002e1 940e 0250 	CALL _lcd_read_byte0_G101
0002e3 30e5      	CPI  R30,LOW(0x5)
0002e4 f011      	BREQ _0x202000B
0002e5 e0e0      	LDI  R30,LOW(0)
0002e6 c008      	RJMP _0x20A0001
                 _0x202000B:
0002e7 940e 021d 	CALL __lcd_ready
0002e9 e0a6      	LDI  R26,LOW(6)
0002ea 940e 0238 	CALL __lcd_write_data
0002ec 940e 0269 	CALL _lcd_clear
0002ee e0e1      	LDI  R30,LOW(1)
                 _0x20A0001:
0002ef 9621      	ADIW R28,1
0002f0 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _number:
000179           	.BYTE 0x4
                 
                 	.ESEG
                 _e_number:
000000           	.BYTE 0x4
                 
                 	.DSEG
                 _s:
00017d           	.BYTE 0x8
                 __seed_G100:
000185           	.BYTE 0x4
                 __base_y_G101:
000189           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
0002f1 9610      	adiw r26,0
0002f2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002f3 ef8a     +LDI R24 , LOW ( 0xFA )
0002f4 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0002f5 9701     +SBIW R24 , 1
0002f6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0002f7 95a8      	wdr
0002f8 9711      	sbiw r26,1
0002f9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002fa 9508      	ret
                 
                 __ADDD12:
0002fb 0fea      	ADD  R30,R26
0002fc 1ffb      	ADC  R31,R27
0002fd 1f68      	ADC  R22,R24
0002fe 1f79      	ADC  R23,R25
0002ff 9508      	RET
                 
                 __ANEGD1:
000300 95f0      	COM  R31
000301 9560      	COM  R22
000302 9570      	COM  R23
000303 95e1      	NEG  R30
000304 4fff      	SBCI R31,-1
000305 4f6f      	SBCI R22,-1
000306 4f7f      	SBCI R23,-1
000307 9508      	RET
                 
                 __CWD1:
000308 2f6f      	MOV  R22,R31
000309 0f66      	ADD  R22,R22
00030a 0b66      	SBC  R22,R22
00030b 2f76      	MOV  R23,R22
00030c 9508      	RET
                 
                 __MULD12U:
00030d 9f7a      	MUL  R23,R26
00030e 2d70      	MOV  R23,R0
00030f 9f6b      	MUL  R22,R27
000310 0d70      	ADD  R23,R0
000311 9ff8      	MUL  R31,R24
000312 0d70      	ADD  R23,R0
000313 9fe9      	MUL  R30,R25
000314 0d70      	ADD  R23,R0
000315 9f6a      	MUL  R22,R26
000316 2d60      	MOV  R22,R0
000317 0d71      	ADD  R23,R1
000318 9ffb      	MUL  R31,R27
000319 0d60      	ADD  R22,R0
00031a 1d71      	ADC  R23,R1
00031b 9fe8      	MUL  R30,R24
00031c 0d60      	ADD  R22,R0
00031d 1d71      	ADC  R23,R1
00031e 2788      	CLR  R24
00031f 9ffa      	MUL  R31,R26
000320 2df0      	MOV  R31,R0
000321 0d61      	ADD  R22,R1
000322 1f78      	ADC  R23,R24
000323 9feb      	MUL  R30,R27
000324 0df0      	ADD  R31,R0
000325 1d61      	ADC  R22,R1
000326 1f78      	ADC  R23,R24
000327 9fea      	MUL  R30,R26
000328 2de0      	MOV  R30,R0
000329 0df1      	ADD  R31,R1
00032a 1f68      	ADC  R22,R24
00032b 1f78      	ADC  R23,R24
00032c 9508      	RET
                 
                 __MULD12:
00032d d02d      	RCALL __CHKSIGND
00032e dfde      	RCALL __MULD12U
00032f f40e      	BRTC __MULD121
000330 dfcf      	RCALL __ANEGD1
                 __MULD121:
000331 9508      	RET
                 
                 __DIVD21U:
000332 933f      	PUSH R19
000333 934f      	PUSH R20
000334 935f      	PUSH R21
000335 2400      	CLR  R0
000336 2411      	CLR  R1
000337 2744      	CLR  R20
000338 2755      	CLR  R21
000339 e230      	LDI  R19,32
                 __DIVD21U1:
00033a 0faa      	LSL  R26
00033b 1fbb      	ROL  R27
00033c 1f88      	ROL  R24
00033d 1f99      	ROL  R25
00033e 1c00      	ROL  R0
00033f 1c11      	ROL  R1
000340 1f44      	ROL  R20
000341 1f55      	ROL  R21
000342 1a0e      	SUB  R0,R30
000343 0a1f      	SBC  R1,R31
000344 0b46      	SBC  R20,R22
000345 0b57      	SBC  R21,R23
000346 f428      	BRCC __DIVD21U2
000347 0e0e      	ADD  R0,R30
000348 1e1f      	ADC  R1,R31
000349 1f46      	ADC  R20,R22
00034a 1f57      	ADC  R21,R23
00034b c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00034c 60a1      	SBR  R26,1
                 __DIVD21U3:
00034d 953a      	DEC  R19
00034e f759      	BRNE __DIVD21U1
00034f 01fd      	MOVW R30,R26
000350 01bc      	MOVW R22,R24
000351 01d0      	MOVW R26,R0
000352 01ca      	MOVW R24,R20
000353 915f      	POP  R21
000354 914f      	POP  R20
000355 913f      	POP  R19
000356 9508      	RET
                 
                 __MODD21U:
000357 dfda      	RCALL __DIVD21U
000358 01fd      	MOVW R30,R26
000359 01bc      	MOVW R22,R24
00035a 9508      	RET
                 
                 __CHKSIGND:
00035b 94e8      	CLT
00035c ff77      	SBRS R23,7
00035d c002      	RJMP __CHKSD1
00035e dfa1      	RCALL __ANEGD1
00035f 9468      	SET
                 __CHKSD1:
000360 ff97      	SBRS R25,7
000361 c00b      	RJMP __CHKSD2
000362 2400      	CLR  R0
000363 95a0      	COM  R26
000364 95b0      	COM  R27
000365 9580      	COM  R24
000366 9590      	COM  R25
000367 9611      	ADIW R26,1
000368 1d80      	ADC  R24,R0
000369 1d90      	ADC  R25,R0
00036a f800      	BLD  R0,0
00036b 9403      	INC  R0
00036c fa00      	BST  R0,0
                 __CHKSD2:
00036d 9508      	RET
                 
                 __PUTPARD1:
00036e 937a      	ST   -Y,R23
00036f 936a      	ST   -Y,R22
000370 93fa      	ST   -Y,R31
000371 93ea      	ST   -Y,R30
000372 9508      	RET
                 
                 __EEPROMRDD:
000373 9612      	ADIW R26,2
000374 d002      	RCALL __EEPROMRDW
000375 01bf      	MOVW R22,R30
000376 9712      	SBIW R26,2
                 
                 __EEPROMRDW:
000377 9611      	ADIW R26,1
000378 d002      	RCALL __EEPROMRDB
000379 2ffe      	MOV  R31,R30
00037a 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
00037b 99e1      	SBIC EECR,EEWE
00037c cffe      	RJMP __EEPROMRDB
00037d 93ff      	PUSH R31
00037e b7ff      	IN   R31,SREG
00037f 94f8      	CLI
000380 bbae      	OUT  EEARL,R26
000381 bbbf      	OUT  EEARH,R27
000382 9ae0      	SBI  EECR,EERE
000383 b3ed      	IN   R30,EEDR
000384 bfff      	OUT  SREG,R31
000385 91ff      	POP  R31
000386 9508      	RET
                 
                 __EEPROMWRD:
000387 d007      	RCALL __EEPROMWRW
000388 9612      	ADIW R26,2
000389 010f      	MOVW R0,R30
00038a 01fb      	MOVW R30,R22
00038b d003      	RCALL __EEPROMWRW
00038c 01f0      	MOVW R30,R0
00038d 9712      	SBIW R26,2
00038e 9508      	RET
                 
                 __EEPROMWRW:
00038f d007      	RCALL __EEPROMWRB
000390 9611      	ADIW R26,1
000391 93ef      	PUSH R30
000392 2fef      	MOV  R30,R31
000393 d003      	RCALL __EEPROMWRB
000394 91ef      	POP  R30
000395 9711      	SBIW R26,1
000396 9508      	RET
                 
                 __EEPROMWRB:
000397 9be1      	SBIS EECR,EEWE
000398 c002      	RJMP __EEPROMWRB1
000399 95a8      	WDR
00039a cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00039b b79f      	IN   R25,SREG
00039c 94f8      	CLI
00039d bbae      	OUT  EEARL,R26
00039e bbbf      	OUT  EEARH,R27
00039f 9ae0      	SBI  EECR,EERE
0003a0 b38d      	IN   R24,EEDR
0003a1 17e8      	CP   R30,R24
0003a2 f019      	BREQ __EEPROMWRB0
0003a3 bbed      	OUT  EEDR,R30
0003a4 9ae2      	SBI  EECR,EEMWE
0003a5 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0003a6 bf9f      	OUT  SREG,R25
0003a7 9508      	RET
                 
                 __CPD10:
0003a8 9730      	SBIW R30,0
0003a9 4060      	SBCI R22,0
0003aa 4070      	SBCI R23,0
0003ab 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  27 r1 :  11 r2 :   0 r3 :   0 r4 :   6 r5 :  26 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:  25 r18:   0 r19:   4 r20:   7 r21:   6 r22:  42 r23:  34 
r24:  34 r25:  19 r26: 116 r27:  45 r28:   6 r29:   1 r30: 190 r31:  45 
x  :   7 y  :  97 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  15 add   :  13 
adiw  :  12 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  20 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   1 brsh  :   1 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  48 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  11 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   7 
cp    :  19 cpc   :   6 cpi   :   8 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  13 inc   :   3 jmp   :  25 ld    :  11 ldd   :  44 ldi   : 138 
lds   :  16 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  31 movw  :  15 
mul   :  10 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   2 
ori   :   2 out   :  26 pop   :   7 push  :   7 rcall :  35 ret   :  27 
reti  :   0 rjmp  :  39 rol   :   7 ror   :   0 sbc   :   4 sbci  :   6 
sbi   :  13 sbic  :   1 sbis  :  13 sbiw  :  14 sbr   :   1 sbrc  :   1 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :  22 sts   :  14 sub   :   1 subi  :   4 swap  :   2 
tst   :   1 wdr   :   2 
Instructions used: 65 out of 116 (56.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000758   1816     64   1880   16384  11.5%
[.dseg] 0x000060 0x00018d      0     45     45    1119   4.0%
[.eseg] 0x000000 0x000004      0      4      4     512   0.8%

Assembly complete, 0 errors, 8 warnings
