;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <stdlib.h>
;// Declare your global variables here
;int rev,i,ms,temp;
;unsigned long int volt,data;
;char *b;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0010 // Place your code here
; 0000 0011 i++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0012 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 0016 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0017 // Place your code here
; 0000 0018 ms++;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0019 if (ms==250)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001A {
; 0000 001B ms=0;
;PCODE: $0000001D VOL: 0
; 0000 001C rev=i*60;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001D i=0;
;PCODE: $00000022 VOL: 0
; 0000 001E }
; 0000 001F 
; 0000 0020 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;
;
;
;void main(void)
; 0000 0026 {
;PCODE: $00000027 VOL: 0
; 0000 0027 // Declare your local variables here
; 0000 0028 
; 0000 0029 // Input/Output Ports initialization
; 0000 002A // Port A initialization
; 0000 002B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 002C DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 002E PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002F 
; 0000 0030 // Port B initialization
; 0000 0031 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0032 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0033 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0034 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0035 
; 0000 0036 // Port C initialization
; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0038 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 003A PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003B 
; 0000 003C // Port D initialization
; 0000 003D // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 003E DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003F // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0040 PORTD=(0<<PORTD7) | (0<<PORTD6) | (1<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0041 
; 0000 0042 // Timer/Counter 0 initialization
; 0000 0043 // Clock source: System Clock
; 0000 0044 // Clock value: 125.000 kHz
; 0000 0045 // Mode: CTC top=OCR0
; 0000 0046 // OC0 output: Disconnected
; 0000 0047 // Timer Period: 4 ms
; 0000 0048 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0049 TCNT0=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004A OCR0=249;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004B 
; 0000 004C // Timer/Counter 1 initialization
; 0000 004D // Clock source: System Clock
; 0000 004E // Clock value: 125.000 kHz
; 0000 004F // Mode: Fast PWM top=0x00FF
; 0000 0050 // OC1A output: Non-Inverted PWM
; 0000 0051 // OC1B output: Disconnected
; 0000 0052 // Noise Canceler: Off
; 0000 0053 // Input Capture on Falling Edge
; 0000 0054 // Timer Period: 2.048 ms
; 0000 0055 // Output Pulse(s):
; 0000 0056 // OC1A Period: 2.048 ms Width: 0 us
; 0000 0057 // Timer1 Overflow Interrupt: Off
; 0000 0058 // Input Capture Interrupt: Off
; 0000 0059 // Compare A Match Interrupt: Off
; 0000 005A // Compare B Match Interrupt: Off
; 0000 005B TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 005C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 005D TCNT1H=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 005E TCNT1L=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005F ICR1H=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0060 ICR1L=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0061 OCR1AH=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0062 OCR1AL=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0063 OCR1BH=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0064 OCR1BL=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0065 
; 0000 0066 
; 0000 0067 
; 0000 0068 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0069 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 006A 
; 0000 006B // External Interrupt(s) initialization
; 0000 006C // INT0: On
; 0000 006D // INT0 Mode: Rising Edge
; 0000 006E // INT1: Off
; 0000 006F // INT2: Off
; 0000 0070 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0071 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0072 MCUCSR=(0<<ISC2);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0073 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0074 
; 0000 0075 
; 0000 0076 // ADC initialization
; 0000 0077 // ADC Clock frequency: 500.000 kHz
; 0000 0078 // ADC Voltage Reference: AREF pin
; 0000 0079 // ADC Auto Trigger Source: Free Running
; 0000 007A ADMUX=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 007B ADCSRA=0x83;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 007C 
; 0000 007D 
; 0000 007E 
; 0000 007F // Alphanumeric LCD initialization
; 0000 0080 // Connections are specified in the
; 0000 0081 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0082 // RS - PORTC Bit 0
; 0000 0083 // RD - PORTC Bit 1
; 0000 0084 // EN - PORTC Bit 2
; 0000 0085 // D4 - PORTC Bit 4
; 0000 0086 // D5 - PORTC Bit 5
; 0000 0087 // D6 - PORTC Bit 6
; 0000 0088 // D7 - PORTC Bit 7
; 0000 0089 // Characters/line: 16
; 0000 008A lcd_init(16);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 008B ADCSRA.6=1;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 008C // Global enable interrupts
; 0000 008D #asm("sei")
;PCODE: $00000065 VOL: 0
	sei
;PCODE: $00000066 VOL: 0
; 0000 008E 
; 0000 008F while (1)
;PCODE: $00000067 VOL: 0
; 0000 0090       {
; 0000 0091       ADCSRA.6=1;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0092       while (ADCSRA.4==0){}
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0093       data=ADCW;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0094       // Place your code here
; 0000 0095       volt=data*(4.88);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0096       temp=volt/10;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0097       OCR1A=5.66*temp-141.5 ;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0098 
; 0000 0099       lcd_clear ();
;PCODE: $00000088 VOL: 0
; 0000 009A       lcd_puts ("temperature:");
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 009B       itoa (temp,b);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 009C       lcd_puts (b);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 009D       lcd_gotoxy (0,1);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 009E       lcd_puts("speed:");
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 009F       itoa (rev,b);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00A0       lcd_puts (b);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00A1       lcd_puts("RPM");
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00A2       delay_ms (50);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00A3       }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00A4 }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0

	.DSEG
_0xE:
	.BYTE 0x18
