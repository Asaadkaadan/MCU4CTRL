
AVRASM ver. 2.1.30  C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm Tue Nov 26 12:31:17 2019

C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rev=R4
                 	.DEF _rev_msb=R5
                 	.DEF _i=R6
                 	.DEF _i_msb=R7
                 	.DEF _ms=R8
                 	.DEF _ms_msb=R9
                 	.DEF _temp=R10
                 	.DEF _temp_msb=R11
                 	.DEF _b=R12
                 	.DEF _b_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004d 	JMP  __RESET
000002 940c 007a 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0086 	JMP  _timer0_comp_isr
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 6574
00002b 706d
00002c 7265
00002d 7461      	.DB  0x74,0x65,0x6D,0x70,0x65,0x72,0x61,0x74
00002e 7275
00002f 3a65
000030 7300
000031 6570      	.DB  0x75,0x72,0x65,0x3A,0x0,0x73,0x70,0x65
000032 6465
000033 003a
000034 5052
000035 004d      	.DB  0x65,0x64,0x3A,0x0,0x52,0x50,0x4D,0x0
                 _0x2000003:
000036 c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1135): warning: .cseg .db misalignment - padding zero byte
000037 0001      	.DB  0x1
                 _0x2020000:
000038 4e2d
000039 4e41
00003a 4900
00003b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\USER\Desktop\dc motor\Ã„⁄… „—»⁄\Debug\List\code.asm(1138): warning: .cseg .db misalignment - padding zero byte
00003c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003d 000d      	.DW  0x0D
00003e 0160      	.DW  _0xE
00003f 0054      	.DW  _0x0*2
                 
000040 0007      	.DW  0x07
000041 016d      	.DW  _0xE+13
000042 0061      	.DW  _0x0*2+13
                 
000043 0004      	.DW  0x04
000044 0174      	.DW  _0xE+20
000045 0068      	.DW  _0x0*2+20
                 
000046 0002      	.DW  0x02
000047 0180      	.DW  __base_y_G100
000048 006c      	.DW  _0x2000003*2
                 
000049 0001      	.DW  0x01
00004a 0187      	.DW  __seed_G101
00004b 006e      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00004c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004d 94f8      	CLI
00004e 27ee      	CLR  R30
00004f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000050 e0f1      	LDI  R31,1
000051 bffb      	OUT  GICR,R31
000052 bfeb      	OUT  GICR,R30
000053 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000054 e08d      	LDI  R24,(14-2)+1
000055 e0a2      	LDI  R26,2
000056 27bb      	CLR  R27
                 __CLEAR_REG:
000057 93ed      	ST   X+,R30
000058 958a      	DEC  R24
000059 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005d 93ed      	ST   X+,R30
00005e 9701      	SBIW R24,1
00005f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000060 e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000061 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000062 9185      	LPM  R24,Z+
000063 9195      	LPM  R25,Z+
000064 9700      	SBIW R24,0
000065 f061      	BREQ __GLOBAL_INI_END
000066 91a5      	LPM  R26,Z+
000067 91b5      	LPM  R27,Z+
000068 9005      	LPM  R0,Z+
000069 9015      	LPM  R1,Z+
00006a 01bf      	MOVW R22,R30
00006b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006c 9005      	LPM  R0,Z+
00006d 920d      	ST   X+,R0
00006e 9701      	SBIW R24,1
00006f f7e1      	BRNE __GLOBAL_INI_LOOP
000070 01fb      	MOVW R30,R22
000071 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000072 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000073 bfed      	OUT  SPL,R30
000074 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000075 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000076 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000077 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000078 940c 00a9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;// Declare your global variables here
                 ;int rev,i,ms,temp;
                 ;unsigned long int volt,data;
                 ;char *b;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 000F {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00007a 93ea      	ST   -Y,R30
00007b 93fa      	ST   -Y,R31
00007c b7ef      	IN   R30,SREG
00007d 93ea      	ST   -Y,R30
                 ; 0000 0010 // Place your code here
                 ; 0000 0011 i++;
00007e 01f3      	MOVW R30,R6
00007f 9631      	ADIW R30,1
000080 013f      	MOVW R6,R30
                 ; 0000 0012 }
000081 91e9      	LD   R30,Y+
000082 bfef      	OUT  SREG,R30
000083 91f9      	LD   R31,Y+
000084 91e9      	LD   R30,Y+
000085 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0016 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000086 920a      	ST   -Y,R0
000087 921a      	ST   -Y,R1
000088 93aa      	ST   -Y,R26
000089 93ba      	ST   -Y,R27
00008a 93ea      	ST   -Y,R30
00008b 93fa      	ST   -Y,R31
00008c b7ef      	IN   R30,SREG
00008d 93ea      	ST   -Y,R30
                 ; 0000 0017 // Place your code here
                 ; 0000 0018 ms++;
00008e 01f4      	MOVW R30,R8
00008f 9631      	ADIW R30,1
000090 014f      	MOVW R8,R30
                 ; 0000 0019 if (ms==250)
000091 efea      	LDI  R30,LOW(250)
000092 e0f0      	LDI  R31,HIGH(250)
000093 15e8      	CP   R30,R8
000094 05f9      	CPC  R31,R9
000095 f451      	BRNE _0x3
                 ; 0000 001A {
                 ; 0000 001B ms=0;
000096 2488      	CLR  R8
000097 2499      	CLR  R9
                 ; 0000 001C rev=i*60;
000098 01f3      	MOVW R30,R6
000099 e3ac      	LDI  R26,LOW(60)
00009a e0b0      	LDI  R27,HIGH(60)
00009b 940e 0374 	CALL __MULW12
00009d 012f      	MOVW R4,R30
                 ; 0000 001D i=0;
00009e 2466      	CLR  R6
00009f 2477      	CLR  R7
                 ; 0000 001E }
                 ; 0000 001F 
                 ; 0000 0020 }
                 _0x3:
0000a0 91e9      	LD   R30,Y+
0000a1 bfef      	OUT  SREG,R30
0000a2 91f9      	LD   R31,Y+
0000a3 91e9      	LD   R30,Y+
0000a4 91b9      	LD   R27,Y+
0000a5 91a9      	LD   R26,Y+
0000a6 9019      	LD   R1,Y+
0000a7 9009      	LD   R0,Y+
0000a8 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0026 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0027 // Declare your local variables here
                 ; 0000 0028 
                 ; 0000 0029 // Input/Output Ports initialization
                 ; 0000 002A // Port A initialization
                 ; 0000 002B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002C DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa bbea      	OUT  0x1A,R30
                 ; 0000 002D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002E PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000ab bbeb      	OUT  0x1B,R30
                 ; 0000 002F 
                 ; 0000 0030 // Port B initialization
                 ; 0000 0031 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0032 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000ac bbe7      	OUT  0x17,R30
                 ; 0000 0033 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0034 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000ad bbe8      	OUT  0x18,R30
                 ; 0000 0035 
                 ; 0000 0036 // Port C initialization
                 ; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0038 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000ae bbe4      	OUT  0x14,R30
                 ; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003A PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000af bbe5      	OUT  0x15,R30
                 ; 0000 003B 
                 ; 0000 003C // Port D initialization
                 ; 0000 003D // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003E DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000b0 e2e0      	LDI  R30,LOW(32)
0000b1 bbe1      	OUT  0x11,R30
                 ; 0000 003F // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0040 PORTD=(0<<PORTD7) | (0<<PORTD6) | (1<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000b2 bbe2      	OUT  0x12,R30
                 ; 0000 0041 
                 ; 0000 0042 // Timer/Counter 0 initialization
                 ; 0000 0043 // Clock source: System Clock
                 ; 0000 0044 // Clock value: 125.000 kHz
                 ; 0000 0045 // Mode: CTC top=OCR0
                 ; 0000 0046 // OC0 output: Disconnected
                 ; 0000 0047 // Timer Period: 4 ms
                 ; 0000 0048 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
0000b3 e0ea      	LDI  R30,LOW(10)
0000b4 bfe3      	OUT  0x33,R30
                 ; 0000 0049 TCNT0=0x00;
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 bfe2      	OUT  0x32,R30
                 ; 0000 004A OCR0=249;
0000b7 efe9      	LDI  R30,LOW(249)
0000b8 bfec      	OUT  0x3C,R30
                 ; 0000 004B 
                 ; 0000 004C // Timer/Counter 1 initialization
                 ; 0000 004D // Clock source: System Clock
                 ; 0000 004E // Clock value: 125.000 kHz
                 ; 0000 004F // Mode: Fast PWM top=0x00FF
                 ; 0000 0050 // OC1A output: Non-Inverted PWM
                 ; 0000 0051 // OC1B output: Disconnected
                 ; 0000 0052 // Noise Canceler: Off
                 ; 0000 0053 // Input Capture on Falling Edge
                 ; 0000 0054 // Timer Period: 2.048 ms
                 ; 0000 0055 // Output Pulse(s):
                 ; 0000 0056 // OC1A Period: 2.048 ms Width: 0 us
                 ; 0000 0057 // Timer1 Overflow Interrupt: Off
                 ; 0000 0058 // Input Capture Interrupt: Off
                 ; 0000 0059 // Compare A Match Interrupt: Off
                 ; 0000 005A // Compare B Match Interrupt: Off
                 ; 0000 005B TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
0000b9 e8e1      	LDI  R30,LOW(129)
0000ba bdef      	OUT  0x2F,R30
                 ; 0000 005C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
0000bb e0ea      	LDI  R30,LOW(10)
0000bc bdee      	OUT  0x2E,R30
                 ; 0000 005D TCNT1H=0x00;
0000bd e0e0      	LDI  R30,LOW(0)
0000be bded      	OUT  0x2D,R30
                 ; 0000 005E TCNT1L=0x00;
0000bf bdec      	OUT  0x2C,R30
                 ; 0000 005F ICR1H=0x00;
0000c0 bde7      	OUT  0x27,R30
                 ; 0000 0060 ICR1L=0x00;
0000c1 bde6      	OUT  0x26,R30
                 ; 0000 0061 OCR1AH=0x00;
0000c2 bdeb      	OUT  0x2B,R30
                 ; 0000 0062 OCR1AL=0x00;
0000c3 bdea      	OUT  0x2A,R30
                 ; 0000 0063 OCR1BH=0x00;
0000c4 bde9      	OUT  0x29,R30
                 ; 0000 0064 OCR1BL=0x00;
0000c5 bde8      	OUT  0x28,R30
                 ; 0000 0065 
                 ; 0000 0066 
                 ; 0000 0067 
                 ; 0000 0068 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0069 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
0000c6 e0e2      	LDI  R30,LOW(2)
0000c7 bfe9      	OUT  0x39,R30
                 ; 0000 006A 
                 ; 0000 006B // External Interrupt(s) initialization
                 ; 0000 006C // INT0: On
                 ; 0000 006D // INT0 Mode: Rising Edge
                 ; 0000 006E // INT1: Off
                 ; 0000 006F // INT2: Off
                 ; 0000 0070 GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
0000c8 b7eb      	IN   R30,0x3B
0000c9 64e0      	ORI  R30,0x40
0000ca bfeb      	OUT  0x3B,R30
                 ; 0000 0071 MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
0000cb e0e3      	LDI  R30,LOW(3)
0000cc bfe5      	OUT  0x35,R30
                 ; 0000 0072 MCUCSR=(0<<ISC2);
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bfe4      	OUT  0x34,R30
                 ; 0000 0073 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000cf e4e0      	LDI  R30,LOW(64)
0000d0 bfea      	OUT  0x3A,R30
                 ; 0000 0074 
                 ; 0000 0075 
                 ; 0000 0076 // ADC initialization
                 ; 0000 0077 // ADC Clock frequency: 500.000 kHz
                 ; 0000 0078 // ADC Voltage Reference: AREF pin
                 ; 0000 0079 // ADC Auto Trigger Source: Free Running
                 ; 0000 007A ADMUX=0x00;
0000d1 e0e0      	LDI  R30,LOW(0)
0000d2 b9e7      	OUT  0x7,R30
                 ; 0000 007B ADCSRA=0x83;
0000d3 e8e3      	LDI  R30,LOW(131)
0000d4 b9e6      	OUT  0x6,R30
                 ; 0000 007C 
                 ; 0000 007D 
                 ; 0000 007E 
                 ; 0000 007F // Alphanumeric LCD initialization
                 ; 0000 0080 // Connections are specified in the
                 ; 0000 0081 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0082 // RS - PORTC Bit 0
                 ; 0000 0083 // RD - PORTC Bit 1
                 ; 0000 0084 // EN - PORTC Bit 2
                 ; 0000 0085 // D4 - PORTC Bit 4
                 ; 0000 0086 // D5 - PORTC Bit 5
                 ; 0000 0087 // D6 - PORTC Bit 6
                 ; 0000 0088 // D7 - PORTC Bit 7
                 ; 0000 0089 // Characters/line: 16
                 ; 0000 008A lcd_init(16);
0000d5 e1a0      	LDI  R26,LOW(16)
0000d6 d0d2      	RCALL _lcd_init
                 ; 0000 008B ADCSRA.6=1;
0000d7 9a36      	SBI  0x6,6
                 ; 0000 008C // Global enable interrupts
                 ; 0000 008D #asm("sei")
0000d8 9478      	sei
                 ; 0000 008E 
                 ; 0000 008F while (1)
                 _0x6:
                 ; 0000 0090       {
                 ; 0000 0091       ADCSRA.6=1;
0000d9 9a36      	SBI  0x6,6
                 ; 0000 0092       while (ADCSRA.4==0){}
                 _0xB:
0000da 9b34      	SBIS 0x6,4
0000db cffe      	RJMP _0xB
                 ; 0000 0093       data=ADCW;
0000dc b1e4      	IN   R30,0x4
0000dd b1f5      	IN   R31,0x4+1
0000de 2766      	CLR  R22
0000df 2777      	CLR  R23
0000e0 93e0 017c 	STS  _data,R30
0000e2 93f0 017d 	STS  _data+1,R31
0000e4 9360 017e 	STS  _data+2,R22
0000e6 9370 017f 	STS  _data+3,R23
                 ; 0000 0094       // Place your code here
                 ; 0000 0095       volt=data*(4.88);
0000e8 940e 0286 	CALL __CDF1U
                +
0000ea efa6     +LDI R26 , LOW ( 0x409C28F6 )
0000eb e2b8     +LDI R27 , HIGH ( 0x409C28F6 )
0000ec e98c     +LDI R24 , BYTE3 ( 0x409C28F6 )
0000ed e490     +LDI R25 , BYTE4 ( 0x409C28F6 )
                 	__GETD2N 0x409C28F6
0000ee 940e 030d 	CALL __MULF12
0000f0 e7a8      	LDI  R26,LOW(_volt)
0000f1 e0b1      	LDI  R27,HIGH(_volt)
0000f2 940e 024f 	CALL __CFD1U
0000f4 940e 03ac 	CALL __PUTDP1
                 ; 0000 0096       temp=volt/10;
0000f6 91a0 0178 	LDS  R26,_volt
0000f8 91b0 0179 	LDS  R27,_volt+1
0000fa 9180 017a 	LDS  R24,_volt+2
0000fc 9190 017b 	LDS  R25,_volt+3
                +
0000fe e0ea     +LDI R30 , LOW ( 0xA )
0000ff e0f0     +LDI R31 , HIGH ( 0xA )
000100 e060     +LDI R22 , BYTE3 ( 0xA )
000101 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000102 940e 0379 	CALL __DIVD21U
000104 015f      	MOVW R10,R30
                 ; 0000 0097       OCR1A=5.66*temp-141.5 ;
000105 940e 0367 	CALL __CWD1
000107 940e 0288 	CALL __CDF1
                +
000109 eba8     +LDI R26 , LOW ( 0x40B51EB8 )
00010a e1be     +LDI R27 , HIGH ( 0x40B51EB8 )
00010b eb85     +LDI R24 , BYTE3 ( 0x40B51EB8 )
00010c e490     +LDI R25 , BYTE4 ( 0x40B51EB8 )
                 	__GETD2N 0x40B51EB8
00010d 940e 030d 	CALL __MULF12
00010f 01df      	MOVW R26,R30
000110 01cb      	MOVW R24,R22
                +
000111 e0e0     +LDI R30 , LOW ( 0x430D8000 )
000112 e8f0     +LDI R31 , HIGH ( 0x430D8000 )
000113 e06d     +LDI R22 , BYTE3 ( 0x430D8000 )
000114 e473     +LDI R23 , BYTE4 ( 0x430D8000 )
                 	__GETD1N 0x430D8000
000115 940e 03b1 	CALL __SWAPD12
000117 940e 02bb 	CALL __SUBF12
000119 940e 024f 	CALL __CFD1U
00011b bdfb      	OUT  0x2A+1,R31
00011c bdea      	OUT  0x2A,R30
                 ; 0000 0098 
                 ; 0000 0099       lcd_clear ();
00011d d04c      	RCALL _lcd_clear
                 ; 0000 009A       lcd_puts ("temperature:");
                +
00011e e6a0     +LDI R26 , LOW ( _0xE + ( 0 ) )
00011f e0b1     +LDI R27 , HIGH ( _0xE + ( 0 ) )
                 	__POINTW2MN _0xE,0
000120 d077      	RCALL _lcd_puts
                 ; 0000 009B       itoa (temp,b);
000121 92ba      	ST   -Y,R11
000122 92aa      	ST   -Y,R10
000123 940e 0205 	CALL SUBOPT_0x0
                 ; 0000 009C       lcd_puts (b);
                 ; 0000 009D       lcd_gotoxy (0,1);
000125 e0e0      	LDI  R30,LOW(0)
000126 93ea      	ST   -Y,R30
000127 e0a1      	LDI  R26,LOW(1)
000128 d030      	RCALL _lcd_gotoxy
                 ; 0000 009E       lcd_puts("speed:");
                +
000129 e6ad     +LDI R26 , LOW ( _0xE + ( 13 ) )
00012a e0b1     +LDI R27 , HIGH ( _0xE + ( 13 ) )
                 	__POINTW2MN _0xE,13
00012b d06c      	RCALL _lcd_puts
                 ; 0000 009F       itoa (rev,b);
00012c 925a      	ST   -Y,R5
00012d 924a      	ST   -Y,R4
00012e 940e 0205 	CALL SUBOPT_0x0
                 ; 0000 00A0       lcd_puts (b);
                 ; 0000 00A1       lcd_puts("RPM");
                +
000130 e7a4     +LDI R26 , LOW ( _0xE + ( 20 ) )
000131 e0b1     +LDI R27 , HIGH ( _0xE + ( 20 ) )
                 	__POINTW2MN _0xE,20
000132 d065      	RCALL _lcd_puts
                 ; 0000 00A2       delay_ms (50);
000133 e3a2      	LDI  R26,LOW(50)
000134 e0b0      	LDI  R27,0
000135 940e 0218 	CALL _delay_ms
                 ; 0000 00A3       }
000137 cfa1      	RJMP _0x6
                 ; 0000 00A4 }
                 _0xF:
000138 cfff      	RJMP _0xF
                 ; .FEND
                 
                 	.DSEG
                 _0xE:
000160           	.BYTE 0x18
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000139 93aa      	ST   -Y,R26
00013a b3e5      	IN   R30,0x15
00013b 70ef      	ANDI R30,LOW(0xF)
00013c 2fae      	MOV  R26,R30
00013d 81e8      	LD   R30,Y
00013e 7fe0      	ANDI R30,LOW(0xF0)
00013f 2bea      	OR   R30,R26
000140 bbe5      	OUT  0x15,R30
                +
000141 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000142 958a     +DEC R24
000143 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000144 9aaa      	SBI  0x15,2
                +
000145 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000146 958a     +DEC R24
000147 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000148 98aa      	CBI  0x15,2
                +
000149 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00014a 958a     +DEC R24
00014b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00014c c088      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00014d 93aa      	ST   -Y,R26
00014e 81a8      	LD   R26,Y
00014f dfe9      	RCALL __lcd_write_nibble_G100
000150 81e8          ld    r30,y
000151 95e2          swap  r30
000152 83e8          st    y,r30
000153 81a8      	LD   R26,Y
000154 dfe4      	RCALL __lcd_write_nibble_G100
                +
000155 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000156 958a     +DEC R24
000157 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000158 c07c      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000159 93aa      	ST   -Y,R26
00015a 81e8      	LD   R30,Y
00015b e0f0      	LDI  R31,0
00015c 58e0      	SUBI R30,LOW(-__base_y_G100)
00015d 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00015e 81e0      	LD   R30,Z
00015f 81a9      	LDD  R26,Y+1
000160 0fae      	ADD  R26,R30
000161 dfeb      	RCALL __lcd_write_data
000162 81e9      	LDD  R30,Y+1
000163 93e0 0184 	STS  __lcd_x,R30
000165 81e8      	LD   R30,Y
000166 93e0 0185 	STS  __lcd_y,R30
000168 9622      	ADIW R28,2
000169 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00016a e0a2      	LDI  R26,LOW(2)
00016b 940e 020b 	CALL SUBOPT_0x1
00016d e0ac      	LDI  R26,LOW(12)
00016e dfde      	RCALL __lcd_write_data
00016f e0a1      	LDI  R26,LOW(1)
000170 940e 020b 	CALL SUBOPT_0x1
000172 e0e0      	LDI  R30,LOW(0)
000173 93e0 0185 	STS  __lcd_y,R30
000175 93e0 0184 	STS  __lcd_x,R30
000177 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000178 93aa      	ST   -Y,R26
000179 81a8      	LD   R26,Y
00017a 30aa      	CPI  R26,LOW(0xA)
00017b f031      	BREQ _0x2000005
00017c 91e0 0186 	LDS  R30,__lcd_maxx
00017e 91a0 0184 	LDS  R26,__lcd_x
000180 17ae      	CP   R26,R30
000181 f060      	BRLO _0x2000004
                 _0x2000005:
000182 e0e0      	LDI  R30,LOW(0)
000183 93ea      	ST   -Y,R30
000184 91a0 0185 	LDS  R26,__lcd_y
000186 5faf      	SUBI R26,-LOW(1)
000187 93a0 0185 	STS  __lcd_y,R26
000189 dfcf      	RCALL _lcd_gotoxy
00018a 81a8      	LD   R26,Y
00018b 30aa      	CPI  R26,LOW(0xA)
00018c f409      	BRNE _0x2000007
00018d c047      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
00018e 91e0 0184 	LDS  R30,__lcd_x
000190 5fef      	SUBI R30,-LOW(1)
000191 93e0 0184 	STS  __lcd_x,R30
000193 9aa8      	SBI  0x15,0
000194 81a8      	LD   R26,Y
000195 dfb7      	RCALL __lcd_write_data
000196 98a8      	CBI  0x15,0
000197 c03d      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000198 93ba      	ST   -Y,R27
000199 93aa      	ST   -Y,R26
00019a 931a      	ST   -Y,R17
                 _0x2000008:
00019b 81a9      	LDD  R26,Y+1
00019c 81ba      	LDD  R27,Y+1+1
00019d 91ed      	LD   R30,X+
00019e 83a9      	STD  Y+1,R26
00019f 83ba      	STD  Y+1+1,R27
0001a0 2f1e      	MOV  R17,R30
0001a1 30e0      	CPI  R30,0
0001a2 f019      	BREQ _0x200000A
0001a3 2fa1      	MOV  R26,R17
0001a4 dfd3      	RCALL _lcd_putchar
0001a5 cff5      	RJMP _0x2000008
                 _0x200000A:
0001a6 8118      	LDD  R17,Y+0
0001a7 9623      	ADIW R28,3
0001a8 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001a9 93aa      	ST   -Y,R26
0001aa b3e4      	IN   R30,0x14
0001ab 6fe0      	ORI  R30,LOW(0xF0)
0001ac bbe4      	OUT  0x14,R30
0001ad 9aa2      	SBI  0x14,2
0001ae 9aa0      	SBI  0x14,0
0001af 9aa1      	SBI  0x14,1
0001b0 98aa      	CBI  0x15,2
0001b1 98a8      	CBI  0x15,0
0001b2 98a9      	CBI  0x15,1
0001b3 81e8      	LD   R30,Y
0001b4 93e0 0186 	STS  __lcd_maxx,R30
0001b6 58e0      	SUBI R30,-LOW(128)
                +
0001b7 93e0 0182+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001b9 81e8      	LD   R30,Y
0001ba 54e0      	SUBI R30,-LOW(192)
                +
0001bb 93e0 0183+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001bd e1a4      	LDI  R26,LOW(20)
0001be e0b0      	LDI  R27,0
0001bf 940e 0218 	CALL _delay_ms
0001c1 940e 0211 	CALL SUBOPT_0x2
0001c3 940e 0211 	CALL SUBOPT_0x2
0001c5 940e 0211 	CALL SUBOPT_0x2
0001c7 e2a0      	LDI  R26,LOW(32)
0001c8 df70      	RCALL __lcd_write_nibble_G100
                +
0001c9 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001ca 958a     +DEC R24
0001cb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001cc e2a8      	LDI  R26,LOW(40)
0001cd df7f      	RCALL __lcd_write_data
0001ce e0a4      	LDI  R26,LOW(4)
0001cf df7d      	RCALL __lcd_write_data
0001d0 e8a5      	LDI  R26,LOW(133)
0001d1 df7b      	RCALL __lcd_write_data
0001d2 e0a6      	LDI  R26,LOW(6)
0001d3 df79      	RCALL __lcd_write_data
0001d4 df95      	RCALL _lcd_clear
                 _0x20A0001:
0001d5 9621      	ADIW R28,1
0001d6 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0001d7 93ba      	ST   -Y,R27
0001d8 93aa      	ST   -Y,R26
0001d9 91a9          ld   r26,y+
0001da 91b9          ld   r27,y+
0001db 91e9          ld   r30,y+
0001dc 91f9          ld   r31,y+
0001dd 9630          adiw r30,0
0001de f42a          brpl __itoa0
0001df 95e0          com  r30
0001e0 95f0          com  r31
0001e1 9631          adiw r30,1
0001e2 e26d          ldi  r22,'-'
0001e3 936d          st   x+,r22
                 __itoa0:
0001e4 94e8          clt
0001e5 e180          ldi  r24,low(10000)
0001e6 e297          ldi  r25,high(10000)
0001e7 d00d          rcall __itoa1
0001e8 ee88          ldi  r24,low(1000)
0001e9 e093          ldi  r25,high(1000)
0001ea d00a          rcall __itoa1
0001eb e684          ldi  r24,100
0001ec 2799          clr  r25
0001ed d007          rcall __itoa1
0001ee e08a          ldi  r24,10
0001ef d005          rcall __itoa1
0001f0 2f6e          mov  r22,r30
0001f1 d010          rcall __itoa5
0001f2 2766          clr  r22
0001f3 936c          st   x,r22
0001f4 9508          ret
                 
                 __itoa1:
0001f5 2766          clr	 r22
                 __itoa2:
0001f6 17e8          cp   r30,r24
0001f7 07f9          cpc  r31,r25
0001f8 f020          brlo __itoa3
0001f9 9563          inc  r22
0001fa 1be8          sub  r30,r24
0001fb 0bf9          sbc  r31,r25
0001fc f7c9          brne __itoa2
                 __itoa3:
0001fd 2366          tst  r22
0001fe f411          brne __itoa4
0001ff f016          brts __itoa5
000200 9508          ret
                 __itoa4:
000201 9468          set
                 __itoa5:
000202 5d60          subi r22,-0x30
000203 936d          st   x+,r22
000204 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _volt:
000178           	.BYTE 0x4
                 _data:
00017c           	.BYTE 0x4
                 __base_y_G100:
000180           	.BYTE 0x4
                 __lcd_x:
000184           	.BYTE 0x1
                 __lcd_y:
000185           	.BYTE 0x1
                 __lcd_maxx:
000186           	.BYTE 0x1
                 __seed_G101:
000187           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000205 01d6      	MOVW R26,R12
000206 940e 01d7 	CALL _itoa
000208 01d6      	MOVW R26,R12
000209 940c 0198 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00020b 940e 014d 	CALL __lcd_write_data
00020d e0a3      	LDI  R26,LOW(3)
00020e e0b0      	LDI  R27,0
00020f 940c 0218 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000211 e3a0      	LDI  R26,LOW(48)
000212 940e 0139 	CALL __lcd_write_nibble_G100
                +
000214 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000215 958a     +DEC R24
000216 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000217 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000218 9610      	adiw r26,0
000219 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00021a ef8a     +LDI R24 , LOW ( 0xFA )
00021b e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00021c 9701     +SBIW R24 , 1
00021d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00021e 95a8      	wdr
00021f 9711      	sbiw r26,1
000220 f7c9      	brne __delay_ms0
                 __delay_ms1:
000221 9508      	ret
                 
                 __ROUND_REPACK:
000222 2355      	TST  R21
000223 f442      	BRPL __REPACK
000224 3850      	CPI  R21,0x80
000225 f411      	BRNE __ROUND_REPACK0
000226 ffe0      	SBRS R30,0
000227 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000228 9631      	ADIW R30,1
000229 1f69      	ADC  R22,R25
00022a 1f79      	ADC  R23,R25
00022b f06b      	BRVS __REPACK1
                 
                 __REPACK:
00022c e850      	LDI  R21,0x80
00022d 2757      	EOR  R21,R23
00022e f411      	BRNE __REPACK0
00022f 935f      	PUSH R21
000230 c0ca      	RJMP __ZERORES
                 __REPACK0:
000231 3f5f      	CPI  R21,0xFF
000232 f031      	BREQ __REPACK1
000233 0f66      	LSL  R22
000234 0c00      	LSL  R0
000235 9557      	ROR  R21
000236 9567      	ROR  R22
000237 2f75      	MOV  R23,R21
000238 9508      	RET
                 __REPACK1:
000239 935f      	PUSH R21
00023a 2000      	TST  R0
00023b f00a      	BRMI __REPACK2
00023c c0ca      	RJMP __MAXRES
                 __REPACK2:
00023d c0c3      	RJMP __MINRES
                 
                 __UNPACK:
00023e e850      	LDI  R21,0x80
00023f 2e19      	MOV  R1,R25
000240 2215      	AND  R1,R21
000241 0f88      	LSL  R24
000242 1f99      	ROL  R25
000243 2795      	EOR  R25,R21
000244 0f55      	LSL  R21
000245 9587      	ROR  R24
                 
                 __UNPACK1:
000246 e850      	LDI  R21,0x80
000247 2e07      	MOV  R0,R23
000248 2205      	AND  R0,R21
000249 0f66      	LSL  R22
00024a 1f77      	ROL  R23
00024b 2775      	EOR  R23,R21
00024c 0f55      	LSL  R21
00024d 9567      	ROR  R22
00024e 9508      	RET
                 
                 __CFD1U:
00024f 9468      	SET
000250 c001      	RJMP __CFD1U0
                 __CFD1:
000251 94e8      	CLT
                 __CFD1U0:
000252 935f      	PUSH R21
000253 dff2      	RCALL __UNPACK1
000254 3870      	CPI  R23,0x80
000255 f018      	BRLO __CFD10
000256 3f7f      	CPI  R23,0xFF
000257 f408      	BRCC __CFD10
000258 c0a2      	RJMP __ZERORES
                 __CFD10:
000259 e156      	LDI  R21,22
00025a 1b57      	SUB  R21,R23
00025b f4aa      	BRPL __CFD11
00025c 9551      	NEG  R21
00025d 3058      	CPI  R21,8
00025e f40e      	BRTC __CFD19
00025f 3059      	CPI  R21,9
                 __CFD19:
000260 f030      	BRLO __CFD17
000261 efef      	SER  R30
000262 efff      	SER  R31
000263 ef6f      	SER  R22
000264 e77f      	LDI  R23,0x7F
000265 f977      	BLD  R23,7
000266 c01a      	RJMP __CFD15
                 __CFD17:
000267 2777      	CLR  R23
000268 2355      	TST  R21
000269 f0b9      	BREQ __CFD15
                 __CFD18:
00026a 0fee      	LSL  R30
00026b 1fff      	ROL  R31
00026c 1f66      	ROL  R22
00026d 1f77      	ROL  R23
00026e 955a      	DEC  R21
00026f f7d1      	BRNE __CFD18
000270 c010      	RJMP __CFD15
                 __CFD11:
000271 2777      	CLR  R23
                 __CFD12:
000272 3058      	CPI  R21,8
000273 f028      	BRLO __CFD13
000274 2fef      	MOV  R30,R31
000275 2ff6      	MOV  R31,R22
000276 2f67      	MOV  R22,R23
000277 5058      	SUBI R21,8
000278 cff9      	RJMP __CFD12
                 __CFD13:
000279 2355      	TST  R21
00027a f031      	BREQ __CFD15
                 __CFD14:
00027b 9576      	LSR  R23
00027c 9567      	ROR  R22
00027d 95f7      	ROR  R31
00027e 95e7      	ROR  R30
00027f 955a      	DEC  R21
000280 f7d1      	BRNE __CFD14
                 __CFD15:
000281 2000      	TST  R0
000282 f40a      	BRPL __CFD16
000283 d0db      	RCALL __ANEGD1
                 __CFD16:
000284 915f      	POP  R21
000285 9508      	RET
                 
                 __CDF1U:
000286 9468      	SET
000287 c001      	RJMP __CDF1U0
                 __CDF1:
000288 94e8      	CLT
                 __CDF1U0:
000289 9730      	SBIW R30,0
00028a 4060      	SBCI R22,0
00028b 4070      	SBCI R23,0
00028c f0b1      	BREQ __CDF10
00028d 2400      	CLR  R0
00028e f026      	BRTS __CDF11
00028f 2377      	TST  R23
000290 f412      	BRPL __CDF11
000291 9400      	COM  R0
000292 d0cc      	RCALL __ANEGD1
                 __CDF11:
000293 2e17      	MOV  R1,R23
000294 e17e      	LDI  R23,30
000295 2011      	TST  R1
                 __CDF12:
000296 f032      	BRMI __CDF13
000297 957a      	DEC  R23
000298 0fee      	LSL  R30
000299 1fff      	ROL  R31
00029a 1f66      	ROL  R22
00029b 1c11      	ROL  R1
00029c cff9      	RJMP __CDF12
                 __CDF13:
00029d 2fef      	MOV  R30,R31
00029e 2ff6      	MOV  R31,R22
00029f 2d61      	MOV  R22,R1
0002a0 935f      	PUSH R21
0002a1 df8a      	RCALL __REPACK
0002a2 915f      	POP  R21
                 __CDF10:
0002a3 9508      	RET
                 
                 __SWAPACC:
0002a4 934f      	PUSH R20
0002a5 01af      	MOVW R20,R30
0002a6 01fd      	MOVW R30,R26
0002a7 01da      	MOVW R26,R20
0002a8 01ab      	MOVW R20,R22
0002a9 01bc      	MOVW R22,R24
0002aa 01ca      	MOVW R24,R20
0002ab 2d40      	MOV  R20,R0
0002ac 2c01      	MOV  R0,R1
0002ad 2e14      	MOV  R1,R20
0002ae 914f      	POP  R20
0002af 9508      	RET
                 
                 __UADD12:
0002b0 0fea      	ADD  R30,R26
0002b1 1ffb      	ADC  R31,R27
0002b2 1f68      	ADC  R22,R24
0002b3 9508      	RET
                 
                 __NEGMAN1:
0002b4 95e0      	COM  R30
0002b5 95f0      	COM  R31
0002b6 9560      	COM  R22
0002b7 5fef      	SUBI R30,-1
0002b8 4fff      	SBCI R31,-1
0002b9 4f6f      	SBCI R22,-1
0002ba 9508      	RET
                 
                 __SUBF12:
0002bb 935f      	PUSH R21
0002bc df81      	RCALL __UNPACK
0002bd 3890      	CPI  R25,0x80
0002be f149      	BREQ __ADDF129
0002bf e850      	LDI  R21,0x80
0002c0 2615      	EOR  R1,R21
                 
                 __ADDF120:
0002c1 3870      	CPI  R23,0x80
0002c2 f121      	BREQ __ADDF128
                 __ADDF121:
0002c3 2f57      	MOV  R21,R23
0002c4 1b59      	SUB  R21,R25
0002c5 f12b      	BRVS __ADDF1211
0002c6 f412      	BRPL __ADDF122
0002c7 dfdc      	RCALL __SWAPACC
0002c8 cffa      	RJMP __ADDF121
                 __ADDF122:
0002c9 3158      	CPI  R21,24
0002ca f018      	BRLO __ADDF123
0002cb 27aa      	CLR  R26
0002cc 27bb      	CLR  R27
0002cd 2788      	CLR  R24
                 __ADDF123:
0002ce 3058      	CPI  R21,8
0002cf f028      	BRLO __ADDF124
0002d0 2fab      	MOV  R26,R27
0002d1 2fb8      	MOV  R27,R24
0002d2 2788      	CLR  R24
0002d3 5058      	SUBI R21,8
0002d4 cff9      	RJMP __ADDF123
                 __ADDF124:
0002d5 2355      	TST  R21
0002d6 f029      	BREQ __ADDF126
                 __ADDF125:
0002d7 9586      	LSR  R24
0002d8 95b7      	ROR  R27
0002d9 95a7      	ROR  R26
0002da 955a      	DEC  R21
0002db f7d9      	BRNE __ADDF125
                 __ADDF126:
0002dc 2d50      	MOV  R21,R0
0002dd 2551      	EOR  R21,R1
0002de f072      	BRMI __ADDF127
0002df dfd0      	RCALL __UADD12
0002e0 f438      	BRCC __ADDF129
0002e1 9567      	ROR  R22
0002e2 95f7      	ROR  R31
0002e3 95e7      	ROR  R30
0002e4 9573      	INC  R23
0002e5 f413      	BRVC __ADDF129
0002e6 c020      	RJMP __MAXRES
                 __ADDF128:
0002e7 dfbc      	RCALL __SWAPACC
                 __ADDF129:
0002e8 df43      	RCALL __REPACK
0002e9 915f      	POP  R21
0002ea 9508      	RET
                 __ADDF1211:
0002eb f7d8      	BRCC __ADDF128
0002ec cffb      	RJMP __ADDF129
                 __ADDF127:
0002ed 1bea      	SUB  R30,R26
0002ee 0bfb      	SBC  R31,R27
0002ef 0b68      	SBC  R22,R24
0002f0 f051      	BREQ __ZERORES
0002f1 f410      	BRCC __ADDF1210
0002f2 9400      	COM  R0
0002f3 dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
0002f4 2366      	TST  R22
0002f5 f392      	BRMI __ADDF129
0002f6 0fee      	LSL  R30
0002f7 1fff      	ROL  R31
0002f8 1f66      	ROL  R22
0002f9 957a      	DEC  R23
0002fa f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0002fb 27ee      	CLR  R30
0002fc 27ff      	CLR  R31
0002fd 2766      	CLR  R22
0002fe 2777      	CLR  R23
0002ff 915f      	POP  R21
000300 9508      	RET
                 
                 __MINRES:
000301 efef      	SER  R30
000302 efff      	SER  R31
000303 e76f      	LDI  R22,0x7F
000304 ef7f      	SER  R23
000305 915f      	POP  R21
000306 9508      	RET
                 
                 __MAXRES:
000307 efef      	SER  R30
000308 efff      	SER  R31
000309 e76f      	LDI  R22,0x7F
00030a e77f      	LDI  R23,0x7F
00030b 915f      	POP  R21
00030c 9508      	RET
                 
                 __MULF12:
00030d 935f      	PUSH R21
00030e df2f      	RCALL __UNPACK
00030f 3870      	CPI  R23,0x80
000310 f351      	BREQ __ZERORES
000311 3890      	CPI  R25,0x80
000312 f341      	BREQ __ZERORES
000313 2401      	EOR  R0,R1
000314 9408      	SEC
000315 1f79      	ADC  R23,R25
000316 f423      	BRVC __MULF124
000317 f31c      	BRLT __ZERORES
                 __MULF125:
000318 2000      	TST  R0
000319 f33a      	BRMI __MINRES
00031a cfec      	RJMP __MAXRES
                 __MULF124:
00031b 920f      	PUSH R0
00031c 931f      	PUSH R17
00031d 932f      	PUSH R18
00031e 933f      	PUSH R19
00031f 934f      	PUSH R20
000320 2711      	CLR  R17
000321 2722      	CLR  R18
000322 2799      	CLR  R25
000323 9f68      	MUL  R22,R24
000324 01a0      	MOVW R20,R0
000325 9f8f      	MUL  R24,R31
000326 2d30      	MOV  R19,R0
000327 0d41      	ADD  R20,R1
000328 1f59      	ADC  R21,R25
000329 9f6b      	MUL  R22,R27
00032a 0d30      	ADD  R19,R0
00032b 1d41      	ADC  R20,R1
00032c 1f59      	ADC  R21,R25
00032d 9f8e      	MUL  R24,R30
00032e d027      	RCALL __MULF126
00032f 9fbf      	MUL  R27,R31
000330 d025      	RCALL __MULF126
000331 9f6a      	MUL  R22,R26
000332 d023      	RCALL __MULF126
000333 9fbe      	MUL  R27,R30
000334 d01d      	RCALL __MULF127
000335 9faf      	MUL  R26,R31
000336 d01b      	RCALL __MULF127
000337 9fae      	MUL  R26,R30
000338 0d11      	ADD  R17,R1
000339 1f29      	ADC  R18,R25
00033a 1f39      	ADC  R19,R25
00033b 1f49      	ADC  R20,R25
00033c 1f59      	ADC  R21,R25
00033d 2fe3      	MOV  R30,R19
00033e 2ff4      	MOV  R31,R20
00033f 2f65      	MOV  R22,R21
000340 2f52      	MOV  R21,R18
000341 914f      	POP  R20
000342 913f      	POP  R19
000343 912f      	POP  R18
000344 911f      	POP  R17
000345 900f      	POP  R0
000346 2366      	TST  R22
000347 f02a      	BRMI __MULF122
000348 0f55      	LSL  R21
000349 1fee      	ROL  R30
00034a 1fff      	ROL  R31
00034b 1f66      	ROL  R22
00034c c002      	RJMP __MULF123
                 __MULF122:
00034d 9573      	INC  R23
00034e f24b      	BRVS __MULF125
                 __MULF123:
00034f ded2      	RCALL __ROUND_REPACK
000350 915f      	POP  R21
000351 9508      	RET
                 
                 __MULF127:
000352 0d10      	ADD  R17,R0
000353 1d21      	ADC  R18,R1
000354 1f39      	ADC  R19,R25
000355 c002      	RJMP __MULF128
                 __MULF126:
000356 0d20      	ADD  R18,R0
000357 1d31      	ADC  R19,R1
                 __MULF128:
000358 1f49      	ADC  R20,R25
000359 1f59      	ADC  R21,R25
00035a 9508      	RET
                 
                 __ANEGW1:
00035b 95f1      	NEG  R31
00035c 95e1      	NEG  R30
00035d 40f0      	SBCI R31,0
00035e 9508      	RET
                 
                 __ANEGD1:
00035f 95f0      	COM  R31
000360 9560      	COM  R22
000361 9570      	COM  R23
000362 95e1      	NEG  R30
000363 4fff      	SBCI R31,-1
000364 4f6f      	SBCI R22,-1
000365 4f7f      	SBCI R23,-1
000366 9508      	RET
                 
                 __CWD1:
000367 2f6f      	MOV  R22,R31
000368 0f66      	ADD  R22,R22
000369 0b66      	SBC  R22,R22
00036a 2f76      	MOV  R23,R22
00036b 9508      	RET
                 
                 __MULW12U:
00036c 9ffa      	MUL  R31,R26
00036d 2df0      	MOV  R31,R0
00036e 9feb      	MUL  R30,R27
00036f 0df0      	ADD  R31,R0
000370 9fea      	MUL  R30,R26
000371 2de0      	MOV  R30,R0
000372 0df1      	ADD  R31,R1
000373 9508      	RET
                 
                 __MULW12:
000374 d029      	RCALL __CHKSIGNW
000375 dff6      	RCALL __MULW12U
000376 f40e      	BRTC __MULW121
000377 dfe3      	RCALL __ANEGW1
                 __MULW121:
000378 9508      	RET
                 
                 __DIVD21U:
000379 933f      	PUSH R19
00037a 934f      	PUSH R20
00037b 935f      	PUSH R21
00037c 2400      	CLR  R0
00037d 2411      	CLR  R1
00037e 2744      	CLR  R20
00037f 2755      	CLR  R21
000380 e230      	LDI  R19,32
                 __DIVD21U1:
000381 0faa      	LSL  R26
000382 1fbb      	ROL  R27
000383 1f88      	ROL  R24
000384 1f99      	ROL  R25
000385 1c00      	ROL  R0
000386 1c11      	ROL  R1
000387 1f44      	ROL  R20
000388 1f55      	ROL  R21
000389 1a0e      	SUB  R0,R30
00038a 0a1f      	SBC  R1,R31
00038b 0b46      	SBC  R20,R22
00038c 0b57      	SBC  R21,R23
00038d f428      	BRCC __DIVD21U2
00038e 0e0e      	ADD  R0,R30
00038f 1e1f      	ADC  R1,R31
000390 1f46      	ADC  R20,R22
000391 1f57      	ADC  R21,R23
000392 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000393 60a1      	SBR  R26,1
                 __DIVD21U3:
000394 953a      	DEC  R19
000395 f759      	BRNE __DIVD21U1
000396 01fd      	MOVW R30,R26
000397 01bc      	MOVW R22,R24
000398 01d0      	MOVW R26,R0
000399 01ca      	MOVW R24,R20
00039a 915f      	POP  R21
00039b 914f      	POP  R20
00039c 913f      	POP  R19
00039d 9508      	RET
                 
                 __CHKSIGNW:
00039e 94e8      	CLT
00039f fff7      	SBRS R31,7
0003a0 c002      	RJMP __CHKSW1
0003a1 dfb9      	RCALL __ANEGW1
0003a2 9468      	SET
                 __CHKSW1:
0003a3 ffb7      	SBRS R27,7
0003a4 c006      	RJMP __CHKSW2
0003a5 95a0      	COM  R26
0003a6 95b0      	COM  R27
0003a7 9611      	ADIW R26,1
0003a8 f800      	BLD  R0,0
0003a9 9403      	INC  R0
0003aa fa00      	BST  R0,0
                 __CHKSW2:
0003ab 9508      	RET
                 
                 __PUTDP1:
0003ac 93ed      	ST   X+,R30
0003ad 93fd      	ST   X+,R31
0003ae 936d      	ST   X+,R22
0003af 937c      	ST   X,R23
0003b0 9508      	RET
                 
                 __SWAPD12:
0003b1 2e18      	MOV  R1,R24
0003b2 2f86      	MOV  R24,R22
0003b3 2d61      	MOV  R22,R1
0003b4 2e19      	MOV  R1,R25
0003b5 2f97      	MOV  R25,R23
0003b6 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0003b7 2e1b      	MOV  R1,R27
0003b8 2fbf      	MOV  R27,R31
0003b9 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0003ba 2e1a      	MOV  R1,R26
0003bb 2fae      	MOV  R26,R30
0003bc 2de1      	MOV  R30,R1
0003bd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  37 r1 :  32 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   4 r7 :   1 
r8 :   4 r9 :   2 r10:   2 r11:   1 r12:   2 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   9 r18:   7 r19:  12 r20:  23 r21:  63 r22:  63 r23:  43 
r24:  49 r25:  33 r26:  79 r27:  35 r28:   4 r29:   1 r30: 173 r31:  57 
x  :  11 y  :  59 z  :   8 
Registers used: 29 out of 35 (82.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  20 add   :  11 
adiw  :  10 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  14 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   1 brmi  :   6 brne  :  21 brpl  :   6 brsh  :   0 brtc  :   2 
brts  :   2 brvc  :   3 brvs  :   3 bset  :   0 bst   :   1 call  :  24 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  29 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  12 
cp    :   3 cpc   :   2 cpi   :  16 cpse  :   0 dec   :  13 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   4 jmp   :  24 ld    :  27 ldd   :   5 ldi   : 101 
lds   :   8 lpm   :   7 lsl   :  11 lsr   :   2 mov   :  42 movw  :  25 
mul   :  12 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   2 out   :  40 pop   :  16 push  :  15 rcall :  45 ret   :  31 
reti  :   2 rjmp  :  30 rol   :  20 ror   :  12 sbc   :   7 sbci  :   9 
sbi   :   7 sbic  :   0 sbis  :   1 sbiw  :   6 sbr   :   1 sbrc  :   0 
sbrs  :   3 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  37 std   :   2 sts   :  13 sub   :   5 subi  :   9 swap  :   1 
tst   :  12 wdr   :   1 
Instructions used: 73 out of 116 (62.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00077c   1846     70   1916   16384  11.7%
[.dseg] 0x000060 0x00018b      0     43     43    1024   4.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
