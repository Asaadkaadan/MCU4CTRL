
AVRASM ver. 2.1.30  C:\Users\Riham\Desktop\Ô\List\Ô.asm Tue Jan 07 15:42:58 2020

C:\Users\Riham\Desktop\Ô\List\Ô.asm(1072): warning: Register r4 already defined by the .DEF directive
C:\Users\Riham\Desktop\Ô\List\Ô.asm(1073): warning: Register r6 already defined by the .DEF directive
C:\Users\Riham\Desktop\Ô\List\Ô.asm(1074): warning: Register r8 already defined by the .DEF directive
C:\Users\Riham\Desktop\Ô\List\Ô.asm(1075): warning: Register r10 already defined by the .DEF directive
C:\Users\Riham\Desktop\Ô\List\Ô.asm(1076): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _a=R4
                 	.DEF _v=R6
                 	.DEF _x=R8
                 	.DEF _se=R10
                 	.DEF _s=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004d 	JMP  __RESET
000002 940c 007d 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0089 	JMP  _timer2_comp
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 6873
00002b 6861
00002c 2664
00002d 6f6a      	.DB  0x73,0x68,0x61,0x68,0x64,0x26,0x6A,0x6F
00002e 6475
00002f 7300
000030 6570
000031 6465      	.DB  0x75,0x64,0x0,0x73,0x70,0x65,0x65,0x64
000032 003d
000033 6f76
000034 746c
000035 003d      	.DB  0x3D,0x0,0x76,0x6F,0x6C,0x74,0x3D,0x0
                 _0x2000003:
000036 c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\Riham\Desktop\Ô\List\Ô.asm(1114): warning: .cseg .db misalignment - padding zero byte
000037 0001      	.DB  0x1
                 _0x2020000:
000038 4e2d
000039 4e41
00003a 4900
00003b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Riham\Desktop\Ô\List\Ô.asm(1117): warning: .cseg .db misalignment - padding zero byte
00003c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003d 000b      	.DW  0x0B
00003e 0160      	.DW  _0x4
00003f 0054      	.DW  _0x0*2
                 
000040 0007      	.DW  0x07
000041 016b      	.DW  _0x4+11
000042 005f      	.DW  _0x0*2+11
                 
000043 0006      	.DW  0x06
000044 0172      	.DW  _0x4+18
000045 0066      	.DW  _0x0*2+18
                 
000046 0002      	.DW  0x02
000047 017a      	.DW  __base_y_G100
000048 006c      	.DW  _0x2000003*2
                 
000049 0001      	.DW  0x01
00004a 0181      	.DW  __seed_G101
00004b 006e      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00004c 0000      	.DW  0
                 
                 __RESET:
00004d 94f8      	CLI
00004e 27ee      	CLR  R30
00004f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000050 e0f1      	LDI  R31,1
000051 bffb      	OUT  GICR,R31
000052 bfeb      	OUT  GICR,R30
000053 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000054 e1f8      	LDI  R31,0x18
000055 bdf1      	OUT  WDTCR,R31
000056 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000057 e08d      	LDI  R24,(14-2)+1
000058 e0a2      	LDI  R26,2
000059 27bb      	CLR  R27
                 __CLEAR_REG:
00005a 93ed      	ST   X+,R30
00005b 958a      	DEC  R24
00005c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005e e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000060 93ed      	ST   X+,R30
000061 9701      	SBIW R24,1
000062 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000063 e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000064 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000065 9185      	LPM  R24,Z+
000066 9195      	LPM  R25,Z+
000067 9700      	SBIW R24,0
000068 f061      	BREQ __GLOBAL_INI_END
000069 91a5      	LPM  R26,Z+
00006a 91b5      	LPM  R27,Z+
00006b 9005      	LPM  R0,Z+
00006c 9015      	LPM  R1,Z+
00006d 01bf      	MOVW R22,R30
00006e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006f 9005      	LPM  R0,Z+
000070 920d      	ST   X+,R0
000071 9701      	SBIW R24,1
000072 f7e1      	BRNE __GLOBAL_INI_LOOP
000073 01fb      	MOVW R30,R22
000074 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000075 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000076 bfed      	OUT  SPL,R30
000077 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000078 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000079 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007a e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007b 940c 00a7 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;
                 ;unsigned int a,v,x,se,s,error,pout,iout,integral,output;
                 ;unsigned char *b;
                 ;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 000F {
                 
                 	.CSEG
                 _ext_int0_isr:
00007d 93ea      	ST   -Y,R30
00007e 93fa      	ST   -Y,R31
00007f b7ef      	IN   R30,SREG
000080 93ea      	ST   -Y,R30
                 ; 0000 0010 x++;
000081 01f4      	MOVW R30,R8
000082 9631      	ADIW R30,1
000083 014f      	MOVW R8,R30
                 ; 0000 0011 }
000084 91e9      	LD   R30,Y+
000085 bfef      	OUT  SREG,R30
000086 91f9      	LD   R31,Y+
000087 91e9      	LD   R30,Y+
000088 9518      	RETI
                 ;
                 ;interrupt[TIM2_COMP]void timer2_comp(void)
                 ; 0000 0014 {
                 _timer2_comp:
000089 920a      	ST   -Y,R0
00008a 921a      	ST   -Y,R1
00008b 93aa      	ST   -Y,R26
00008c 93ba      	ST   -Y,R27
00008d 93ea      	ST   -Y,R30
00008e 93fa      	ST   -Y,R31
00008f b7ef      	IN   R30,SREG
000090 93ea      	ST   -Y,R30
                 ; 0000 0015   if(x==50)
000091 e3e2      	LDI  R30,LOW(50)
000092 e0f0      	LDI  R31,HIGH(50)
000093 15e8      	CP   R30,R8
000094 05f9      	CPC  R31,R9
000095 f441      	BRNE _0x3
                 ; 0000 0016   {
                 ; 0000 0017 se=x*300;
000096 01f4      	MOVW R30,R8
000097 e2ac      	LDI  R26,LOW(300)
000098 e0b1      	LDI  R27,HIGH(300)
000099 940e 020a 	CALL __MULW12U
00009b 015f      	MOVW R10,R30
                 ; 0000 0018 x=0;}
00009c 2488      	CLR  R8
00009d 2499      	CLR  R9
                 ; 0000 0019 // error=s-se;
                 ; 0000 001A  // pout=0.5*error;
                 ; 0000 001B   //integral+=error;
                 ; 0000 001C   //iout=0.1*integral;
                 ; 0000 001D  //output=pout+iout;
                 ; 0000 001E   //if(output>255)
                 ; 0000 001F   //output=255;
                 ; 0000 0020   //if(output<0)
                 ; 0000 0021   //output=0;
                 ; 0000 0022   //OCR2=output;
                 ; 0000 0023 }
                 _0x3:
00009e 91e9      	LD   R30,Y+
00009f bfef      	OUT  SREG,R30
0000a0 91f9      	LD   R31,Y+
0000a1 91e9      	LD   R30,Y+
0000a2 91b9      	LD   R27,Y+
0000a3 91a9      	LD   R26,Y+
0000a4 9019      	LD   R1,Y+
0000a5 9009      	LD   R0,Y+
0000a6 9518      	RETI
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0027 {
                 _main:
                 ; 0000 0028 PORTA=0x00;
0000a7 e0e0      	LDI  R30,LOW(0)
0000a8 bbeb      	OUT  0x1B,R30
                 ; 0000 0029 DDRA=0x00;
0000a9 bbea      	OUT  0x1A,R30
                 ; 0000 002A 
                 ; 0000 002B PORTB=0x00;
0000aa bbe8      	OUT  0x18,R30
                 ; 0000 002C DDRB=0x08;
0000ab e0e8      	LDI  R30,LOW(8)
0000ac bbe7      	OUT  0x17,R30
                 ; 0000 002D 
                 ; 0000 002E 
                 ; 0000 002F PORTC=0x00;
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bbe5      	OUT  0x15,R30
                 ; 0000 0030 DDRC=0x00;
0000af bbe4      	OUT  0x14,R30
                 ; 0000 0031 
                 ; 0000 0032 PORTD=0x00;
0000b0 bbe2      	OUT  0x12,R30
                 ; 0000 0033 DDRD=0x04;
0000b1 e0e4      	LDI  R30,LOW(4)
0000b2 bbe1      	OUT  0x11,R30
                 ; 0000 0034 
                 ; 0000 0035 TCCR2=0x0B;
0000b3 e0eb      	LDI  R30,LOW(11)
0000b4 bde5      	OUT  0x25,R30
                 ; 0000 0036 TCNT2=0x00;
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 bde4      	OUT  0x24,R30
                 ; 0000 0037 OCR0=124;
0000b7 e7ec      	LDI  R30,LOW(124)
0000b8 bfec      	OUT  0x3C,R30
                 ; 0000 0038 
                 ; 0000 0039 ASSR=0x00;
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba bde2      	OUT  0x22,R30
                 ; 0000 003A TCCR0=0x6D;
0000bb e6ed      	LDI  R30,LOW(109)
0000bc bfe3      	OUT  0x33,R30
                 ; 0000 003B TCNT0=0x00;
0000bd e0e0      	LDI  R30,LOW(0)
0000be bfe2      	OUT  0x32,R30
                 ; 0000 003C OCR2=0x00;
0000bf bde3      	OUT  0x23,R30
                 ; 0000 003D 
                 ; 0000 003E GICR|=0x40;
0000c0 b7eb      	IN   R30,0x3B
0000c1 64e0      	ORI  R30,0x40
0000c2 bfeb      	OUT  0x3B,R30
                 ; 0000 003F MCUCR=0x02;
0000c3 e0e2      	LDI  R30,LOW(2)
0000c4 bfe5      	OUT  0x35,R30
                 ; 0000 0040 MCUCSR=0x00;
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 bfe4      	OUT  0x34,R30
                 ; 0000 0041 GIFR=0x40;
0000c7 e4e0      	LDI  R30,LOW(64)
0000c8 bfea      	OUT  0x3A,R30
                 ; 0000 0042 
                 ; 0000 0043 TIMSK=0x80;
0000c9 e8e0      	LDI  R30,LOW(128)
0000ca bfe9      	OUT  0x39,R30
                 ; 0000 0044 
                 ; 0000 0045 ADCSRA=0x86;
0000cb e8e6      	LDI  R30,LOW(134)
0000cc b9e6      	OUT  0x6,R30
                 ; 0000 0046 
                 ; 0000 0047 lcd_init(16);
0000cd e1a0      	LDI  R26,LOW(16)
0000ce d0b1      	RCALL _lcd_init
                 ; 0000 0048 
                 ; 0000 0049 
                 ; 0000 004A #asm("sei")
0000cf 9478      	sei
                 ; 0000 004B 
                 ; 0000 004C lcd_puts("shahd&joud");
                +
0000d0 e6a0     +LDI R26 , LOW ( _0x4 + ( 0 ) )
0000d1 e0b1     +LDI R27 , HIGH ( _0x4 + ( 0 ) )
                 	__POINTW2MN _0x4,0
0000d2 940e 01db 	CALL SUBOPT_0x0
                 ; 0000 004D delay_ms(50);
                 ; 0000 004E  lcd_clear();
0000d4 d06c      	RCALL _lcd_clear
                 ; 0000 004F while (1)
                 _0x5:
                 ; 0000 0050       {
                 ; 0000 0051       // Place your code here
                 ; 0000 0052       ADCSRA.6=1;
0000d5 9a36      	SBI  0x6,6
                 ; 0000 0053       while(ADCSRA.4==0){}
                 _0xA:
0000d6 9b34      	SBIS 0x6,4
0000d7 cffe      	RJMP _0xA
                 ; 0000 0054       a=ADCW;
                +
0000d8 b044     +IN R4 , 4
0000d9 b055     +IN R5 , 4 + 1
                 	__INWR 4,5,4
                 ; 0000 0055       s=(255*a)/1023;
0000da 01f2      	MOVW R30,R4
0000db efaf      	LDI  R26,LOW(255)
0000dc e0b0      	LDI  R27,HIGH(255)
0000dd 940e 01e1 	CALL SUBOPT_0x1
0000df 016f      	MOVW R12,R30
                 ; 0000 0056 
                 ; 0000 0057       lcd_puts("speed=");
                +
0000e0 e6ab     +LDI R26 , LOW ( _0x4 + ( 11 ) )
0000e1 e0b1     +LDI R27 , HIGH ( _0x4 + ( 11 ) )
                 	__POINTW2MN _0x4,11
0000e2 d08c      	RCALL _lcd_puts
                 ; 0000 0058       lcd_gotoxy(7,0);
0000e3 e0e7      	LDI  R30,LOW(7)
0000e4 93ea      	ST   -Y,R30
0000e5 e0a0      	LDI  R26,LOW(0)
0000e6 d049      	RCALL _lcd_gotoxy
                 ; 0000 0059       itoa(s,b);
0000e7 92da      	ST   -Y,R13
0000e8 92ca      	ST   -Y,R12
0000e9 940e 01e9 	CALL SUBOPT_0x2
0000eb 940e 01ad 	CALL _itoa
                 ; 0000 005A       lcd_puts(b);
0000ed 940e 01e9 	CALL SUBOPT_0x2
0000ef 940e 01db 	CALL SUBOPT_0x0
                 ; 0000 005B       delay_ms(50);
                 ; 0000 005C       v=(a*9)/1023;
0000f1 01f2      	MOVW R30,R4
0000f2 e0a9      	LDI  R26,LOW(9)
0000f3 e0b0      	LDI  R27,HIGH(9)
0000f4 940e 01e1 	CALL SUBOPT_0x1
0000f6 013f      	MOVW R6,R30
                 ; 0000 005D       lcd_gotoxy(0,1);
0000f7 e0e0      	LDI  R30,LOW(0)
0000f8 93ea      	ST   -Y,R30
0000f9 e0a1      	LDI  R26,LOW(1)
0000fa d035      	RCALL _lcd_gotoxy
                 ; 0000 005E       lcd_puts("volt=");
                +
0000fb e7a2     +LDI R26 , LOW ( _0x4 + ( 18 ) )
0000fc e0b1     +LDI R27 , HIGH ( _0x4 + ( 18 ) )
                 	__POINTW2MN _0x4,18
0000fd d071      	RCALL _lcd_puts
                 ; 0000 005F       lcd_gotoxy(6,1);
0000fe e0e6      	LDI  R30,LOW(6)
0000ff 93ea      	ST   -Y,R30
000100 e0a1      	LDI  R26,LOW(1)
000101 d02e      	RCALL _lcd_gotoxy
                 ; 0000 0060       itoa(v,b);
000102 927a      	ST   -Y,R7
000103 926a      	ST   -Y,R6
000104 940e 01e9 	CALL SUBOPT_0x2
000106 940e 01ad 	CALL _itoa
                 ; 0000 0061       lcd_puts(b);
000108 940e 01e9 	CALL SUBOPT_0x2
00010a d064      	RCALL _lcd_puts
                 ; 0000 0062       delay_ms(20);
00010b 940e 01ee 	CALL SUBOPT_0x3
                 ; 0000 0063       lcd_clear();
00010d d033      	RCALL _lcd_clear
                 ; 0000 0064       }
00010e cfc6      	RJMP _0x5
                 ; 0000 0065 }
                 _0xD:
00010f cfff      	RJMP _0xD
                 
                 	.DSEG
                 _0x4:
000160           	.BYTE 0x18
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
000110 93aa      	ST   -Y,R26
000111 b3e5      	IN   R30,0x15
000112 70ef      	ANDI R30,LOW(0xF)
000113 2fae      	MOV  R26,R30
000114 81e8      	LD   R30,Y
000115 7fe0      	ANDI R30,LOW(0xF0)
000116 2bea      	OR   R30,R26
000117 bbe5      	OUT  0x15,R30
                +
000118 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
000119 958a     +DEC R24
00011a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
00011b 9aaa      	SBI  0x15,2
                +
00011c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00011d 958a     +DEC R24
00011e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00011f 98aa      	CBI  0x15,2
                +
000120 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000121 958a     +DEC R24
000122 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000123 c087      	RJMP _0x20A0001
                 __lcd_write_data:
000124 93aa      	ST   -Y,R26
000125 81a8      	LD   R26,Y
000126 dfe9      	RCALL __lcd_write_nibble_G100
000127 81e8          ld    r30,y
000128 95e2          swap  r30
000129 83e8          st    y,r30
00012a 81a8      	LD   R26,Y
00012b dfe4      	RCALL __lcd_write_nibble_G100
                +
00012c e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00012d 958a     +DEC R24
00012e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00012f c07b      	RJMP _0x20A0001
                 _lcd_gotoxy:
000130 93aa      	ST   -Y,R26
000131 81e8      	LD   R30,Y
000132 e0f0      	LDI  R31,0
000133 58e6      	SUBI R30,LOW(-__base_y_G100)
000134 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000135 81e0      	LD   R30,Z
000136 81a9      	LDD  R26,Y+1
000137 0fae      	ADD  R26,R30
000138 dfeb      	RCALL __lcd_write_data
000139 81e9      	LDD  R30,Y+1
00013a 93e0 017e 	STS  __lcd_x,R30
00013c 81e8      	LD   R30,Y
00013d 93e0 017f 	STS  __lcd_y,R30
00013f 9622      	ADIW R28,2
000140 9508      	RET
                 _lcd_clear:
000141 e0a2      	LDI  R26,LOW(2)
000142 940e 01f2 	CALL SUBOPT_0x4
000144 e0ac      	LDI  R26,LOW(12)
000145 dfde      	RCALL __lcd_write_data
000146 e0a1      	LDI  R26,LOW(1)
000147 940e 01f2 	CALL SUBOPT_0x4
000149 e0e0      	LDI  R30,LOW(0)
00014a 93e0 017f 	STS  __lcd_y,R30
00014c 93e0 017e 	STS  __lcd_x,R30
00014e 9508      	RET
                 _lcd_putchar:
00014f 93aa      	ST   -Y,R26
000150 81a8      	LD   R26,Y
000151 30aa      	CPI  R26,LOW(0xA)
000152 f031      	BREQ _0x2000005
000153 91e0 0180 	LDS  R30,__lcd_maxx
000155 91a0 017e 	LDS  R26,__lcd_x
000157 17ae      	CP   R26,R30
000158 f060      	BRLO _0x2000004
                 _0x2000005:
000159 e0e0      	LDI  R30,LOW(0)
00015a 93ea      	ST   -Y,R30
00015b 91a0 017f 	LDS  R26,__lcd_y
00015d 5faf      	SUBI R26,-LOW(1)
00015e 93a0 017f 	STS  __lcd_y,R26
000160 dfcf      	RCALL _lcd_gotoxy
000161 81a8      	LD   R26,Y
000162 30aa      	CPI  R26,LOW(0xA)
000163 f409      	BRNE _0x2000007
000164 c046      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
000165 91e0 017e 	LDS  R30,__lcd_x
000167 5fef      	SUBI R30,-LOW(1)
000168 93e0 017e 	STS  __lcd_x,R30
00016a 9aa8      	SBI  0x15,0
00016b 81a8      	LD   R26,Y
00016c dfb7      	RCALL __lcd_write_data
00016d 98a8      	CBI  0x15,0
00016e c03c      	RJMP _0x20A0001
                 _lcd_puts:
00016f 93ba      	ST   -Y,R27
000170 93aa      	ST   -Y,R26
000171 931a      	ST   -Y,R17
                 _0x2000008:
000172 81a9      	LDD  R26,Y+1
000173 81ba      	LDD  R27,Y+1+1
000174 91ed      	LD   R30,X+
000175 83a9      	STD  Y+1,R26
000176 83ba      	STD  Y+1+1,R27
000177 2f1e      	MOV  R17,R30
000178 30e0      	CPI  R30,0
000179 f019      	BREQ _0x200000A
00017a 2fa1      	MOV  R26,R17
00017b dfd3      	RCALL _lcd_putchar
00017c cff5      	RJMP _0x2000008
                 _0x200000A:
00017d 8118      	LDD  R17,Y+0
00017e 9623      	ADIW R28,3
00017f 9508      	RET
                 _lcd_init:
000180 93aa      	ST   -Y,R26
000181 b3e4      	IN   R30,0x14
000182 6fe0      	ORI  R30,LOW(0xF0)
000183 bbe4      	OUT  0x14,R30
000184 9aa2      	SBI  0x14,2
000185 9aa0      	SBI  0x14,0
000186 9aa1      	SBI  0x14,1
000187 98aa      	CBI  0x15,2
000188 98a8      	CBI  0x15,0
000189 98a9      	CBI  0x15,1
00018a 81e8      	LD   R30,Y
00018b 93e0 0180 	STS  __lcd_maxx,R30
00018d 58e0      	SUBI R30,-LOW(128)
                +
00018e 93e0 017c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000190 81e8      	LD   R30,Y
000191 54e0      	SUBI R30,-LOW(192)
                +
000192 93e0 017d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000194 940e 01ee 	CALL SUBOPT_0x3
000196 940e 01f8 	CALL SUBOPT_0x5
000198 940e 01f8 	CALL SUBOPT_0x5
00019a 940e 01f8 	CALL SUBOPT_0x5
00019c e2a0      	LDI  R26,LOW(32)
00019d df72      	RCALL __lcd_write_nibble_G100
                +
00019e ec88     +LDI R24 , LOW ( 200 )
00019f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a0 9701     +SBIW R24 , 1
0001a1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a2 e2a8      	LDI  R26,LOW(40)
0001a3 df80      	RCALL __lcd_write_data
0001a4 e0a4      	LDI  R26,LOW(4)
0001a5 df7e      	RCALL __lcd_write_data
0001a6 e8a5      	LDI  R26,LOW(133)
0001a7 df7c      	RCALL __lcd_write_data
0001a8 e0a6      	LDI  R26,LOW(6)
0001a9 df7a      	RCALL __lcd_write_data
0001aa df96      	RCALL _lcd_clear
                 _0x20A0001:
0001ab 9621      	ADIW R28,1
0001ac 9508      	RET
                 
                 	.CSEG
                 _itoa:
0001ad 93ba      	ST   -Y,R27
0001ae 93aa      	ST   -Y,R26
0001af 91a9          ld   r26,y+
0001b0 91b9          ld   r27,y+
0001b1 91e9          ld   r30,y+
0001b2 91f9          ld   r31,y+
0001b3 9630          adiw r30,0
0001b4 f42a          brpl __itoa0
0001b5 95e0          com  r30
0001b6 95f0          com  r31
0001b7 9631          adiw r30,1
0001b8 e26d          ldi  r22,'-'
0001b9 936d          st   x+,r22
                 __itoa0:
0001ba 94e8          clt
0001bb e180          ldi  r24,low(10000)
0001bc e297          ldi  r25,high(10000)
0001bd d00d          rcall __itoa1
0001be ee88          ldi  r24,low(1000)
0001bf e093          ldi  r25,high(1000)
0001c0 d00a          rcall __itoa1
0001c1 e684          ldi  r24,100
0001c2 2799          clr  r25
0001c3 d007          rcall __itoa1
0001c4 e08a          ldi  r24,10
0001c5 d005          rcall __itoa1
0001c6 2f6e          mov  r22,r30
0001c7 d010          rcall __itoa5
0001c8 2766          clr  r22
0001c9 936c          st   x,r22
0001ca 9508          ret
                 
                 __itoa1:
0001cb 2766          clr	 r22
                 __itoa2:
0001cc 17e8          cp   r30,r24
0001cd 07f9          cpc  r31,r25
0001ce f020          brlo __itoa3
0001cf 9563          inc  r22
0001d0 1be8          sub  r30,r24
0001d1 0bf9          sbc  r31,r25
0001d2 f7c9          brne __itoa2
                 __itoa3:
0001d3 2366          tst  r22
0001d4 f411          brne __itoa4
0001d5 f016          brts __itoa5
0001d6 9508          ret
                 __itoa4:
0001d7 9468          set
                 __itoa5:
0001d8 5d60          subi r22,-0x30
0001d9 936d          st   x+,r22
0001da 9508          ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _b:
000178           	.BYTE 0x2
                 __base_y_G100:
00017a           	.BYTE 0x4
                 __lcd_x:
00017e           	.BYTE 0x1
                 __lcd_y:
00017f           	.BYTE 0x1
                 __lcd_maxx:
000180           	.BYTE 0x1
                 __seed_G101:
000181           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0001db 940e 016f 	CALL _lcd_puts
0001dd e3a2      	LDI  R26,LOW(50)
0001de e0b0      	LDI  R27,0
0001df 940c 0200 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0001e1 940e 020a 	CALL __MULW12U
0001e3 01df      	MOVW R26,R30
0001e4 efef      	LDI  R30,LOW(1023)
0001e5 e0f3      	LDI  R31,HIGH(1023)
0001e6 940e 0212 	CALL __DIVW21U
0001e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0001e9 91a0 0178 	LDS  R26,_b
0001eb 91b0 0179 	LDS  R27,_b+1
0001ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001ee e1a4      	LDI  R26,LOW(20)
0001ef e0b0      	LDI  R27,0
0001f0 940c 0200 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0001f2 940e 0124 	CALL __lcd_write_data
0001f4 e0a3      	LDI  R26,LOW(3)
0001f5 e0b0      	LDI  R27,0
0001f6 940c 0200 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
0001f8 e3a0      	LDI  R26,LOW(48)
0001f9 940e 0110 	CALL __lcd_write_nibble_G100
                +
0001fb ec88     +LDI R24 , LOW ( 200 )
0001fc e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001fd 9701     +SBIW R24 , 1
0001fe f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001ff 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000200 9610      	adiw r26,0
000201 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000202 ed80     +LDI R24 , LOW ( 0x7D0 )
000203 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000204 9701     +SBIW R24 , 1
000205 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000206 95a8      	wdr
000207 9711      	sbiw r26,1
000208 f7c9      	brne __delay_ms0
                 __delay_ms1:
000209 9508      	ret
                 
                 __MULW12U:
00020a 9ffa      	MUL  R31,R26
00020b 2df0      	MOV  R31,R0
00020c 9feb      	MUL  R30,R27
00020d 0df0      	ADD  R31,R0
00020e 9fea      	MUL  R30,R26
00020f 2de0      	MOV  R30,R0
000210 0df1      	ADD  R31,R1
000211 9508      	RET
                 
                 __DIVW21U:
000212 2400      	CLR  R0
000213 2411      	CLR  R1
000214 e190      	LDI  R25,16
                 __DIVW21U1:
000215 0faa      	LSL  R26
000216 1fbb      	ROL  R27
000217 1c00      	ROL  R0
000218 1c11      	ROL  R1
000219 1a0e      	SUB  R0,R30
00021a 0a1f      	SBC  R1,R31
00021b f418      	BRCC __DIVW21U2
00021c 0e0e      	ADD  R0,R30
00021d 1e1f      	ADC  R1,R31
00021e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00021f 60a1      	SBR  R26,1
                 __DIVW21U3:
000220 959a      	DEC  R25
000221 f799      	BRNE __DIVW21U1
000222 01fd      	MOVW R30,R26
000223 01d0      	MOVW R26,R0
000224 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  14 r1 :   8 r2 :   0 r3 :   0 r4 :   3 r5 :   1 r6 :   2 r7 :   1 
r8 :   5 r9 :   2 r10:   1 r11:   0 r12:   2 r13:   1 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  27 r25:  12 r26:  64 r27:  21 r28:   4 r29:   1 r30: 138 r31:  24 
x  :   7 y  :  61 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :   7 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  16 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  23 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   2 cpi   :   3 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   1 jmp   :  25 ld    :  27 ldd   :   5 ldi   :  87 
lds   :   6 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   6 movw  :  14 
mul   :   3 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  33 pop   :   0 push  :   0 rcall :  27 ret   :  13 
reti  :   2 rjmp  :  10 rol   :   3 ror   :   0 sbc   :   2 sbci  :   1 
sbi   :   6 sbic  :   0 sbis  :   1 sbiw  :   7 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  35 std   :   2 sts   :   9 sub   :   2 subi  :   6 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 56 out of 116 (48.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00044a   1028     70   1098   16384   6.7%
[.dseg] 0x000060 0x000185      0     37     37    1119   3.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
