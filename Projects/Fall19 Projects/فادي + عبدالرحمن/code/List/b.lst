
AVRASM ver. 2.1.30  C:\Users\Fadi\Desktop\pro\1111\List\b.asm Sun Dec 01 14:38:53 2019

C:\Users\Fadi\Desktop\pro\1111\List\b.asm(1072): warning: Register r4 already defined by the .DEF directive
C:\Users\Fadi\Desktop\pro\1111\List\b.asm(1073): warning: Register r6 already defined by the .DEF directive
C:\Users\Fadi\Desktop\pro\1111\List\b.asm(1074): warning: Register r8 already defined by the .DEF directive
C:\Users\Fadi\Desktop\pro\1111\List\b.asm(1075): warning: Register r11 already defined by the .DEF directive
C:\Users\Fadi\Desktop\pro\1111\List\b.asm(1076): warning: Register r10 already defined by the .DEF directive
C:\Users\Fadi\Desktop\pro\1111\List\b.asm(1077): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _x=R4
                 	.DEF _y=R6
                 	.DEF _b=R8
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0044 	JMP  __RESET
000002 940c 0074 	JMP  _ext_int0_isr
000004 940c 0081 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0xB:
00002a 05db      	.DB  0xDB,0x5
                 _0x0:
00002b 6f50
00002c 6973
00002d 6974
00002e 6e6f      	.DB  0x50,0x6F,0x73,0x69,0x74,0x69,0x6F,0x6E
00002f 003d      	.DB  0x3D,0x0
                 _0x2000003:
000030 c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\Fadi\Desktop\pro\1111\List\b.asm(1116): warning: .cseg .db misalignment - padding zero byte
000031 0001      	.DB  0x1
                 _0x2020000:
000032 4e2d
000033 4e41
000034 4900
000035 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Fadi\Desktop\pro\1111\List\b.asm(1119): warning: .cseg .db misalignment - padding zero byte
000036 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000037 000a      	.DW  0x0A
000038 0260      	.DW  _0x8
000039 0056      	.DW  _0x0*2
                 
00003a 0002      	.DW  0x02
00003b 0006      	.DW  0x06
00003c 0054      	.DW  _0xB*2
                 
00003d 0002      	.DW  0x02
00003e 026a      	.DW  __base_y_G100
00003f 0060      	.DW  _0x2000003*2
                 
000040 0001      	.DW  0x01
000041 026e      	.DW  __seed_G101
000042 0062      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000043 0000      	.DW  0
                 
                 __RESET:
000044 94f8      	CLI
000045 27ee      	CLR  R30
000046 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000047 e0f1      	LDI  R31,1
000048 bffb      	OUT  GICR,R31
000049 bfeb      	OUT  GICR,R30
00004a bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004b e1f8      	LDI  R31,0x18
00004c bdf1      	OUT  WDTCR,R31
00004d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00004e e08d      	LDI  R24,(14-2)+1
00004f e0a2      	LDI  R26,2
000050 27bb      	CLR  R27
                 __CLEAR_REG:
000051 93ed      	ST   X+,R30
000052 958a      	DEC  R24
000053 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000054 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000055 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000056 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000057 93ed      	ST   X+,R30
000058 9701      	SBIW R24,1
000059 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005a e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005c 9185      	LPM  R24,Z+
00005d 9195      	LPM  R25,Z+
00005e 9700      	SBIW R24,0
00005f f061      	BREQ __GLOBAL_INI_END
000060 91a5      	LPM  R26,Z+
000061 91b5      	LPM  R27,Z+
000062 9005      	LPM  R0,Z+
000063 9015      	LPM  R1,Z+
000064 01bf      	MOVW R22,R30
000065 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000066 9005      	LPM  R0,Z+
000067 920d      	ST   X+,R0
000068 9701      	SBIW R24,1
000069 f7e1      	BRNE __GLOBAL_INI_LOOP
00006a 01fb      	MOVW R30,R22
00006b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006d bfed      	OUT  SPL,R30
00006e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000070 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000071 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000072 940c 0092 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;
                 ;
                 ;int x;
                 ;int y=1499;
                 ;unsigned char *b;
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0010 {
                 
                 	.CSEG
                 _ext_int0_isr:
000074 93ea      	ST   -Y,R30
000075 93fa      	ST   -Y,R31
000076 b7ef      	IN   R30,SREG
000077 93ea      	ST   -Y,R30
                 ; 0000 0011 // Place your code here
                 ; 0000 0012 if(x<90)
000078 e5ea      	LDI  R30,LOW(90)
000079 e0f0      	LDI  R31,HIGH(90)
00007a 164e      	CP   R4,R30
00007b 065f      	CPC  R5,R31
00007c f41c      	BRGE _0x3
                 ; 0000 0013 {
                 ; 0000 0014 x=x+10;
00007d 01f2      	MOVW R30,R4
00007e 963a      	ADIW R30,10
00007f 012f      	MOVW R4,R30
                 ; 0000 0015 
                 ; 0000 0016 }
                 ; 0000 0017 
                 ; 0000 0018 
                 ; 0000 0019 }
                 _0x3:
000080 c00c      	RJMP _0xA
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 001D {
                 _ext_int1_isr:
000081 93ea      	ST   -Y,R30
000082 93fa      	ST   -Y,R31
000083 b7ef      	IN   R30,SREG
000084 93ea      	ST   -Y,R30
                 ; 0000 001E if(x>-90)
000085 eae6      	LDI  R30,LOW(65446)
000086 efff      	LDI  R31,HIGH(65446)
000087 15e4      	CP   R30,R4
000088 05f5      	CPC  R31,R5
000089 f41c      	BRGE _0x4
                 ; 0000 001F {
                 ; 0000 0020 x=x-10;
00008a 01f2      	MOVW R30,R4
00008b 973a      	SBIW R30,10
00008c 012f      	MOVW R4,R30
                 ; 0000 0021 
                 ; 0000 0022 
                 ; 0000 0023 }
                 ; 0000 0024 }
                 _0x4:
                 _0xA:
00008d 91e9      	LD   R30,Y+
00008e bfef      	OUT  SREG,R30
00008f 91f9      	LD   R31,Y+
000090 91e9      	LD   R30,Y+
000091 9518      	RETI
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;
                 ;void main(void)
                 ; 0000 002B {
                 _main:
                 ; 0000 002C // Declare your local variables here
                 ; 0000 002D 
                 ; 0000 002E // Input/Output Ports initialization
                 ; 0000 002F // Port A initialization
                 ; 0000 0030 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0031 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0032 PORTA=0x00;
000092 e0e0      	LDI  R30,LOW(0)
000093 bbeb      	OUT  0x1B,R30
                 ; 0000 0033 DDRA=0x00;
000094 bbea      	OUT  0x1A,R30
                 ; 0000 0034 
                 ; 0000 0035 // Port B initialization
                 ; 0000 0036 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0037 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0038 PORTB=0x00;
000095 bbe8      	OUT  0x18,R30
                 ; 0000 0039 DDRB=0x00;
000096 bbe7      	OUT  0x17,R30
                 ; 0000 003A 
                 ; 0000 003B // Port C initialization
                 ; 0000 003C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 003D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 003E PORTC=0x00;
000097 bbe5      	OUT  0x15,R30
                 ; 0000 003F DDRC=0x00;
000098 bbe4      	OUT  0x14,R30
                 ; 0000 0040 
                 ; 0000 0041 // Port D initialization
                 ; 0000 0042 // Func7=In Func6=In Func5=Out Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0043 // State7=T State6=T State5=0 State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0044 PORTD=0b00001100;
000099 e0ec      	LDI  R30,LOW(12)
00009a bbe2      	OUT  0x12,R30
                 ; 0000 0045 DDRD=0x20;
00009b e2e0      	LDI  R30,LOW(32)
00009c bbe1      	OUT  0x11,R30
                 ; 0000 0046 
                 ; 0000 0047 // Timer/Counter 0 initialization
                 ; 0000 0048 // Clock source: System Clock
                 ; 0000 0049 // Clock value: Timer 0 Stopped
                 ; 0000 004A // Mode: Normal top=0xFF
                 ; 0000 004B // OC0 output: Disconnected
                 ; 0000 004C TCCR0=0x00;
00009d e0e0      	LDI  R30,LOW(0)
00009e bfe3      	OUT  0x33,R30
                 ; 0000 004D TCNT0=0x00;
00009f bfe2      	OUT  0x32,R30
                 ; 0000 004E OCR0=0x00;
0000a0 bfec      	OUT  0x3C,R30
                 ; 0000 004F 
                 ; 0000 0050 
                 ; 0000 0051 // Timer/Counter 1 initialization
                 ; 0000 0052 // Clock source: System Clock
                 ; 0000 0053 // Clock value: 1000.000 kHz
                 ; 0000 0054 // Mode: Fast PWM top=ICR1
                 ; 0000 0055 // OC1A output: Non-Inv.
                 ; 0000 0056 // OC1B output: Discon.
                 ; 0000 0057 // Noise Canceler: Off
                 ; 0000 0058 // Input Capture on Falling Edge
                 ; 0000 0059 // Timer1 Overflow Interrupt: Off
                 ; 0000 005A // Input Capture Interrupt: Off
                 ; 0000 005B // Compare A Match Interrupt: Off
                 ; 0000 005C // Compare B Match Interrupt: Off
                 ; 0000 005D TCCR1A=0x82;
0000a1 e8e2      	LDI  R30,LOW(130)
0000a2 bdef      	OUT  0x2F,R30
                 ; 0000 005E TCCR1B=0x19;
0000a3 e1e9      	LDI  R30,LOW(25)
0000a4 bdee      	OUT  0x2E,R30
                 ; 0000 005F TCNT1H=0x00;
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 bded      	OUT  0x2D,R30
                 ; 0000 0060 TCNT1L=0x00;
0000a7 bdec      	OUT  0x2C,R30
                 ; 0000 0061 ICR1H=19999/256;
0000a8 e4ee      	LDI  R30,LOW(78)
0000a9 bde7      	OUT  0x27,R30
                 ; 0000 0062 ICR1L=19999%256;
0000aa e1ef      	LDI  R30,LOW(31)
0000ab bde6      	OUT  0x26,R30
                 ; 0000 0063 OCR1AH=y/256;
0000ac 940e 019a 	CALL SUBOPT_0x0
                 ; 0000 0064 OCR1AL=y%256;
                 ; 0000 0065 
                 ; 0000 0066 
                 ; 0000 0067 
                 ; 0000 0068 
                 ; 0000 0069 // External Interrupt(s) initialization
                 ; 0000 006A // INT0: On
                 ; 0000 006B // INT0 Mode: Falling Edge
                 ; 0000 006C // INT1: On
                 ; 0000 006D // INT1 Mode: Falling Edge
                 ; 0000 006E // INT2: Off
                 ; 0000 006F GICR|=0xC0;
0000ae b7eb      	IN   R30,0x3B
0000af 6ce0      	ORI  R30,LOW(0xC0)
0000b0 bfeb      	OUT  0x3B,R30
                 ; 0000 0070 MCUCR=0x0A;
0000b1 e0ea      	LDI  R30,LOW(10)
0000b2 bfe5      	OUT  0x35,R30
                 ; 0000 0071 MCUCSR=0x00;
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 bfe4      	OUT  0x34,R30
                 ; 0000 0072 
                 ; 0000 0073 
                 ; 0000 0074 
                 ; 0000 0075 
                 ; 0000 0076 
                 ; 0000 0077 // Alphanumeric LCD initialization
                 ; 0000 0078 // Connections are specified in the
                 ; 0000 0079 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 007A // RS - PORTC Bit 0
                 ; 0000 007B // RD - PORTC Bit 1
                 ; 0000 007C // EN - PORTC Bit 2
                 ; 0000 007D // D4 - PORTC Bit 4
                 ; 0000 007E // D5 - PORTC Bit 5
                 ; 0000 007F // D6 - PORTC Bit 6
                 ; 0000 0080 // D7 - PORTC Bit 7
                 ; 0000 0081 // Characters/line: 8
                 ; 0000 0082 lcd_init(16);
0000b5 e1a0      	LDI  R26,LOW(16)
0000b6 d089      	RCALL _lcd_init
                 ; 0000 0083 
                 ; 0000 0084 // Global enable interrupts
                 ; 0000 0085 #asm("sei")
0000b7 9478      	sei
                 ; 0000 0086 
                 ; 0000 0087 while (1)
                 _0x5:
                 ; 0000 0088 {
                 ; 0000 0089       y=5.555*x+1499;
0000b8 01f2      	MOVW R30,R4
0000b9 940e 0302 	CALL __CWD1
0000bb 940e 0225 	CALL __CDF1
                +
0000bd e8af     +LDI R26 , LOW ( 0x40B1C28F )
0000be ecb2     +LDI R27 , HIGH ( 0x40B1C28F )
0000bf eb81     +LDI R24 , BYTE3 ( 0x40B1C28F )
0000c0 e490     +LDI R25 , BYTE4 ( 0x40B1C28F )
                 	__GETD2N 0x40B1C28F
0000c1 940e 02a8 	CALL __MULF12
                +
0000c3 e0a0     +LDI R26 , LOW ( 0x44BB6000 )
0000c4 e6b0     +LDI R27 , HIGH ( 0x44BB6000 )
0000c5 eb8b     +LDI R24 , BYTE3 ( 0x44BB6000 )
0000c6 e494     +LDI R25 , BYTE4 ( 0x44BB6000 )
                 	__GETD2N 0x44BB6000
0000c7 940e 0258 	CALL __ADDF12
0000c9 940e 01ee 	CALL __CFD1
0000cb 013f      	MOVW R6,R30
                 ; 0000 008A       OCR1AH=y/256;
0000cc 940e 019a 	CALL SUBOPT_0x0
                 ; 0000 008B       OCR1AL=y%256;
                 ; 0000 008C       lcd_puts("Position=");
                +
0000ce e6a0     +LDI R26 , LOW ( _0x8 + ( 0 ) )
0000cf e0b2     +LDI R27 , HIGH ( _0x8 + ( 0 ) )
                 	__POINTW2MN _0x8,0
0000d0 d05e      	RCALL _lcd_puts
                 ; 0000 008D       lcd_gotoxy(10,0);
0000d1 e0ea      	LDI  R30,LOW(10)
0000d2 93ea      	ST   -Y,R30
0000d3 e0a0      	LDI  R26,LOW(0)
0000d4 d02c      	RCALL _lcd_gotoxy
                 ; 0000 008E       itoa(x,b);
0000d5 925a      	ST   -Y,R5
0000d6 924a      	ST   -Y,R4
0000d7 01d4      	MOVW R26,R8
0000d8 940e 016c 	CALL _itoa
                 ; 0000 008F       lcd_puts(b);
0000da 01d4      	MOVW R26,R8
0000db d053      	RCALL _lcd_puts
                 ; 0000 0090       delay_ms(20);
0000dc 940e 01a3 	CALL SUBOPT_0x1
                 ; 0000 0091       lcd_clear();
0000de d02f      	RCALL _lcd_clear
                 ; 0000 0092 
                 ; 0000 0093 }
0000df cfd8      	RJMP _0x5
                 ; 0000 0094 
                 ; 0000 0095 
                 ; 0000 0096 }
                 _0x9:
0000e0 cfff      	RJMP _0x9
                 
                 	.DSEG
                 _0x8:
000260           	.BYTE 0xA
                 ;
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
0000e1 93aa      	ST   -Y,R26
0000e2 b3e5      	IN   R30,0x15
0000e3 70ef      	ANDI R30,LOW(0xF)
0000e4 2fae      	MOV  R26,R30
0000e5 81e8      	LD   R30,Y
0000e6 7fe0      	ANDI R30,LOW(0xF0)
0000e7 2bea      	OR   R30,R26
0000e8 bbe5      	OUT  0x15,R30
                +
0000e9 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0000ea 958a     +DEC R24
0000eb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0000ec 9aaa      	SBI  0x15,2
                +
0000ed e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ee 958a     +DEC R24
0000ef f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f0 98aa      	CBI  0x15,2
                +
0000f1 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f2 958a     +DEC R24
0000f3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f4 c075      	RJMP _0x20A0001
                 __lcd_write_data:
0000f5 93aa      	ST   -Y,R26
0000f6 81a8      	LD   R26,Y
0000f7 dfe9      	RCALL __lcd_write_nibble_G100
0000f8 81e8          ld    r30,y
0000f9 95e2          swap  r30
0000fa 83e8          st    y,r30
0000fb 81a8      	LD   R26,Y
0000fc dfe4      	RCALL __lcd_write_nibble_G100
                +
0000fd e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000fe 958a     +DEC R24
0000ff f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000100 c069      	RJMP _0x20A0001
                 _lcd_gotoxy:
000101 93aa      	ST   -Y,R26
000102 81e8      	LD   R30,Y
000103 e0f0      	LDI  R31,0
000104 59e6      	SUBI R30,LOW(-__base_y_G100)
000105 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000106 81e0      	LD   R30,Z
000107 81a9      	LDD  R26,Y+1
000108 0fae      	ADD  R26,R30
000109 dfeb      	RCALL __lcd_write_data
00010a 80b9      	LDD  R11,Y+1
00010b 80a8      	LDD  R10,Y+0
00010c 9622      	ADIW R28,2
00010d 9508      	RET
                 _lcd_clear:
00010e e0a2      	LDI  R26,LOW(2)
00010f 940e 01a7 	CALL SUBOPT_0x2
000111 e0ac      	LDI  R26,LOW(12)
000112 dfe2      	RCALL __lcd_write_data
000113 e0a1      	LDI  R26,LOW(1)
000114 940e 01a7 	CALL SUBOPT_0x2
000116 e0e0      	LDI  R30,LOW(0)
000117 2eae      	MOV  R10,R30
000118 2ebe      	MOV  R11,R30
000119 9508      	RET
                 _lcd_putchar:
00011a 93aa      	ST   -Y,R26
00011b 81a8      	LD   R26,Y
00011c 30aa      	CPI  R26,LOW(0xA)
00011d f011      	BREQ _0x2000005
00011e 14bd      	CP   R11,R13
00011f f048      	BRLO _0x2000004
                 _0x2000005:
000120 e0e0      	LDI  R30,LOW(0)
000121 93ea      	ST   -Y,R30
000122 94a3      	INC  R10
000123 2daa      	MOV  R26,R10
000124 dfdc      	RCALL _lcd_gotoxy
000125 81a8      	LD   R26,Y
000126 30aa      	CPI  R26,LOW(0xA)
000127 f409      	BRNE _0x2000007
000128 c041      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
000129 94b3      	INC  R11
00012a 9aa8      	SBI  0x15,0
00012b 81a8      	LD   R26,Y
00012c dfc8      	RCALL __lcd_write_data
00012d 98a8      	CBI  0x15,0
00012e c03b      	RJMP _0x20A0001
                 _lcd_puts:
00012f 93ba      	ST   -Y,R27
000130 93aa      	ST   -Y,R26
000131 931a      	ST   -Y,R17
                 _0x2000008:
000132 81a9      	LDD  R26,Y+1
000133 81ba      	LDD  R27,Y+1+1
000134 91ed      	LD   R30,X+
000135 83a9      	STD  Y+1,R26
000136 83ba      	STD  Y+1+1,R27
000137 2f1e      	MOV  R17,R30
000138 30e0      	CPI  R30,0
000139 f019      	BREQ _0x200000A
00013a 2fa1      	MOV  R26,R17
00013b dfde      	RCALL _lcd_putchar
00013c cff5      	RJMP _0x2000008
                 _0x200000A:
00013d 8118      	LDD  R17,Y+0
00013e 9623      	ADIW R28,3
00013f 9508      	RET
                 _lcd_init:
000140 93aa      	ST   -Y,R26
000141 b3e4      	IN   R30,0x14
000142 6fe0      	ORI  R30,LOW(0xF0)
000143 bbe4      	OUT  0x14,R30
000144 9aa2      	SBI  0x14,2
000145 9aa0      	SBI  0x14,0
000146 9aa1      	SBI  0x14,1
000147 98aa      	CBI  0x15,2
000148 98a8      	CBI  0x15,0
000149 98a9      	CBI  0x15,1
00014a 80d8      	LDD  R13,Y+0
00014b 81e8      	LD   R30,Y
00014c 58e0      	SUBI R30,-LOW(128)
                +
00014d 93e0 026c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00014f 81e8      	LD   R30,Y
000150 54e0      	SUBI R30,-LOW(192)
                +
000151 93e0 026d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000153 940e 01a3 	CALL SUBOPT_0x1
000155 940e 01ad 	CALL SUBOPT_0x3
000157 940e 01ad 	CALL SUBOPT_0x3
000159 940e 01ad 	CALL SUBOPT_0x3
00015b e2a0      	LDI  R26,LOW(32)
00015c df84      	RCALL __lcd_write_nibble_G100
                +
00015d ec88     +LDI R24 , LOW ( 200 )
00015e e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00015f 9701     +SBIW R24 , 1
000160 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000161 e2a8      	LDI  R26,LOW(40)
000162 df92      	RCALL __lcd_write_data
000163 e0a4      	LDI  R26,LOW(4)
000164 df90      	RCALL __lcd_write_data
000165 e8a5      	LDI  R26,LOW(133)
000166 df8e      	RCALL __lcd_write_data
000167 e0a6      	LDI  R26,LOW(6)
000168 df8c      	RCALL __lcd_write_data
000169 dfa4      	RCALL _lcd_clear
                 _0x20A0001:
00016a 9621      	ADIW R28,1
00016b 9508      	RET
                 
                 	.CSEG
                 _itoa:
00016c 93ba      	ST   -Y,R27
00016d 93aa      	ST   -Y,R26
00016e 91a9          ld   r26,y+
00016f 91b9          ld   r27,y+
000170 91e9          ld   r30,y+
000171 91f9          ld   r31,y+
000172 9630          adiw r30,0
000173 f42a          brpl __itoa0
000174 95e0          com  r30
000175 95f0          com  r31
000176 9631          adiw r30,1
000177 e26d          ldi  r22,'-'
000178 936d          st   x+,r22
                 __itoa0:
000179 94e8          clt
00017a e180          ldi  r24,low(10000)
00017b e297          ldi  r25,high(10000)
00017c d00d          rcall __itoa1
00017d ee88          ldi  r24,low(1000)
00017e e093          ldi  r25,high(1000)
00017f d00a          rcall __itoa1
000180 e684          ldi  r24,100
000181 2799          clr  r25
000182 d007          rcall __itoa1
000183 e08a          ldi  r24,10
000184 d005          rcall __itoa1
000185 2f6e          mov  r22,r30
000186 d010          rcall __itoa5
000187 2766          clr  r22
000188 936c          st   x,r22
000189 9508          ret
                 
                 __itoa1:
00018a 2766          clr	 r22
                 __itoa2:
00018b 17e8          cp   r30,r24
00018c 07f9          cpc  r31,r25
00018d f020          brlo __itoa3
00018e 9563          inc  r22
00018f 1be8          sub  r30,r24
000190 0bf9          sbc  r31,r25
000191 f7c9          brne __itoa2
                 __itoa3:
000192 2366          tst  r22
000193 f411          brne __itoa4
000194 f016          brts __itoa5
000195 9508          ret
                 __itoa4:
000196 9468          set
                 __itoa5:
000197 5d60          subi r22,-0x30
000198 936d          st   x+,r22
000199 9508          ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
00026a           	.BYTE 0x4
                 __seed_G101:
00026e           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00019a 01d3      	MOVW R26,R6
00019b e0e0      	LDI  R30,LOW(256)
00019c e0f1      	LDI  R31,HIGH(256)
00019d 940e 031a 	CALL __DIVW21
00019f bdeb      	OUT  0x2B,R30
0001a0 2de6      	MOV  R30,R6
0001a1 bdea      	OUT  0x2A,R30
0001a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001a3 e1a4      	LDI  R26,LOW(20)
0001a4 e0b0      	LDI  R27,0
0001a5 940c 01b5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0001a7 940e 00f5 	CALL __lcd_write_data
0001a9 e0a3      	LDI  R26,LOW(3)
0001aa e0b0      	LDI  R27,0
0001ab 940c 01b5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0001ad e3a0      	LDI  R26,LOW(48)
0001ae 940e 00e1 	CALL __lcd_write_nibble_G100
                +
0001b0 ec88     +LDI R24 , LOW ( 200 )
0001b1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001b2 9701     +SBIW R24 , 1
0001b3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001b4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001b5 9610      	adiw r26,0
0001b6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001b7 ed80     +LDI R24 , LOW ( 0x7D0 )
0001b8 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001b9 9701     +SBIW R24 , 1
0001ba f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001bb 95a8      	wdr
0001bc 9711      	sbiw r26,1
0001bd f7c9      	brne __delay_ms0
                 __delay_ms1:
0001be 9508      	ret
                 
                 __ROUND_REPACK:
0001bf 2355      	TST  R21
0001c0 f442      	BRPL __REPACK
0001c1 3850      	CPI  R21,0x80
0001c2 f411      	BRNE __ROUND_REPACK0
0001c3 ffe0      	SBRS R30,0
0001c4 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0001c5 9631      	ADIW R30,1
0001c6 1f69      	ADC  R22,R25
0001c7 1f79      	ADC  R23,R25
0001c8 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0001c9 e850      	LDI  R21,0x80
0001ca 2757      	EOR  R21,R23
0001cb f411      	BRNE __REPACK0
0001cc 935f      	PUSH R21
0001cd c0c8      	RJMP __ZERORES
                 __REPACK0:
0001ce 3f5f      	CPI  R21,0xFF
0001cf f031      	BREQ __REPACK1
0001d0 0f66      	LSL  R22
0001d1 0c00      	LSL  R0
0001d2 9557      	ROR  R21
0001d3 9567      	ROR  R22
0001d4 2f75      	MOV  R23,R21
0001d5 9508      	RET
                 __REPACK1:
0001d6 935f      	PUSH R21
0001d7 2000      	TST  R0
0001d8 f00a      	BRMI __REPACK2
0001d9 c0c8      	RJMP __MAXRES
                 __REPACK2:
0001da c0c1      	RJMP __MINRES
                 
                 __UNPACK:
0001db e850      	LDI  R21,0x80
0001dc 2e19      	MOV  R1,R25
0001dd 2215      	AND  R1,R21
0001de 0f88      	LSL  R24
0001df 1f99      	ROL  R25
0001e0 2795      	EOR  R25,R21
0001e1 0f55      	LSL  R21
0001e2 9587      	ROR  R24
                 
                 __UNPACK1:
0001e3 e850      	LDI  R21,0x80
0001e4 2e07      	MOV  R0,R23
0001e5 2205      	AND  R0,R21
0001e6 0f66      	LSL  R22
0001e7 1f77      	ROL  R23
0001e8 2775      	EOR  R23,R21
0001e9 0f55      	LSL  R21
0001ea 9567      	ROR  R22
0001eb 9508      	RET
                 
                 __CFD1U:
0001ec 9468      	SET
0001ed c001      	RJMP __CFD1U0
                 __CFD1:
0001ee 94e8      	CLT
                 __CFD1U0:
0001ef 935f      	PUSH R21
0001f0 dff2      	RCALL __UNPACK1
0001f1 3870      	CPI  R23,0x80
0001f2 f018      	BRLO __CFD10
0001f3 3f7f      	CPI  R23,0xFF
0001f4 f408      	BRCC __CFD10
0001f5 c0a0      	RJMP __ZERORES
                 __CFD10:
0001f6 e156      	LDI  R21,22
0001f7 1b57      	SUB  R21,R23
0001f8 f4aa      	BRPL __CFD11
0001f9 9551      	NEG  R21
0001fa 3058      	CPI  R21,8
0001fb f40e      	BRTC __CFD19
0001fc 3059      	CPI  R21,9
                 __CFD19:
0001fd f030      	BRLO __CFD17
0001fe efef      	SER  R30
0001ff efff      	SER  R31
000200 ef6f      	SER  R22
000201 e77f      	LDI  R23,0x7F
000202 f977      	BLD  R23,7
000203 c01a      	RJMP __CFD15
                 __CFD17:
000204 2777      	CLR  R23
000205 2355      	TST  R21
000206 f0b9      	BREQ __CFD15
                 __CFD18:
000207 0fee      	LSL  R30
000208 1fff      	ROL  R31
000209 1f66      	ROL  R22
00020a 1f77      	ROL  R23
00020b 955a      	DEC  R21
00020c f7d1      	BRNE __CFD18
00020d c010      	RJMP __CFD15
                 __CFD11:
00020e 2777      	CLR  R23
                 __CFD12:
00020f 3058      	CPI  R21,8
000210 f028      	BRLO __CFD13
000211 2fef      	MOV  R30,R31
000212 2ff6      	MOV  R31,R22
000213 2f67      	MOV  R22,R23
000214 5058      	SUBI R21,8
000215 cff9      	RJMP __CFD12
                 __CFD13:
000216 2355      	TST  R21
000217 f031      	BREQ __CFD15
                 __CFD14:
000218 9576      	LSR  R23
000219 9567      	ROR  R22
00021a 95f7      	ROR  R31
00021b 95e7      	ROR  R30
00021c 955a      	DEC  R21
00021d f7d1      	BRNE __CFD14
                 __CFD15:
00021e 2000      	TST  R0
00021f f40a      	BRPL __CFD16
000220 d0d9      	RCALL __ANEGD1
                 __CFD16:
000221 915f      	POP  R21
000222 9508      	RET
                 
                 __CDF1U:
000223 9468      	SET
000224 c001      	RJMP __CDF1U0
                 __CDF1:
000225 94e8      	CLT
                 __CDF1U0:
000226 9730      	SBIW R30,0
000227 4060      	SBCI R22,0
000228 4070      	SBCI R23,0
000229 f0b1      	BREQ __CDF10
00022a 2400      	CLR  R0
00022b f026      	BRTS __CDF11
00022c 2377      	TST  R23
00022d f412      	BRPL __CDF11
00022e 9400      	COM  R0
00022f d0ca      	RCALL __ANEGD1
                 __CDF11:
000230 2e17      	MOV  R1,R23
000231 e17e      	LDI  R23,30
000232 2011      	TST  R1
                 __CDF12:
000233 f032      	BRMI __CDF13
000234 957a      	DEC  R23
000235 0fee      	LSL  R30
000236 1fff      	ROL  R31
000237 1f66      	ROL  R22
000238 1c11      	ROL  R1
000239 cff9      	RJMP __CDF12
                 __CDF13:
00023a 2fef      	MOV  R30,R31
00023b 2ff6      	MOV  R31,R22
00023c 2d61      	MOV  R22,R1
00023d 935f      	PUSH R21
00023e df8a      	RCALL __REPACK
00023f 915f      	POP  R21
                 __CDF10:
000240 9508      	RET
                 
                 __SWAPACC:
000241 934f      	PUSH R20
000242 01af      	MOVW R20,R30
000243 01fd      	MOVW R30,R26
000244 01da      	MOVW R26,R20
000245 01ab      	MOVW R20,R22
000246 01bc      	MOVW R22,R24
000247 01ca      	MOVW R24,R20
000248 2d40      	MOV  R20,R0
000249 2c01      	MOV  R0,R1
00024a 2e14      	MOV  R1,R20
00024b 914f      	POP  R20
00024c 9508      	RET
                 
                 __UADD12:
00024d 0fea      	ADD  R30,R26
00024e 1ffb      	ADC  R31,R27
00024f 1f68      	ADC  R22,R24
000250 9508      	RET
                 
                 __NEGMAN1:
000251 95e0      	COM  R30
000252 95f0      	COM  R31
000253 9560      	COM  R22
000254 5fef      	SUBI R30,-1
000255 4fff      	SBCI R31,-1
000256 4f6f      	SBCI R22,-1
000257 9508      	RET
                 
                 __ADDF12:
000258 935f      	PUSH R21
000259 df81      	RCALL __UNPACK
00025a 3890      	CPI  R25,0x80
00025b f139      	BREQ __ADDF129
                 
                 __ADDF120:
00025c 3870      	CPI  R23,0x80
00025d f121      	BREQ __ADDF128
                 __ADDF121:
00025e 2f57      	MOV  R21,R23
00025f 1b59      	SUB  R21,R25
000260 f12b      	BRVS __ADDF1211
000261 f412      	BRPL __ADDF122
000262 dfde      	RCALL __SWAPACC
000263 cffa      	RJMP __ADDF121
                 __ADDF122:
000264 3158      	CPI  R21,24
000265 f018      	BRLO __ADDF123
000266 27aa      	CLR  R26
000267 27bb      	CLR  R27
000268 2788      	CLR  R24
                 __ADDF123:
000269 3058      	CPI  R21,8
00026a f028      	BRLO __ADDF124
00026b 2fab      	MOV  R26,R27
00026c 2fb8      	MOV  R27,R24
00026d 2788      	CLR  R24
00026e 5058      	SUBI R21,8
00026f cff9      	RJMP __ADDF123
                 __ADDF124:
000270 2355      	TST  R21
000271 f029      	BREQ __ADDF126
                 __ADDF125:
000272 9586      	LSR  R24
000273 95b7      	ROR  R27
000274 95a7      	ROR  R26
000275 955a      	DEC  R21
000276 f7d9      	BRNE __ADDF125
                 __ADDF126:
000277 2d50      	MOV  R21,R0
000278 2551      	EOR  R21,R1
000279 f072      	BRMI __ADDF127
00027a dfd2      	RCALL __UADD12
00027b f438      	BRCC __ADDF129
00027c 9567      	ROR  R22
00027d 95f7      	ROR  R31
00027e 95e7      	ROR  R30
00027f 9573      	INC  R23
000280 f413      	BRVC __ADDF129
000281 c020      	RJMP __MAXRES
                 __ADDF128:
000282 dfbe      	RCALL __SWAPACC
                 __ADDF129:
000283 df45      	RCALL __REPACK
000284 915f      	POP  R21
000285 9508      	RET
                 __ADDF1211:
000286 f7d8      	BRCC __ADDF128
000287 cffb      	RJMP __ADDF129
                 __ADDF127:
000288 1bea      	SUB  R30,R26
000289 0bfb      	SBC  R31,R27
00028a 0b68      	SBC  R22,R24
00028b f051      	BREQ __ZERORES
00028c f410      	BRCC __ADDF1210
00028d 9400      	COM  R0
00028e dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
00028f 2366      	TST  R22
000290 f392      	BRMI __ADDF129
000291 0fee      	LSL  R30
000292 1fff      	ROL  R31
000293 1f66      	ROL  R22
000294 957a      	DEC  R23
000295 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000296 27ee      	CLR  R30
000297 27ff      	CLR  R31
000298 2766      	CLR  R22
000299 2777      	CLR  R23
00029a 915f      	POP  R21
00029b 9508      	RET
                 
                 __MINRES:
00029c efef      	SER  R30
00029d efff      	SER  R31
00029e e76f      	LDI  R22,0x7F
00029f ef7f      	SER  R23
0002a0 915f      	POP  R21
0002a1 9508      	RET
                 
                 __MAXRES:
0002a2 efef      	SER  R30
0002a3 efff      	SER  R31
0002a4 e76f      	LDI  R22,0x7F
0002a5 e77f      	LDI  R23,0x7F
0002a6 915f      	POP  R21
0002a7 9508      	RET
                 
                 __MULF12:
0002a8 935f      	PUSH R21
0002a9 df31      	RCALL __UNPACK
0002aa 3870      	CPI  R23,0x80
0002ab f351      	BREQ __ZERORES
0002ac 3890      	CPI  R25,0x80
0002ad f341      	BREQ __ZERORES
0002ae 2401      	EOR  R0,R1
0002af 9408      	SEC
0002b0 1f79      	ADC  R23,R25
0002b1 f423      	BRVC __MULF124
0002b2 f31c      	BRLT __ZERORES
                 __MULF125:
0002b3 2000      	TST  R0
0002b4 f33a      	BRMI __MINRES
0002b5 cfec      	RJMP __MAXRES
                 __MULF124:
0002b6 920f      	PUSH R0
0002b7 931f      	PUSH R17
0002b8 932f      	PUSH R18
0002b9 933f      	PUSH R19
0002ba 934f      	PUSH R20
0002bb 2711      	CLR  R17
0002bc 2722      	CLR  R18
0002bd 2799      	CLR  R25
0002be 9f68      	MUL  R22,R24
0002bf 01a0      	MOVW R20,R0
0002c0 9f8f      	MUL  R24,R31
0002c1 2d30      	MOV  R19,R0
0002c2 0d41      	ADD  R20,R1
0002c3 1f59      	ADC  R21,R25
0002c4 9f6b      	MUL  R22,R27
0002c5 0d30      	ADD  R19,R0
0002c6 1d41      	ADC  R20,R1
0002c7 1f59      	ADC  R21,R25
0002c8 9f8e      	MUL  R24,R30
0002c9 d027      	RCALL __MULF126
0002ca 9fbf      	MUL  R27,R31
0002cb d025      	RCALL __MULF126
0002cc 9f6a      	MUL  R22,R26
0002cd d023      	RCALL __MULF126
0002ce 9fbe      	MUL  R27,R30
0002cf d01d      	RCALL __MULF127
0002d0 9faf      	MUL  R26,R31
0002d1 d01b      	RCALL __MULF127
0002d2 9fae      	MUL  R26,R30
0002d3 0d11      	ADD  R17,R1
0002d4 1f29      	ADC  R18,R25
0002d5 1f39      	ADC  R19,R25
0002d6 1f49      	ADC  R20,R25
0002d7 1f59      	ADC  R21,R25
0002d8 2fe3      	MOV  R30,R19
0002d9 2ff4      	MOV  R31,R20
0002da 2f65      	MOV  R22,R21
0002db 2f52      	MOV  R21,R18
0002dc 914f      	POP  R20
0002dd 913f      	POP  R19
0002de 912f      	POP  R18
0002df 911f      	POP  R17
0002e0 900f      	POP  R0
0002e1 2366      	TST  R22
0002e2 f02a      	BRMI __MULF122
0002e3 0f55      	LSL  R21
0002e4 1fee      	ROL  R30
0002e5 1fff      	ROL  R31
0002e6 1f66      	ROL  R22
0002e7 c002      	RJMP __MULF123
                 __MULF122:
0002e8 9573      	INC  R23
0002e9 f24b      	BRVS __MULF125
                 __MULF123:
0002ea ded4      	RCALL __ROUND_REPACK
0002eb 915f      	POP  R21
0002ec 9508      	RET
                 
                 __MULF127:
0002ed 0d10      	ADD  R17,R0
0002ee 1d21      	ADC  R18,R1
0002ef 1f39      	ADC  R19,R25
0002f0 c002      	RJMP __MULF128
                 __MULF126:
0002f1 0d20      	ADD  R18,R0
0002f2 1d31      	ADC  R19,R1
                 __MULF128:
0002f3 1f49      	ADC  R20,R25
0002f4 1f59      	ADC  R21,R25
0002f5 9508      	RET
                 
                 __ANEGW1:
0002f6 95f1      	NEG  R31
0002f7 95e1      	NEG  R30
0002f8 40f0      	SBCI R31,0
0002f9 9508      	RET
                 
                 __ANEGD1:
0002fa 95f0      	COM  R31
0002fb 9560      	COM  R22
0002fc 9570      	COM  R23
0002fd 95e1      	NEG  R30
0002fe 4fff      	SBCI R31,-1
0002ff 4f6f      	SBCI R22,-1
000300 4f7f      	SBCI R23,-1
000301 9508      	RET
                 
                 __CWD1:
000302 2f6f      	MOV  R22,R31
000303 0f66      	ADD  R22,R22
000304 0b66      	SBC  R22,R22
000305 2f76      	MOV  R23,R22
000306 9508      	RET
                 
                 __DIVW21U:
000307 2400      	CLR  R0
000308 2411      	CLR  R1
000309 e190      	LDI  R25,16
                 __DIVW21U1:
00030a 0faa      	LSL  R26
00030b 1fbb      	ROL  R27
00030c 1c00      	ROL  R0
00030d 1c11      	ROL  R1
00030e 1a0e      	SUB  R0,R30
00030f 0a1f      	SBC  R1,R31
000310 f418      	BRCC __DIVW21U2
000311 0e0e      	ADD  R0,R30
000312 1e1f      	ADC  R1,R31
000313 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000314 60a1      	SBR  R26,1
                 __DIVW21U3:
000315 959a      	DEC  R25
000316 f799      	BRNE __DIVW21U1
000317 01fd      	MOVW R30,R26
000318 01d0      	MOVW R26,R0
000319 9508      	RET
                 
                 __DIVW21:
00031a d004      	RCALL __CHKSIGNW
00031b dfeb      	RCALL __DIVW21U
00031c f40e      	BRTC __DIVW211
00031d dfd8      	RCALL __ANEGW1
                 __DIVW211:
00031e 9508      	RET
                 
                 __CHKSIGNW:
00031f 94e8      	CLT
000320 fff7      	SBRS R31,7
000321 c002      	RJMP __CHKSW1
000322 dfd3      	RCALL __ANEGW1
000323 9468      	SET
                 __CHKSW1:
000324 ffb7      	SBRS R27,7
000325 c006      	RJMP __CHKSW2
000326 95a0      	COM  R26
000327 95b0      	COM  R27
000328 9611      	ADIW R26,1
000329 f800      	BLD  R0,0
00032a 9403      	INC  R0
00032b fa00      	BST  R0,0
                 __CHKSW2:
00032c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  32 r1 :  20 r2 :   0 r3 :   0 r4 :   8 r5 :   3 r6 :   3 r7 :   0 
r8 :   2 r9 :   0 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   0 
r16:   0 r17:   9 r18:   7 r19:   8 r20:  16 r21:  55 r22:  52 r23:  34 
r24:  42 r25:  33 r26:  63 r27:  24 r28:   4 r29:   1 r30: 143 r31:  49 
x  :   7 y  :  47 z  :   8 
Registers used: 27 out of 35 (77.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   9 
adiw  :   9 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  14 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   1 brmi  :   6 brne  :  20 brpl  :   6 brsh  :   0 brtc  :   2 
brts  :   2 brvc  :   3 brvs  :   3 bset  :   0 bst   :   1 call  :  18 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  21 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  12 
cp    :   4 cpc   :   3 cpi   :  16 cpse  :   0 dec   :  11 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   6 jmp   :  24 ld    :  19 ldd   :   7 ldi   :  86 
lds   :   0 lpm   :   7 lsl   :  11 lsr   :   2 mov   :  32 movw  :  21 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   2 out   :  33 pop   :  13 push  :  12 rcall :  44 ret   :  29 
reti  :   1 rjmp  :  30 rol   :  16 ror   :  12 sbc   :   5 sbci  :   9 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   9 sbr   :   1 sbrc  :   0 
sbrs  :   3 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  27 std   :   2 sts   :   2 sub   :   5 subi  :   7 swap  :   1 
tst   :  12 wdr   :   1 
Instructions used: 72 out of 116 (62.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00065a   1574     52   1626   32768   5.0%
[.dseg] 0x000060 0x000272      0     18     18    2143   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
