;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdlib.h>
;
;int f1,counter;
;
;int f2,state=0,dir=0,mod=0,x=0,cnt=0,sec=0;
;
;int f3,step[8]={1,5,4,12,8,10,2,3};

	.DSEG
;
;
;
;float f4,Kp=50,Ki=100,dt=0.001,integral=0,Io=0,out=0,Po=0,error=0,vr=0,z=0,va=0;
;
;char *c;
;
;
;
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0015 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0016       if(state ==1)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0017         state=0;
;PCODE: $00000012 VOL: 0
; 0000 0018       else
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0019         state=1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 001A }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 001D {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001E       if(dir ==1)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001F         dir=0;
;PCODE: $00000020 VOL: 0
; 0000 0020       else
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0021         dir=1;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0022 }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 0025 {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0026       cnt++;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0027 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 002A {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002B      sec++;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 002C      if(sec>4)
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002D      {
; 0000 002E        sec=0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002F        z=cnt;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0030        cnt=0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0031      }
; 0000 0032 }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;float PI( float vreq, float vreal )
; 0000 0035 {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0036 // Calculate error
; 0000 0037 error = vreq - vreal;
;PCODE: $00000049 VOL: 0
;	vreq -> Y+4
;	vreal -> Y+0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0038 // Proportional term
; 0000 0039 Po = Kp * error;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 003A // Integral term
; 0000 003B integral += error * dt;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 003C 
; 0000 003D Io = Ki * integral;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003E // Calculate total output
; 0000 003F out = Po + Io;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0040 
; 0000 0041 return out;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0042 }
;PCODE: $00000063 VOL: 0
;
;void main(void)
; 0000 0045 {
;PCODE: $00000064 VOL: 0
; 0000 0046 DDRA=0x0f;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0047 
; 0000 0048 PORTD=0x1c;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0049 
; 0000 004A TCCR1A=(0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 004B TCCR1B=(0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 004C OCR1AH=0x7a;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 004D OCR1AL=0x11;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 004E 
; 0000 004F GICR=0xe0;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0050 MCUCR=0x0A;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0051 MCUCSR=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0052 
; 0000 0053 ADMUX=0x05;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0054 ADCSRA=0x86;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0055 
; 0000 0056 TIMSK=0x10;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0057 
; 0000 0058 lcd_init(16);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0059 
; 0000 005A #asm("sei")
;PCODE: $0000007F VOL: 0
	sei
;PCODE: $00000080 VOL: 0
; 0000 005B 
; 0000 005C while (1)
;PCODE: $00000081 VOL: 0
; 0000 005D       {
; 0000 005E             ADCSRA.6=1;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 005F             while(ADCSRA.4==0){}
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0060             va=ADCW/40;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0061             if(PIND.4==0 && x==0)
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0062             {
; 0000 0063                     if(mod ==1)
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0064                         mod=0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0065                     else
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0066                         mod=1;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0067                     x=1;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0068             }
; 0000 0069             if(PIND.4==1)
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 006A                 x=0;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 006B             if(state==1)
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 006C             {
; 0000 006D                 PORTA = step[counter];
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 006E                 counter = counter + ((1-2*dir)*(1+mod));
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 006F                 if(counter == 8 )  counter = 0;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0070                 if(counter == 9 )  counter = 1;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0071                 if(counter == -1)  counter = 7;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0072                 if(counter == -2)  counter = 6;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0073             }
;PCODE: $000000D7 VOL: 0
; 0000 0074             vr=z*12/20;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0075             lcd_puts("Va=");
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0076             itoa(va,c);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0077             lcd_puts(c);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0078             lcd_puts("rpm");
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0079             lcd_puts(" Vr=");
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 007A             itoa(vr,c);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 007B             lcd_puts(c);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 007C             lcd_puts("rpm");
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 007D             lcd_gotoxy(0,1);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 007E             if(mod==1)
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 007F                 lcd_puts("FULL");
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0080             else
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0081                 lcd_puts("HALF");
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0082             if(dir==0)
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0083                 lcd_puts("   -->");
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0084             else
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0085                 lcd_puts("   <--");
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0086             if(state==1)
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0087                 lcd_puts("   ON");
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0088             else
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0089                 lcd_puts("   OFF");
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 008A             if(state==1)
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 008B               delay_ms(PI(va,vr));
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 008C             else
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 008D               delay_ms(10);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 008E             lcd_clear();
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 008F       }
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0090 }
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0

	.DSEG
_0x1F:
	.BYTE 0x36
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;//          if(state==1 && mod==0)
;//              v=60000/(2*64*del);
;//          else if(state==1 && mod==1)
;//              v=60000/(64*del);
;//          else
