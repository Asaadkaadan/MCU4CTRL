
AVRASM ver. 2.1.30  C:\Users\USER\Desktop\Sami\code\Release\List\new1.asm Tue Jan 07 07:17:32 2020

C:\Users\USER\Desktop\Sami\code\Release\List\new1.asm(1072): warning: Register r4 already defined by the .DEF directive
C:\Users\USER\Desktop\Sami\code\Release\List\new1.asm(1073): warning: Register r6 already defined by the .DEF directive
C:\Users\USER\Desktop\Sami\code\Release\List\new1.asm(1074): warning: Register r8 already defined by the .DEF directive
C:\Users\USER\Desktop\Sami\code\Release\List\new1.asm(1075): warning: Register r10 already defined by the .DEF directive
C:\Users\USER\Desktop\Sami\code\Release\List\new1.asm(1076): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _f1=R4
                 	.DEF _counter=R6
                 	.DEF _f2=R8
                 	.DEF _state=R10
                 	.DEF _dir=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 008e 	JMP  __RESET
000002 940c 00be 	JMP  _ext_int0_isr
000004 940c 00ca 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 00ee 	JMP  _timer1_compa_isr
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00da 	JMP  _ext_int2_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 0001
00002b 0005
00002c 0004
00002d 000c      	.DB  0x1,0x0,0x5,0x0,0x4,0x0,0xC,0x0
00002e 0008
00002f 000a
000030 0002
C:\Users\USER\Desktop\Sami\code\Release\List\new1.asm(1109): warning: .cseg .db misalignment - padding zero byte
000031 0003      	.DB  0x8,0x0,0xA,0x0,0x2,0x0,0x3
                 _0x4:
000032 0000
000033 4248      	.DB  0x0,0x0,0x48,0x42
                 _0x5:
000034 0000
000035 42c8      	.DB  0x0,0x0,0xC8,0x42
                 _0x6:
000036 126f
000037 3a83      	.DB  0x6F,0x12,0x83,0x3A
                 _0x2E:
000038 0000
000039 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x0:
00003a 6156
00003b 003d
00003c 7072
00003d 006d      	.DB  0x56,0x61,0x3D,0x0,0x72,0x70,0x6D,0x0
00003e 5620
00003f 3d72
000040 4600
000041 4c55      	.DB  0x20,0x56,0x72,0x3D,0x0,0x46,0x55,0x4C
000042 004c
000043 4148
000044 464c
000045 2000      	.DB  0x4C,0x0,0x48,0x41,0x4C,0x46,0x0,0x20
000046 2020
000047 2d2d
000048 003e
000049 2020      	.DB  0x20,0x20,0x2D,0x2D,0x3E,0x0,0x20,0x20
00004a 3c20
00004b 2d2d
00004c 2000
00004d 2020      	.DB  0x20,0x3C,0x2D,0x2D,0x0,0x20,0x20,0x20
00004e 4e4f
00004f 2000
000050 2020
000051 464f      	.DB  0x4F,0x4E,0x0,0x20,0x20,0x20,0x4F,0x46
000052 0046      	.DB  0x46,0x0
                 _0x2000003:
000053 c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\USER\Desktop\Sami\code\Release\List\new1.asm(1129): warning: .cseg .db misalignment - padding zero byte
000054 0001      	.DB  0x1
                 _0x2020000:
000055 4e2d
000056 4e41
000057 4900
000058 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\USER\Desktop\Sami\code\Release\List\new1.asm(1132): warning: .cseg .db misalignment - padding zero byte
000059 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00005a 000f      	.DW  0x0F
00005b 019e      	.DW  _step
00005c 0054      	.DW  _0x3*2
                 
00005d 0004      	.DW  0x04
00005e 01ae      	.DW  _Kp
00005f 0064      	.DW  _0x4*2
                 
000060 0004      	.DW  0x04
000061 01b2      	.DW  _Ki
000062 0068      	.DW  _0x5*2
                 
000063 0004      	.DW  0x04
000064 01b6      	.DW  _dt
000065 006c      	.DW  _0x6*2
                 
000066 0004      	.DW  0x04
000067 0160      	.DW  _0x1F
000068 0074      	.DW  _0x0*2
                 
000069 0004      	.DW  0x04
00006a 0164      	.DW  _0x1F+4
00006b 0078      	.DW  _0x0*2+4
                 
00006c 0005      	.DW  0x05
00006d 0168      	.DW  _0x1F+8
00006e 007c      	.DW  _0x0*2+8
                 
00006f 0004      	.DW  0x04
000070 016d      	.DW  _0x1F+13
000071 0078      	.DW  _0x0*2+4
                 
000072 0005      	.DW  0x05
000073 0171      	.DW  _0x1F+17
000074 0081      	.DW  _0x0*2+13
                 
000075 0005      	.DW  0x05
000076 0176      	.DW  _0x1F+22
000077 0086      	.DW  _0x0*2+18
                 
000078 0007      	.DW  0x07
000079 017b      	.DW  _0x1F+27
00007a 008b      	.DW  _0x0*2+23
                 
00007b 0007      	.DW  0x07
00007c 0182      	.DW  _0x1F+34
00007d 0092      	.DW  _0x0*2+30
                 
00007e 0006      	.DW  0x06
00007f 0189      	.DW  _0x1F+41
000080 0099      	.DW  _0x0*2+37
                 
000081 0007      	.DW  0x07
000082 018f      	.DW  _0x1F+47
000083 009f      	.DW  _0x0*2+43
                 
000084 0004      	.DW  0x04
000085 000a      	.DW  0x0A
000086 0070      	.DW  _0x2E*2
                 
000087 0002      	.DW  0x02
000088 01dc      	.DW  __base_y_G100
000089 00a6      	.DW  _0x2000003*2
                 
00008a 0001      	.DW  0x01
00008b 01e3      	.DW  __seed_G101
00008c 00a8      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00008d 0000      	.DW  0
                 
                 __RESET:
00008e 94f8      	CLI
00008f 27ee      	CLR  R30
000090 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000091 e0f1      	LDI  R31,1
000092 bffb      	OUT  GICR,R31
000093 bfeb      	OUT  GICR,R30
000094 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000095 e1f8      	LDI  R31,0x18
000096 bdf1      	OUT  WDTCR,R31
000097 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000098 e08d      	LDI  R24,(14-2)+1
000099 e0a2      	LDI  R26,2
00009a 27bb      	CLR  R27
                 __CLEAR_REG:
00009b 93ed      	ST   X+,R30
00009c 958a      	DEC  R24
00009d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00009e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00009f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a0 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000a1 93ed      	ST   X+,R30
0000a2 9701      	SBIW R24,1
0000a3 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a4 ebe4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a5 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a6 9185      	LPM  R24,Z+
0000a7 9195      	LPM  R25,Z+
0000a8 9700      	SBIW R24,0
0000a9 f061      	BREQ __GLOBAL_INI_END
0000aa 91a5      	LPM  R26,Z+
0000ab 91b5      	LPM  R27,Z+
0000ac 9005      	LPM  R0,Z+
0000ad 9015      	LPM  R1,Z+
0000ae 01bf      	MOVW R22,R30
0000af 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b0 9005      	LPM  R0,Z+
0000b1 920d      	ST   X+,R0
0000b2 9701      	SBIW R24,1
0000b3 f7e1      	BRNE __GLOBAL_INI_LOOP
0000b4 01fb      	MOVW R30,R22
0000b5 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000b6 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000b7 bfed      	OUT  SPL,R30
0000b8 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b9 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ba e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000bb e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000bc 940c 0194 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;
                 ;int f1,counter;
                 ;
                 ;int f2,state=0,dir=0,mod=0,x=0,cnt=0,sec=0;
                 ;
                 ;int f3,step[8]={1,5,4,12,8,10,2,3};
                 
                 	.DSEG
                 ;
                 ;
                 ;
                 ;float f4,Kp=50,Ki=100,dt=0.001,integral=0,Io=0,out=0,Po=0,error=0,vr=0,z=0,va=0;
                 ;
                 ;char *c;
                 ;
                 ;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _ext_int0_isr:
0000be 940e 036a 	CALL SUBOPT_0x0
                 ; 0000 0016       if(state ==1)
0000c0 15ea      	CP   R30,R10
0000c1 05fb      	CPC  R31,R11
0000c2 f419      	BRNE _0x7
                 ; 0000 0017         state=0;
0000c3 24aa      	CLR  R10
0000c4 24bb      	CLR  R11
                 ; 0000 0018       else
0000c5 c003      	RJMP _0x8
                 _0x7:
                 ; 0000 0019         state=1;
0000c6 e0e1      	LDI  R30,LOW(1)
0000c7 e0f0      	LDI  R31,HIGH(1)
0000c8 015f      	MOVW R10,R30
                 ; 0000 001A }
                 _0x8:
0000c9 c00b      	RJMP _0x2D
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 001D {
                 _ext_int1_isr:
0000ca 940e 036a 	CALL SUBOPT_0x0
                 ; 0000 001E       if(dir ==1)
0000cc 15ec      	CP   R30,R12
0000cd 05fd      	CPC  R31,R13
0000ce f419      	BRNE _0x9
                 ; 0000 001F         dir=0;
0000cf 24cc      	CLR  R12
0000d0 24dd      	CLR  R13
                 ; 0000 0020       else
0000d1 c003      	RJMP _0xA
                 _0x9:
                 ; 0000 0021         dir=1;
0000d2 e0e1      	LDI  R30,LOW(1)
0000d3 e0f0      	LDI  R31,HIGH(1)
0000d4 016f      	MOVW R12,R30
                 ; 0000 0022 }
                 _0xA:
                 _0x2D:
0000d5 91e9      	LD   R30,Y+
0000d6 bfef      	OUT  SREG,R30
0000d7 91f9      	LD   R31,Y+
0000d8 91e9      	LD   R30,Y+
0000d9 9518      	RETI
                 ;
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 0025 {
                 _ext_int2_isr:
0000da 93aa      	ST   -Y,R26
0000db 93ba      	ST   -Y,R27
0000dc 93ea      	ST   -Y,R30
0000dd 93fa      	ST   -Y,R31
0000de b7ef      	IN   R30,SREG
0000df 93ea      	ST   -Y,R30
                 ; 0000 0026       cnt++;
0000e0 e9aa      	LDI  R26,LOW(_cnt)
0000e1 e0b1      	LDI  R27,HIGH(_cnt)
0000e2 91ed      	LD   R30,X+
0000e3 91fd      	LD   R31,X+
0000e4 9631      	ADIW R30,1
0000e5 93fe      	ST   -X,R31
0000e6 93ee      	ST   -X,R30
                 ; 0000 0027 }
0000e7 91e9      	LD   R30,Y+
0000e8 bfef      	OUT  SREG,R30
0000e9 91f9      	LD   R31,Y+
0000ea 91e9      	LD   R30,Y+
0000eb 91b9      	LD   R27,Y+
0000ec 91a9      	LD   R26,Y+
0000ed 9518      	RETI
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 002A {
                 _timer1_compa_isr:
0000ee 920a      	ST   -Y,R0
0000ef 921a      	ST   -Y,R1
0000f0 936a      	ST   -Y,R22
0000f1 937a      	ST   -Y,R23
0000f2 93aa      	ST   -Y,R26
0000f3 93ba      	ST   -Y,R27
0000f4 93ea      	ST   -Y,R30
0000f5 93fa      	ST   -Y,R31
0000f6 b7ef      	IN   R30,SREG
0000f7 93ea      	ST   -Y,R30
                 ; 0000 002B      sec++;
0000f8 e9ac      	LDI  R26,LOW(_sec)
0000f9 e0b1      	LDI  R27,HIGH(_sec)
0000fa 91ed      	LD   R30,X+
0000fb 91fd      	LD   R31,X+
0000fc 9631      	ADIW R30,1
0000fd 93fe      	ST   -X,R31
0000fe 93ee      	ST   -X,R30
                 ; 0000 002C      if(sec>4)
0000ff 91a0 019c 	LDS  R26,_sec
000101 91b0 019d 	LDS  R27,_sec+1
000103 9715      	SBIW R26,5
000104 f0b4      	BRLT _0xB
                 ; 0000 002D      {
                 ; 0000 002E        sec=0;
000105 e0e0      	LDI  R30,LOW(0)
000106 93e0 019c 	STS  _sec,R30
000108 93e0 019d 	STS  _sec+1,R30
                 ; 0000 002F        z=cnt;
00010a 91e0 019a 	LDS  R30,_cnt
00010c 91f0 019b 	LDS  R31,_cnt+1
00010e eda2      	LDI  R26,LOW(_z)
00010f e0b1      	LDI  R27,HIGH(_z)
000110 940e 0536 	CALL __CWD1
000112 940e 040d 	CALL __CDF1
000114 940e 0569 	CALL __PUTDP1
                 ; 0000 0030        cnt=0;
000116 e0e0      	LDI  R30,LOW(0)
000117 93e0 019a 	STS  _cnt,R30
000119 93e0 019b 	STS  _cnt+1,R30
                 ; 0000 0031      }
                 ; 0000 0032 }
                 _0xB:
00011b 91e9      	LD   R30,Y+
00011c bfef      	OUT  SREG,R30
00011d 91f9      	LD   R31,Y+
00011e 91e9      	LD   R30,Y+
00011f 91b9      	LD   R27,Y+
000120 91a9      	LD   R26,Y+
000121 9179      	LD   R23,Y+
000122 9169      	LD   R22,Y+
000123 9019      	LD   R1,Y+
000124 9009      	LD   R0,Y+
000125 9518      	RETI
                 ;
                 ;float PI( float vreq, float vreal )
                 ; 0000 0035 {
                 _PI:
                 ; 0000 0036 // Calculate error
                 ; 0000 0037 error = vreq - vreal;
000126 940e 0578 	CALL __PUTPARD2
                 ;	vreq -> Y+4
                 ;	vreal -> Y+0
000128 940e 056e 	CALL __GETD2S0
                +
00012a 81ec     +LDD R30 , Y + 4
00012b 81fd     +LDD R31 , Y + 4 + 1
00012c 816e     +LDD R22 , Y + 4 + 2
00012d 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
00012e 940e 0440 	CALL __SUBF12
000130 93e0 01ca 	STS  _error,R30
000132 93f0 01cb 	STS  _error+1,R31
000134 9360 01cc 	STS  _error+2,R22
000136 9370 01cd 	STS  _error+3,R23
                 ; 0000 0038 // Proportional term
                 ; 0000 0039 Po = Kp * error;
000138 91a0 01ae 	LDS  R26,_Kp
00013a 91b0 01af 	LDS  R27,_Kp+1
00013c 9180 01b0 	LDS  R24,_Kp+2
00013e 9190 01b1 	LDS  R25,_Kp+3
000140 940e 0497 	CALL __MULF12
000142 93e0 01c6 	STS  _Po,R30
000144 93f0 01c7 	STS  _Po+1,R31
000146 9360 01c8 	STS  _Po+2,R22
000148 9370 01c9 	STS  _Po+3,R23
                 ; 0000 003A // Integral term
                 ; 0000 003B integral += error * dt;
00014a 91e0 01b6 	LDS  R30,_dt
00014c 91f0 01b7 	LDS  R31,_dt+1
00014e 9160 01b8 	LDS  R22,_dt+2
000150 9170 01b9 	LDS  R23,_dt+3
000152 91a0 01ca 	LDS  R26,_error
000154 91b0 01cb 	LDS  R27,_error+1
000156 9180 01cc 	LDS  R24,_error+2
000158 9190 01cd 	LDS  R25,_error+3
00015a 940e 0497 	CALL __MULF12
00015c 91a0 01ba 	LDS  R26,_integral
00015e 91b0 01bb 	LDS  R27,_integral+1
000160 9180 01bc 	LDS  R24,_integral+2
000162 9190 01bd 	LDS  R25,_integral+3
000164 940e 0447 	CALL __ADDF12
000166 93e0 01ba 	STS  _integral,R30
000168 93f0 01bb 	STS  _integral+1,R31
00016a 9360 01bc 	STS  _integral+2,R22
00016c 9370 01bd 	STS  _integral+3,R23
                 ; 0000 003C 
                 ; 0000 003D Io = Ki * integral;
00016e 91a0 01b2 	LDS  R26,_Ki
000170 91b0 01b3 	LDS  R27,_Ki+1
000172 9180 01b4 	LDS  R24,_Ki+2
000174 9190 01b5 	LDS  R25,_Ki+3
000176 940e 0497 	CALL __MULF12
000178 93e0 01be 	STS  _Io,R30
00017a 93f0 01bf 	STS  _Io+1,R31
00017c 9360 01c0 	STS  _Io+2,R22
00017e 9370 01c1 	STS  _Io+3,R23
                 ; 0000 003E // Calculate total output
                 ; 0000 003F out = Po + Io;
000180 91a0 01c6 	LDS  R26,_Po
000182 91b0 01c7 	LDS  R27,_Po+1
000184 9180 01c8 	LDS  R24,_Po+2
000186 9190 01c9 	LDS  R25,_Po+3
000188 940e 0447 	CALL __ADDF12
00018a 93e0 01c2 	STS  _out,R30
00018c 93f0 01c3 	STS  _out+1,R31
00018e 9360 01c4 	STS  _out+2,R22
000190 9370 01c5 	STS  _out+3,R23
                 ; 0000 0040 
                 ; 0000 0041 return out;
000192 9628      	ADIW R28,8
000193 9508      	RET
                 ; 0000 0042 }
                 ;
                 ;void main(void)
                 ; 0000 0045 {
                 _main:
                 ; 0000 0046 DDRA=0x0f;
000194 e0ef      	LDI  R30,LOW(15)
000195 bbea      	OUT  0x1A,R30
                 ; 0000 0047 
                 ; 0000 0048 PORTD=0x1c;
000196 e1ec      	LDI  R30,LOW(28)
000197 bbe2      	OUT  0x12,R30
                 ; 0000 0049 
                 ; 0000 004A TCCR1A=(0<<COM1A1)|(0<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM10);
000198 e0e0      	LDI  R30,LOW(0)
000199 bdef      	OUT  0x2F,R30
                 ; 0000 004B TCCR1B=(0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(1<<CS12)|(0<<CS11)|(0<<CS10);
00019a e0ec      	LDI  R30,LOW(12)
00019b bdee      	OUT  0x2E,R30
                 ; 0000 004C OCR1AH=0x7a;
00019c e7ea      	LDI  R30,LOW(122)
00019d bdeb      	OUT  0x2B,R30
                 ; 0000 004D OCR1AL=0x11;
00019e e1e1      	LDI  R30,LOW(17)
00019f bdea      	OUT  0x2A,R30
                 ; 0000 004E 
                 ; 0000 004F GICR=0xe0;
0001a0 eee0      	LDI  R30,LOW(224)
0001a1 bfeb      	OUT  0x3B,R30
                 ; 0000 0050 MCUCR=0x0A;
0001a2 e0ea      	LDI  R30,LOW(10)
0001a3 bfe5      	OUT  0x35,R30
                 ; 0000 0051 MCUCSR=0x00;
0001a4 e0e0      	LDI  R30,LOW(0)
0001a5 bfe4      	OUT  0x34,R30
                 ; 0000 0052 
                 ; 0000 0053 ADMUX=0x05;
0001a6 e0e5      	LDI  R30,LOW(5)
0001a7 b9e7      	OUT  0x7,R30
                 ; 0000 0054 ADCSRA=0x86;
0001a8 e8e6      	LDI  R30,LOW(134)
0001a9 b9e6      	OUT  0x6,R30
                 ; 0000 0055 
                 ; 0000 0056 TIMSK=0x10;
0001aa e1e0      	LDI  R30,LOW(16)
0001ab bfe9      	OUT  0x39,R30
                 ; 0000 0057 
                 ; 0000 0058 lcd_init(16);
0001ac e1a0      	LDI  R26,LOW(16)
0001ad 940e 030d 	CALL _lcd_init
                 ; 0000 0059 
                 ; 0000 005A #asm("sei")
0001af 9478      	sei
                 ; 0000 005B 
                 ; 0000 005C while (1)
                 _0xC:
                 ; 0000 005D       {
                 ; 0000 005E             ADCSRA.6=1;
0001b0 9a36      	SBI  0x6,6
                 ; 0000 005F             while(ADCSRA.4==0){}
                 _0x11:
0001b1 9b34      	SBIS 0x6,4
0001b2 cffe      	RJMP _0x11
                 ; 0000 0060             va=ADCW/40;
0001b3 b1e4      	IN   R30,0x4
0001b4 b1f5      	IN   R31,0x4+1
0001b5 01df      	MOVW R26,R30
0001b6 e2e8      	LDI  R30,LOW(40)
0001b7 e0f0      	LDI  R31,HIGH(40)
0001b8 940e 0548 	CALL __DIVW21U
0001ba eda6      	LDI  R26,LOW(_va)
0001bb e0b1      	LDI  R27,HIGH(_va)
0001bc 2766      	CLR  R22
0001bd 2777      	CLR  R23
0001be 940e 040d 	CALL __CDF1
0001c0 940e 0569 	CALL __PUTDP1
                 ; 0000 0061             if(PIND.4==0 && x==0)
0001c2 e0a0      	LDI  R26,0
0001c3 9984      	SBIC 0x10,4
0001c4 e0a1      	LDI  R26,1
0001c5 30a0      	CPI  R26,LOW(0x0)
0001c6 f431      	BRNE _0x15
0001c7 91a0 0198 	LDS  R26,_x
0001c9 91b0 0199 	LDS  R27,_x+1
0001cb 9710      	SBIW R26,0
0001cc f009      	BREQ _0x16
                 _0x15:
0001cd c018      	RJMP _0x14
                 _0x16:
                 ; 0000 0062             {
                 ; 0000 0063                     if(mod ==1)
0001ce 91a0 0196 	LDS  R26,_mod
0001d0 91b0 0197 	LDS  R27,_mod+1
0001d2 9711      	SBIW R26,1
0001d3 f431      	BRNE _0x17
                 ; 0000 0064                         mod=0;
0001d4 e0e0      	LDI  R30,LOW(0)
0001d5 93e0 0196 	STS  _mod,R30
0001d7 93e0 0197 	STS  _mod+1,R30
                 ; 0000 0065                     else
0001d9 c006      	RJMP _0x18
                 _0x17:
                 ; 0000 0066                         mod=1;
0001da e0e1      	LDI  R30,LOW(1)
0001db e0f0      	LDI  R31,HIGH(1)
0001dc 93e0 0196 	STS  _mod,R30
0001de 93f0 0197 	STS  _mod+1,R31
                 ; 0000 0067                     x=1;
                 _0x18:
0001e0 e0e1      	LDI  R30,LOW(1)
0001e1 e0f0      	LDI  R31,HIGH(1)
0001e2 93e0 0198 	STS  _x,R30
0001e4 93f0 0199 	STS  _x+1,R31
                 ; 0000 0068             }
                 ; 0000 0069             if(PIND.4==1)
                 _0x14:
0001e6 9b84      	SBIS 0x10,4
0001e7 c005      	RJMP _0x19
                 ; 0000 006A                 x=0;
0001e8 e0e0      	LDI  R30,LOW(0)
0001e9 93e0 0198 	STS  _x,R30
0001eb 93e0 0199 	STS  _x+1,R30
                 ; 0000 006B             if(state==1)
                 _0x19:
0001ed 940e 0371 	CALL SUBOPT_0x1
0001ef f5c1      	BRNE _0x1A
                 ; 0000 006C             {
                 ; 0000 006D                 PORTA = step[counter];
0001f0 01f3      	MOVW R30,R6
0001f1 e9ae      	LDI  R26,LOW(_step)
0001f2 e0b1      	LDI  R27,HIGH(_step)
0001f3 0fee      	LSL  R30
0001f4 1fff      	ROL  R31
0001f5 0fae      	ADD  R26,R30
0001f6 1fbf      	ADC  R27,R31
0001f7 91ec      	LD   R30,X
0001f8 bbeb      	OUT  0x1B,R30
                 ; 0000 006E                 counter = counter + ((1-2*dir)*(1+mod));
0001f9 01f6      	MOVW R30,R12
0001fa 0fee      	LSL  R30
0001fb 1fff      	ROL  R31
0001fc e0a1      	LDI  R26,LOW(1)
0001fd e0b0      	LDI  R27,HIGH(1)
0001fe 1bae      	SUB  R26,R30
0001ff 0bbf      	SBC  R27,R31
000200 91e0 0196 	LDS  R30,_mod
000202 91f0 0197 	LDS  R31,_mod+1
000204 9631      	ADIW R30,1
000205 940e 0543 	CALL __MULW12
                +
000207 0e6e     +ADD R6 , R30
000208 1e7f     +ADC R7 , R31
                 	__ADDWRR 6,7,30,31
                 ; 0000 006F                 if(counter == 8 )  counter = 0;
000209 e0e8      	LDI  R30,LOW(8)
00020a e0f0      	LDI  R31,HIGH(8)
00020b 15e6      	CP   R30,R6
00020c 05f7      	CPC  R31,R7
00020d f411      	BRNE _0x1B
00020e 2466      	CLR  R6
00020f 2477      	CLR  R7
                 ; 0000 0070                 if(counter == 9 )  counter = 1;
                 _0x1B:
000210 e0e9      	LDI  R30,LOW(9)
000211 e0f0      	LDI  R31,HIGH(9)
000212 15e6      	CP   R30,R6
000213 05f7      	CPC  R31,R7
000214 f419      	BRNE _0x1C
000215 e0e1      	LDI  R30,LOW(1)
000216 e0f0      	LDI  R31,HIGH(1)
000217 013f      	MOVW R6,R30
                 ; 0000 0071                 if(counter == -1)  counter = 7;
                 _0x1C:
000218 efef      	LDI  R30,LOW(65535)
000219 efff      	LDI  R31,HIGH(65535)
00021a 15e6      	CP   R30,R6
00021b 05f7      	CPC  R31,R7
00021c f419      	BRNE _0x1D
00021d e0e7      	LDI  R30,LOW(7)
00021e e0f0      	LDI  R31,HIGH(7)
00021f 013f      	MOVW R6,R30
                 ; 0000 0072                 if(counter == -2)  counter = 6;
                 _0x1D:
000220 efee      	LDI  R30,LOW(65534)
000221 efff      	LDI  R31,HIGH(65534)
000222 15e6      	CP   R30,R6
000223 05f7      	CPC  R31,R7
000224 f419      	BRNE _0x1E
000225 e0e6      	LDI  R30,LOW(6)
000226 e0f0      	LDI  R31,HIGH(6)
000227 013f      	MOVW R6,R30
                 ; 0000 0073             }
                 _0x1E:
                 ; 0000 0074             vr=z*12/20;
                 _0x1A:
000228 91a0 01d2 	LDS  R26,_z
00022a 91b0 01d3 	LDS  R27,_z+1
00022c 9180 01d4 	LDS  R24,_z+2
00022e 9190 01d5 	LDS  R25,_z+3
                +
000230 e0e0     +LDI R30 , LOW ( 0x41400000 )
000231 e0f0     +LDI R31 , HIGH ( 0x41400000 )
000232 e460     +LDI R22 , BYTE3 ( 0x41400000 )
000233 e471     +LDI R23 , BYTE4 ( 0x41400000 )
                 	__GETD1N 0x41400000
000234 940e 0497 	CALL __MULF12
000236 01df      	MOVW R26,R30
000237 01cb      	MOVW R24,R22
                +
000238 e0e0     +LDI R30 , LOW ( 0x41A00000 )
000239 e0f0     +LDI R31 , HIGH ( 0x41A00000 )
00023a ea60     +LDI R22 , BYTE3 ( 0x41A00000 )
00023b e471     +LDI R23 , BYTE4 ( 0x41A00000 )
                 	__GETD1N 0x41A00000
00023c 940e 04e5 	CALL __DIVF21
00023e 93e0 01ce 	STS  _vr,R30
000240 93f0 01cf 	STS  _vr+1,R31
000242 9360 01d0 	STS  _vr+2,R22
000244 9370 01d1 	STS  _vr+3,R23
                 ; 0000 0075             lcd_puts("Va=");
                +
000246 e6a0     +LDI R26 , LOW ( _0x1F + ( 0 ) )
000247 e0b1     +LDI R27 , HIGH ( _0x1F + ( 0 ) )
                 	__POINTW2MN _0x1F,0
000248 d0b3      	RCALL _lcd_puts
                 ; 0000 0076             itoa(va,c);
000249 940e 0376 	CALL SUBOPT_0x2
00024b 940e 037f 	CALL SUBOPT_0x3
                 ; 0000 0077             lcd_puts(c);
                 ; 0000 0078             lcd_puts("rpm");
                +
00024d e6a4     +LDI R26 , LOW ( _0x1F + ( 4 ) )
00024e e0b1     +LDI R27 , HIGH ( _0x1F + ( 4 ) )
                 	__POINTW2MN _0x1F,4
00024f d0ac      	RCALL _lcd_puts
                 ; 0000 0079             lcd_puts(" Vr=");
                +
000250 e6a8     +LDI R26 , LOW ( _0x1F + ( 8 ) )
000251 e0b1     +LDI R27 , HIGH ( _0x1F + ( 8 ) )
                 	__POINTW2MN _0x1F,8
000252 d0a9      	RCALL _lcd_puts
                 ; 0000 007A             itoa(vr,c);
000253 91e0 01ce 	LDS  R30,_vr
000255 91f0 01cf 	LDS  R31,_vr+1
000257 9160 01d0 	LDS  R22,_vr+2
000259 9170 01d1 	LDS  R23,_vr+3
00025b 940e 037f 	CALL SUBOPT_0x3
                 ; 0000 007B             lcd_puts(c);
                 ; 0000 007C             lcd_puts("rpm");
                +
00025d e6ad     +LDI R26 , LOW ( _0x1F + ( 13 ) )
00025e e0b1     +LDI R27 , HIGH ( _0x1F + ( 13 ) )
                 	__POINTW2MN _0x1F,13
00025f d09c      	RCALL _lcd_puts
                 ; 0000 007D             lcd_gotoxy(0,1);
000260 e0e0      	LDI  R30,LOW(0)
000261 93ea      	ST   -Y,R30
000262 e0a1      	LDI  R26,LOW(1)
000263 d059      	RCALL _lcd_gotoxy
                 ; 0000 007E             if(mod==1)
000264 91a0 0196 	LDS  R26,_mod
000266 91b0 0197 	LDS  R27,_mod+1
000268 9711      	SBIW R26,1
000269 f419      	BRNE _0x20
                 ; 0000 007F                 lcd_puts("FULL");
                +
00026a e7a1     +LDI R26 , LOW ( _0x1F + ( 17 ) )
00026b e0b1     +LDI R27 , HIGH ( _0x1F + ( 17 ) )
                 	__POINTW2MN _0x1F,17
00026c c002      	RJMP _0x29
                 ; 0000 0080             else
                 _0x20:
                 ; 0000 0081                 lcd_puts("HALF");
                +
00026d e7a6     +LDI R26 , LOW ( _0x1F + ( 22 ) )
00026e e0b1     +LDI R27 , HIGH ( _0x1F + ( 22 ) )
                 	__POINTW2MN _0x1F,22
                 _0x29:
00026f d08c      	RCALL _lcd_puts
                 ; 0000 0082             if(dir==0)
000270 2c0c      	MOV  R0,R12
000271 280d      	OR   R0,R13
000272 f419      	BRNE _0x22
                 ; 0000 0083                 lcd_puts("   -->");
                +
000273 e7ab     +LDI R26 , LOW ( _0x1F + ( 27 ) )
000274 e0b1     +LDI R27 , HIGH ( _0x1F + ( 27 ) )
                 	__POINTW2MN _0x1F,27
000275 c002      	RJMP _0x2A
                 ; 0000 0084             else
                 _0x22:
                 ; 0000 0085                 lcd_puts("   <--");
                +
000276 e8a2     +LDI R26 , LOW ( _0x1F + ( 34 ) )
000277 e0b1     +LDI R27 , HIGH ( _0x1F + ( 34 ) )
                 	__POINTW2MN _0x1F,34
                 _0x2A:
000278 d083      	RCALL _lcd_puts
                 ; 0000 0086             if(state==1)
000279 940e 0371 	CALL SUBOPT_0x1
00027b f419      	BRNE _0x24
                 ; 0000 0087                 lcd_puts("   ON");
                +
00027c e8a9     +LDI R26 , LOW ( _0x1F + ( 41 ) )
00027d e0b1     +LDI R27 , HIGH ( _0x1F + ( 41 ) )
                 	__POINTW2MN _0x1F,41
00027e c002      	RJMP _0x2B
                 ; 0000 0088             else
                 _0x24:
                 ; 0000 0089                 lcd_puts("   OFF");
                +
00027f e8af     +LDI R26 , LOW ( _0x1F + ( 47 ) )
000280 e0b1     +LDI R27 , HIGH ( _0x1F + ( 47 ) )
                 	__POINTW2MN _0x1F,47
                 _0x2B:
000281 d07a      	RCALL _lcd_puts
                 ; 0000 008A             if(state==1)
000282 940e 0371 	CALL SUBOPT_0x1
000284 f489      	BRNE _0x26
                 ; 0000 008B               delay_ms(PI(va,vr));
000285 940e 0376 	CALL SUBOPT_0x2
000287 940e 0573 	CALL __PUTPARD1
000289 91a0 01ce 	LDS  R26,_vr
00028b 91b0 01cf 	LDS  R27,_vr+1
00028d 9180 01d0 	LDS  R24,_vr+2
00028f 9190 01d1 	LDS  R25,_vr+3
000291 de94      	RCALL _PI
000292 940e 03d4 	CALL __CFD1U
000294 01df      	MOVW R26,R30
000295 c002      	RJMP _0x2C
                 ; 0000 008C             else
                 _0x26:
                 ; 0000 008D               delay_ms(10);
000296 e0aa      	LDI  R26,LOW(10)
000297 e0b0      	LDI  R27,0
                 _0x2C:
000298 940e 039d 	CALL _delay_ms
                 ; 0000 008E             lcd_clear();
00029a d033      	RCALL _lcd_clear
                 ; 0000 008F       }
00029b cf14      	RJMP _0xC
                 ; 0000 0090 }
                 _0x28:
00029c cfff      	RJMP _0x28
                 
                 	.DSEG
                 _0x1F:
000160           	.BYTE 0x36
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;//          if(state==1 && mod==0)
                 ;//              v=60000/(2*64*del);
                 ;//          else if(state==1 && mod==1)
                 ;//              v=60000/(64*del);
                 ;//          else
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
00029d 93aa      	ST   -Y,R26
00029e b3e5      	IN   R30,0x15
00029f 70ef      	ANDI R30,LOW(0xF)
0002a0 2fae      	MOV  R26,R30
0002a1 81e8      	LD   R30,Y
0002a2 7fe0      	ANDI R30,LOW(0xF0)
0002a3 2bea      	OR   R30,R26
0002a4 bbe5      	OUT  0x15,R30
                +
0002a5 e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0002a6 958a     +DEC R24
0002a7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
0002a8 9aaa      	SBI  0x15,2
                +
0002a9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002aa 958a     +DEC R24
0002ab f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002ac 98aa      	CBI  0x15,2
                +
0002ad e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002ae 958a     +DEC R24
0002af f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b0 c089      	RJMP _0x20A0001
                 __lcd_write_data:
0002b1 93aa      	ST   -Y,R26
0002b2 81a8      	LD   R26,Y
0002b3 dfe9      	RCALL __lcd_write_nibble_G100
0002b4 81e8          ld    r30,y
0002b5 95e2          swap  r30
0002b6 83e8          st    y,r30
0002b7 81a8      	LD   R26,Y
0002b8 dfe4      	RCALL __lcd_write_nibble_G100
                +
0002b9 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002ba 958a     +DEC R24
0002bb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002bc c07d      	RJMP _0x20A0001
                 _lcd_gotoxy:
0002bd 93aa      	ST   -Y,R26
0002be 81e8      	LD   R30,Y
0002bf e0f0      	LDI  R31,0
0002c0 52e4      	SUBI R30,LOW(-__base_y_G100)
0002c1 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0002c2 81e0      	LD   R30,Z
0002c3 81a9      	LDD  R26,Y+1
0002c4 0fae      	ADD  R26,R30
0002c5 dfeb      	RCALL __lcd_write_data
0002c6 81e9      	LDD  R30,Y+1
0002c7 93e0 01e0 	STS  __lcd_x,R30
0002c9 81e8      	LD   R30,Y
0002ca 93e0 01e1 	STS  __lcd_y,R30
0002cc 9622      	ADIW R28,2
0002cd 9508      	RET
                 _lcd_clear:
0002ce e0a2      	LDI  R26,LOW(2)
0002cf 940e 038f 	CALL SUBOPT_0x4
0002d1 e0ac      	LDI  R26,LOW(12)
0002d2 dfde      	RCALL __lcd_write_data
0002d3 e0a1      	LDI  R26,LOW(1)
0002d4 940e 038f 	CALL SUBOPT_0x4
0002d6 e0e0      	LDI  R30,LOW(0)
0002d7 93e0 01e1 	STS  __lcd_y,R30
0002d9 93e0 01e0 	STS  __lcd_x,R30
0002db 9508      	RET
                 _lcd_putchar:
0002dc 93aa      	ST   -Y,R26
0002dd 81a8      	LD   R26,Y
0002de 30aa      	CPI  R26,LOW(0xA)
0002df f031      	BREQ _0x2000005
0002e0 91e0 01e2 	LDS  R30,__lcd_maxx
0002e2 91a0 01e0 	LDS  R26,__lcd_x
0002e4 17ae      	CP   R26,R30
0002e5 f060      	BRLO _0x2000004
                 _0x2000005:
0002e6 e0e0      	LDI  R30,LOW(0)
0002e7 93ea      	ST   -Y,R30
0002e8 91a0 01e1 	LDS  R26,__lcd_y
0002ea 5faf      	SUBI R26,-LOW(1)
0002eb 93a0 01e1 	STS  __lcd_y,R26
0002ed dfcf      	RCALL _lcd_gotoxy
0002ee 81a8      	LD   R26,Y
0002ef 30aa      	CPI  R26,LOW(0xA)
0002f0 f409      	BRNE _0x2000007
0002f1 c048      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
0002f2 91e0 01e0 	LDS  R30,__lcd_x
0002f4 5fef      	SUBI R30,-LOW(1)
0002f5 93e0 01e0 	STS  __lcd_x,R30
0002f7 9aa8      	SBI  0x15,0
0002f8 81a8      	LD   R26,Y
0002f9 dfb7      	RCALL __lcd_write_data
0002fa 98a8      	CBI  0x15,0
0002fb c03e      	RJMP _0x20A0001
                 _lcd_puts:
0002fc 93ba      	ST   -Y,R27
0002fd 93aa      	ST   -Y,R26
0002fe 931a      	ST   -Y,R17
                 _0x2000008:
0002ff 81a9      	LDD  R26,Y+1
000300 81ba      	LDD  R27,Y+1+1
000301 91ed      	LD   R30,X+
000302 83a9      	STD  Y+1,R26
000303 83ba      	STD  Y+1+1,R27
000304 2f1e      	MOV  R17,R30
000305 30e0      	CPI  R30,0
000306 f019      	BREQ _0x200000A
000307 2fa1      	MOV  R26,R17
000308 dfd3      	RCALL _lcd_putchar
000309 cff5      	RJMP _0x2000008
                 _0x200000A:
00030a 8118      	LDD  R17,Y+0
00030b 9623      	ADIW R28,3
00030c 9508      	RET
                 _lcd_init:
00030d 93aa      	ST   -Y,R26
00030e b3e4      	IN   R30,0x14
00030f 6fe0      	ORI  R30,LOW(0xF0)
000310 bbe4      	OUT  0x14,R30
000311 9aa2      	SBI  0x14,2
000312 9aa0      	SBI  0x14,0
000313 9aa1      	SBI  0x14,1
000314 98aa      	CBI  0x15,2
000315 98a8      	CBI  0x15,0
000316 98a9      	CBI  0x15,1
000317 81e8      	LD   R30,Y
000318 93e0 01e2 	STS  __lcd_maxx,R30
00031a 58e0      	SUBI R30,-LOW(128)
                +
00031b 93e0 01de+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00031d 81e8      	LD   R30,Y
00031e 54e0      	SUBI R30,-LOW(192)
                +
00031f 93e0 01df+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000321 e1a4      	LDI  R26,LOW(20)
000322 e0b0      	LDI  R27,0
000323 940e 039d 	CALL _delay_ms
000325 940e 0395 	CALL SUBOPT_0x5
000327 940e 0395 	CALL SUBOPT_0x5
000329 940e 0395 	CALL SUBOPT_0x5
00032b e2a0      	LDI  R26,LOW(32)
00032c df70      	RCALL __lcd_write_nibble_G100
                +
00032d ec88     +LDI R24 , LOW ( 200 )
00032e e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00032f 9701     +SBIW R24 , 1
000330 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000331 e2a8      	LDI  R26,LOW(40)
000332 df7e      	RCALL __lcd_write_data
000333 e0a4      	LDI  R26,LOW(4)
000334 df7c      	RCALL __lcd_write_data
000335 e8a5      	LDI  R26,LOW(133)
000336 df7a      	RCALL __lcd_write_data
000337 e0a6      	LDI  R26,LOW(6)
000338 df78      	RCALL __lcd_write_data
000339 df94      	RCALL _lcd_clear
                 _0x20A0001:
00033a 9621      	ADIW R28,1
00033b 9508      	RET
                 
                 	.CSEG
                 _itoa:
00033c 93ba      	ST   -Y,R27
00033d 93aa      	ST   -Y,R26
00033e 91a9          ld   r26,y+
00033f 91b9          ld   r27,y+
000340 91e9          ld   r30,y+
000341 91f9          ld   r31,y+
000342 9630          adiw r30,0
000343 f42a          brpl __itoa0
000344 95e0          com  r30
000345 95f0          com  r31
000346 9631          adiw r30,1
000347 e26d          ldi  r22,'-'
000348 936d          st   x+,r22
                 __itoa0:
000349 94e8          clt
00034a e180          ldi  r24,low(10000)
00034b e297          ldi  r25,high(10000)
00034c d00d          rcall __itoa1
00034d ee88          ldi  r24,low(1000)
00034e e093          ldi  r25,high(1000)
00034f d00a          rcall __itoa1
000350 e684          ldi  r24,100
000351 2799          clr  r25
000352 d007          rcall __itoa1
000353 e08a          ldi  r24,10
000354 d005          rcall __itoa1
000355 2f6e          mov  r22,r30
000356 d010          rcall __itoa5
000357 2766          clr  r22
000358 936c          st   x,r22
000359 9508          ret
                 
                 __itoa1:
00035a 2766          clr	 r22
                 __itoa2:
00035b 17e8          cp   r30,r24
00035c 07f9          cpc  r31,r25
00035d f020          brlo __itoa3
00035e 9563          inc  r22
00035f 1be8          sub  r30,r24
000360 0bf9          sbc  r31,r25
000361 f7c9          brne __itoa2
                 __itoa3:
000362 2366          tst  r22
000363 f411          brne __itoa4
000364 f016          brts __itoa5
000365 9508          ret
                 __itoa4:
000366 9468          set
                 __itoa5:
000367 5d60          subi r22,-0x30
000368 936d          st   x+,r22
000369 9508          ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _mod:
000196           	.BYTE 0x2
                 _x:
000198           	.BYTE 0x2
                 _cnt:
00019a           	.BYTE 0x2
                 _sec:
00019c           	.BYTE 0x2
                 _step:
00019e           	.BYTE 0x10
                 _Kp:
0001ae           	.BYTE 0x4
                 _Ki:
0001b2           	.BYTE 0x4
                 _dt:
0001b6           	.BYTE 0x4
                 _integral:
0001ba           	.BYTE 0x4
                 _Io:
0001be           	.BYTE 0x4
                 _out:
0001c2           	.BYTE 0x4
                 _Po:
0001c6           	.BYTE 0x4
                 _error:
0001ca           	.BYTE 0x4
                 _vr:
0001ce           	.BYTE 0x4
                 _z:
0001d2           	.BYTE 0x4
                 _va:
0001d6           	.BYTE 0x4
                 _c:
0001da           	.BYTE 0x2
                 __base_y_G100:
0001dc           	.BYTE 0x4
                 __lcd_x:
0001e0           	.BYTE 0x1
                 __lcd_y:
0001e1           	.BYTE 0x1
                 __lcd_maxx:
0001e2           	.BYTE 0x1
                 __seed_G101:
0001e3           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00036a 93ea      	ST   -Y,R30
00036b 93fa      	ST   -Y,R31
00036c b7ef      	IN   R30,SREG
00036d 93ea      	ST   -Y,R30
00036e e0e1      	LDI  R30,LOW(1)
00036f e0f0      	LDI  R31,HIGH(1)
000370 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000371 e0e1      	LDI  R30,LOW(1)
000372 e0f0      	LDI  R31,HIGH(1)
000373 15ea      	CP   R30,R10
000374 05fb      	CPC  R31,R11
000375 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000376 91e0 01d6 	LDS  R30,_va
000378 91f0 01d7 	LDS  R31,_va+1
00037a 9160 01d8 	LDS  R22,_va+2
00037c 9170 01d9 	LDS  R23,_va+3
00037e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
00037f 940e 03d6 	CALL __CFD1
000381 93fa      	ST   -Y,R31
000382 93ea      	ST   -Y,R30
000383 91a0 01da 	LDS  R26,_c
000385 91b0 01db 	LDS  R27,_c+1
000387 940e 033c 	CALL _itoa
000389 91a0 01da 	LDS  R26,_c
00038b 91b0 01db 	LDS  R27,_c+1
00038d 940c 02fc 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
00038f 940e 02b1 	CALL __lcd_write_data
000391 e0a3      	LDI  R26,LOW(3)
000392 e0b0      	LDI  R27,0
000393 940c 039d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000395 e3a0      	LDI  R26,LOW(48)
000396 940e 029d 	CALL __lcd_write_nibble_G100
                +
000398 ec88     +LDI R24 , LOW ( 200 )
000399 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00039a 9701     +SBIW R24 , 1
00039b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00039c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00039d 9610      	adiw r26,0
00039e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00039f ed80     +LDI R24 , LOW ( 0x7D0 )
0003a0 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003a1 9701     +SBIW R24 , 1
0003a2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003a3 95a8      	wdr
0003a4 9711      	sbiw r26,1
0003a5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003a6 9508      	ret
                 
                 __ROUND_REPACK:
0003a7 2355      	TST  R21
0003a8 f442      	BRPL __REPACK
0003a9 3850      	CPI  R21,0x80
0003aa f411      	BRNE __ROUND_REPACK0
0003ab ffe0      	SBRS R30,0
0003ac c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0003ad 9631      	ADIW R30,1
0003ae 1f69      	ADC  R22,R25
0003af 1f79      	ADC  R23,R25
0003b0 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0003b1 e850      	LDI  R21,0x80
0003b2 2757      	EOR  R21,R23
0003b3 f411      	BRNE __REPACK0
0003b4 935f      	PUSH R21
0003b5 c0cf      	RJMP __ZERORES
                 __REPACK0:
0003b6 3f5f      	CPI  R21,0xFF
0003b7 f031      	BREQ __REPACK1
0003b8 0f66      	LSL  R22
0003b9 0c00      	LSL  R0
0003ba 9557      	ROR  R21
0003bb 9567      	ROR  R22
0003bc 2f75      	MOV  R23,R21
0003bd 9508      	RET
                 __REPACK1:
0003be 935f      	PUSH R21
0003bf 2000      	TST  R0
0003c0 f00a      	BRMI __REPACK2
0003c1 c0cf      	RJMP __MAXRES
                 __REPACK2:
0003c2 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
0003c3 e850      	LDI  R21,0x80
0003c4 2e19      	MOV  R1,R25
0003c5 2215      	AND  R1,R21
0003c6 0f88      	LSL  R24
0003c7 1f99      	ROL  R25
0003c8 2795      	EOR  R25,R21
0003c9 0f55      	LSL  R21
0003ca 9587      	ROR  R24
                 
                 __UNPACK1:
0003cb e850      	LDI  R21,0x80
0003cc 2e07      	MOV  R0,R23
0003cd 2205      	AND  R0,R21
0003ce 0f66      	LSL  R22
0003cf 1f77      	ROL  R23
0003d0 2775      	EOR  R23,R21
0003d1 0f55      	LSL  R21
0003d2 9567      	ROR  R22
0003d3 9508      	RET
                 
                 __CFD1U:
0003d4 9468      	SET
0003d5 c001      	RJMP __CFD1U0
                 __CFD1:
0003d6 94e8      	CLT
                 __CFD1U0:
0003d7 935f      	PUSH R21
0003d8 dff2      	RCALL __UNPACK1
0003d9 3870      	CPI  R23,0x80
0003da f018      	BRLO __CFD10
0003db 3f7f      	CPI  R23,0xFF
0003dc f408      	BRCC __CFD10
0003dd c0a7      	RJMP __ZERORES
                 __CFD10:
0003de e156      	LDI  R21,22
0003df 1b57      	SUB  R21,R23
0003e0 f4aa      	BRPL __CFD11
0003e1 9551      	NEG  R21
0003e2 3058      	CPI  R21,8
0003e3 f40e      	BRTC __CFD19
0003e4 3059      	CPI  R21,9
                 __CFD19:
0003e5 f030      	BRLO __CFD17
0003e6 efef      	SER  R30
0003e7 efff      	SER  R31
0003e8 ef6f      	SER  R22
0003e9 e77f      	LDI  R23,0x7F
0003ea f977      	BLD  R23,7
0003eb c01a      	RJMP __CFD15
                 __CFD17:
0003ec 2777      	CLR  R23
0003ed 2355      	TST  R21
0003ee f0b9      	BREQ __CFD15
                 __CFD18:
0003ef 0fee      	LSL  R30
0003f0 1fff      	ROL  R31
0003f1 1f66      	ROL  R22
0003f2 1f77      	ROL  R23
0003f3 955a      	DEC  R21
0003f4 f7d1      	BRNE __CFD18
0003f5 c010      	RJMP __CFD15
                 __CFD11:
0003f6 2777      	CLR  R23
                 __CFD12:
0003f7 3058      	CPI  R21,8
0003f8 f028      	BRLO __CFD13
0003f9 2fef      	MOV  R30,R31
0003fa 2ff6      	MOV  R31,R22
0003fb 2f67      	MOV  R22,R23
0003fc 5058      	SUBI R21,8
0003fd cff9      	RJMP __CFD12
                 __CFD13:
0003fe 2355      	TST  R21
0003ff f031      	BREQ __CFD15
                 __CFD14:
000400 9576      	LSR  R23
000401 9567      	ROR  R22
000402 95f7      	ROR  R31
000403 95e7      	ROR  R30
000404 955a      	DEC  R21
000405 f7d1      	BRNE __CFD14
                 __CFD15:
000406 2000      	TST  R0
000407 f40a      	BRPL __CFD16
000408 d125      	RCALL __ANEGD1
                 __CFD16:
000409 915f      	POP  R21
00040a 9508      	RET
                 
                 __CDF1U:
00040b 9468      	SET
00040c c001      	RJMP __CDF1U0
                 __CDF1:
00040d 94e8      	CLT
                 __CDF1U0:
00040e 9730      	SBIW R30,0
00040f 4060      	SBCI R22,0
000410 4070      	SBCI R23,0
000411 f0b1      	BREQ __CDF10
000412 2400      	CLR  R0
000413 f026      	BRTS __CDF11
000414 2377      	TST  R23
000415 f412      	BRPL __CDF11
000416 9400      	COM  R0
000417 d116      	RCALL __ANEGD1
                 __CDF11:
000418 2e17      	MOV  R1,R23
000419 e17e      	LDI  R23,30
00041a 2011      	TST  R1
                 __CDF12:
00041b f032      	BRMI __CDF13
00041c 957a      	DEC  R23
00041d 0fee      	LSL  R30
00041e 1fff      	ROL  R31
00041f 1f66      	ROL  R22
000420 1c11      	ROL  R1
000421 cff9      	RJMP __CDF12
                 __CDF13:
000422 2fef      	MOV  R30,R31
000423 2ff6      	MOV  R31,R22
000424 2d61      	MOV  R22,R1
000425 935f      	PUSH R21
000426 df8a      	RCALL __REPACK
000427 915f      	POP  R21
                 __CDF10:
000428 9508      	RET
                 
                 __SWAPACC:
000429 934f      	PUSH R20
00042a 01af      	MOVW R20,R30
00042b 01fd      	MOVW R30,R26
00042c 01da      	MOVW R26,R20
00042d 01ab      	MOVW R20,R22
00042e 01bc      	MOVW R22,R24
00042f 01ca      	MOVW R24,R20
000430 2d40      	MOV  R20,R0
000431 2c01      	MOV  R0,R1
000432 2e14      	MOV  R1,R20
000433 914f      	POP  R20
000434 9508      	RET
                 
                 __UADD12:
000435 0fea      	ADD  R30,R26
000436 1ffb      	ADC  R31,R27
000437 1f68      	ADC  R22,R24
000438 9508      	RET
                 
                 __NEGMAN1:
000439 95e0      	COM  R30
00043a 95f0      	COM  R31
00043b 9560      	COM  R22
00043c 5fef      	SUBI R30,-1
00043d 4fff      	SBCI R31,-1
00043e 4f6f      	SBCI R22,-1
00043f 9508      	RET
                 
                 __SUBF12:
000440 935f      	PUSH R21
000441 df81      	RCALL __UNPACK
000442 3890      	CPI  R25,0x80
000443 f171      	BREQ __ADDF129
000444 e850      	LDI  R21,0x80
000445 2615      	EOR  R1,R21
                 
000446 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000447 935f      	PUSH R21
000448 df7a      	RCALL __UNPACK
000449 3890      	CPI  R25,0x80
00044a f139      	BREQ __ADDF129
                 
                 __ADDF120:
00044b 3870      	CPI  R23,0x80
00044c f121      	BREQ __ADDF128
                 __ADDF121:
00044d 2f57      	MOV  R21,R23
00044e 1b59      	SUB  R21,R25
00044f f12b      	BRVS __ADDF1211
000450 f412      	BRPL __ADDF122
000451 dfd7      	RCALL __SWAPACC
000452 cffa      	RJMP __ADDF121
                 __ADDF122:
000453 3158      	CPI  R21,24
000454 f018      	BRLO __ADDF123
000455 27aa      	CLR  R26
000456 27bb      	CLR  R27
000457 2788      	CLR  R24
                 __ADDF123:
000458 3058      	CPI  R21,8
000459 f028      	BRLO __ADDF124
00045a 2fab      	MOV  R26,R27
00045b 2fb8      	MOV  R27,R24
00045c 2788      	CLR  R24
00045d 5058      	SUBI R21,8
00045e cff9      	RJMP __ADDF123
                 __ADDF124:
00045f 2355      	TST  R21
000460 f029      	BREQ __ADDF126
                 __ADDF125:
000461 9586      	LSR  R24
000462 95b7      	ROR  R27
000463 95a7      	ROR  R26
000464 955a      	DEC  R21
000465 f7d9      	BRNE __ADDF125
                 __ADDF126:
000466 2d50      	MOV  R21,R0
000467 2551      	EOR  R21,R1
000468 f072      	BRMI __ADDF127
000469 dfcb      	RCALL __UADD12
00046a f438      	BRCC __ADDF129
00046b 9567      	ROR  R22
00046c 95f7      	ROR  R31
00046d 95e7      	ROR  R30
00046e 9573      	INC  R23
00046f f413      	BRVC __ADDF129
000470 c020      	RJMP __MAXRES
                 __ADDF128:
000471 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000472 df3e      	RCALL __REPACK
000473 915f      	POP  R21
000474 9508      	RET
                 __ADDF1211:
000475 f7d8      	BRCC __ADDF128
000476 cffb      	RJMP __ADDF129
                 __ADDF127:
000477 1bea      	SUB  R30,R26
000478 0bfb      	SBC  R31,R27
000479 0b68      	SBC  R22,R24
00047a f051      	BREQ __ZERORES
00047b f410      	BRCC __ADDF1210
00047c 9400      	COM  R0
00047d dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00047e 2366      	TST  R22
00047f f392      	BRMI __ADDF129
000480 0fee      	LSL  R30
000481 1fff      	ROL  R31
000482 1f66      	ROL  R22
000483 957a      	DEC  R23
000484 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000485 27ee      	CLR  R30
000486 27ff      	CLR  R31
000487 2766      	CLR  R22
000488 2777      	CLR  R23
000489 915f      	POP  R21
00048a 9508      	RET
                 
                 __MINRES:
00048b efef      	SER  R30
00048c efff      	SER  R31
00048d e76f      	LDI  R22,0x7F
00048e ef7f      	SER  R23
00048f 915f      	POP  R21
000490 9508      	RET
                 
                 __MAXRES:
000491 efef      	SER  R30
000492 efff      	SER  R31
000493 e76f      	LDI  R22,0x7F
000494 e77f      	LDI  R23,0x7F
000495 915f      	POP  R21
000496 9508      	RET
                 
                 __MULF12:
000497 935f      	PUSH R21
000498 df2a      	RCALL __UNPACK
000499 3870      	CPI  R23,0x80
00049a f351      	BREQ __ZERORES
00049b 3890      	CPI  R25,0x80
00049c f341      	BREQ __ZERORES
00049d 2401      	EOR  R0,R1
00049e 9408      	SEC
00049f 1f79      	ADC  R23,R25
0004a0 f423      	BRVC __MULF124
0004a1 f31c      	BRLT __ZERORES
                 __MULF125:
0004a2 2000      	TST  R0
0004a3 f33a      	BRMI __MINRES
0004a4 cfec      	RJMP __MAXRES
                 __MULF124:
0004a5 920f      	PUSH R0
0004a6 931f      	PUSH R17
0004a7 932f      	PUSH R18
0004a8 933f      	PUSH R19
0004a9 934f      	PUSH R20
0004aa 2711      	CLR  R17
0004ab 2722      	CLR  R18
0004ac 2799      	CLR  R25
0004ad 9f68      	MUL  R22,R24
0004ae 01a0      	MOVW R20,R0
0004af 9f8f      	MUL  R24,R31
0004b0 2d30      	MOV  R19,R0
0004b1 0d41      	ADD  R20,R1
0004b2 1f59      	ADC  R21,R25
0004b3 9f6b      	MUL  R22,R27
0004b4 0d30      	ADD  R19,R0
0004b5 1d41      	ADC  R20,R1
0004b6 1f59      	ADC  R21,R25
0004b7 9f8e      	MUL  R24,R30
0004b8 d027      	RCALL __MULF126
0004b9 9fbf      	MUL  R27,R31
0004ba d025      	RCALL __MULF126
0004bb 9f6a      	MUL  R22,R26
0004bc d023      	RCALL __MULF126
0004bd 9fbe      	MUL  R27,R30
0004be d01d      	RCALL __MULF127
0004bf 9faf      	MUL  R26,R31
0004c0 d01b      	RCALL __MULF127
0004c1 9fae      	MUL  R26,R30
0004c2 0d11      	ADD  R17,R1
0004c3 1f29      	ADC  R18,R25
0004c4 1f39      	ADC  R19,R25
0004c5 1f49      	ADC  R20,R25
0004c6 1f59      	ADC  R21,R25
0004c7 2fe3      	MOV  R30,R19
0004c8 2ff4      	MOV  R31,R20
0004c9 2f65      	MOV  R22,R21
0004ca 2f52      	MOV  R21,R18
0004cb 914f      	POP  R20
0004cc 913f      	POP  R19
0004cd 912f      	POP  R18
0004ce 911f      	POP  R17
0004cf 900f      	POP  R0
0004d0 2366      	TST  R22
0004d1 f02a      	BRMI __MULF122
0004d2 0f55      	LSL  R21
0004d3 1fee      	ROL  R30
0004d4 1fff      	ROL  R31
0004d5 1f66      	ROL  R22
0004d6 c002      	RJMP __MULF123
                 __MULF122:
0004d7 9573      	INC  R23
0004d8 f24b      	BRVS __MULF125
                 __MULF123:
0004d9 decd      	RCALL __ROUND_REPACK
0004da 915f      	POP  R21
0004db 9508      	RET
                 
                 __MULF127:
0004dc 0d10      	ADD  R17,R0
0004dd 1d21      	ADC  R18,R1
0004de 1f39      	ADC  R19,R25
0004df c002      	RJMP __MULF128
                 __MULF126:
0004e0 0d20      	ADD  R18,R0
0004e1 1d31      	ADC  R19,R1
                 __MULF128:
0004e2 1f49      	ADC  R20,R25
0004e3 1f59      	ADC  R21,R25
0004e4 9508      	RET
                 
                 __DIVF21:
0004e5 935f      	PUSH R21
0004e6 dedc      	RCALL __UNPACK
0004e7 3870      	CPI  R23,0x80
0004e8 f421      	BRNE __DIVF210
0004e9 2011      	TST  R1
                 __DIVF211:
0004ea f40a      	BRPL __DIVF219
0004eb cf9f      	RJMP __MINRES
                 __DIVF219:
0004ec cfa4      	RJMP __MAXRES
                 __DIVF210:
0004ed 3890      	CPI  R25,0x80
0004ee f409      	BRNE __DIVF218
                 __DIVF217:
0004ef cf95      	RJMP __ZERORES
                 __DIVF218:
0004f0 2401      	EOR  R0,R1
0004f1 9408      	SEC
0004f2 0b97      	SBC  R25,R23
0004f3 f41b      	BRVC __DIVF216
0004f4 f3d4      	BRLT __DIVF217
0004f5 2000      	TST  R0
0004f6 cff3      	RJMP __DIVF211
                 __DIVF216:
0004f7 2f79      	MOV  R23,R25
0004f8 931f      	PUSH R17
0004f9 932f      	PUSH R18
0004fa 933f      	PUSH R19
0004fb 934f      	PUSH R20
0004fc 2411      	CLR  R1
0004fd 2711      	CLR  R17
0004fe 2722      	CLR  R18
0004ff 2733      	CLR  R19
000500 2744      	CLR  R20
000501 2755      	CLR  R21
000502 e290      	LDI  R25,32
                 __DIVF212:
000503 17ae      	CP   R26,R30
000504 07bf      	CPC  R27,R31
000505 0786      	CPC  R24,R22
000506 0741      	CPC  R20,R17
000507 f030      	BRLO __DIVF213
000508 1bae      	SUB  R26,R30
000509 0bbf      	SBC  R27,R31
00050a 0b86      	SBC  R24,R22
00050b 0b41      	SBC  R20,R17
00050c 9408      	SEC
00050d c001      	RJMP __DIVF214
                 __DIVF213:
00050e 9488      	CLC
                 __DIVF214:
00050f 1f55      	ROL  R21
000510 1f22      	ROL  R18
000511 1f33      	ROL  R19
000512 1c11      	ROL  R1
000513 1faa      	ROL  R26
000514 1fbb      	ROL  R27
000515 1f88      	ROL  R24
000516 1f44      	ROL  R20
000517 959a      	DEC  R25
000518 f751      	BRNE __DIVF212
000519 01f9      	MOVW R30,R18
00051a 2d61      	MOV  R22,R1
00051b 914f      	POP  R20
00051c 913f      	POP  R19
00051d 912f      	POP  R18
00051e 911f      	POP  R17
00051f 2366      	TST  R22
000520 f032      	BRMI __DIVF215
000521 0f55      	LSL  R21
000522 1fee      	ROL  R30
000523 1fff      	ROL  R31
000524 1f66      	ROL  R22
000525 957a      	DEC  R23
000526 f243      	BRVS __DIVF217
                 __DIVF215:
000527 de7f      	RCALL __ROUND_REPACK
000528 915f      	POP  R21
000529 9508      	RET
                 
                 __ANEGW1:
00052a 95f1      	NEG  R31
00052b 95e1      	NEG  R30
00052c 40f0      	SBCI R31,0
00052d 9508      	RET
                 
                 __ANEGD1:
00052e 95f0      	COM  R31
00052f 9560      	COM  R22
000530 9570      	COM  R23
000531 95e1      	NEG  R30
000532 4fff      	SBCI R31,-1
000533 4f6f      	SBCI R22,-1
000534 4f7f      	SBCI R23,-1
000535 9508      	RET
                 
                 __CWD1:
000536 2f6f      	MOV  R22,R31
000537 0f66      	ADD  R22,R22
000538 0b66      	SBC  R22,R22
000539 2f76      	MOV  R23,R22
00053a 9508      	RET
                 
                 __MULW12U:
00053b 9ffa      	MUL  R31,R26
00053c 2df0      	MOV  R31,R0
00053d 9feb      	MUL  R30,R27
00053e 0df0      	ADD  R31,R0
00053f 9fea      	MUL  R30,R26
000540 2de0      	MOV  R30,R0
000541 0df1      	ADD  R31,R1
000542 9508      	RET
                 
                 __MULW12:
000543 d017      	RCALL __CHKSIGNW
000544 dff6      	RCALL __MULW12U
000545 f40e      	BRTC __MULW121
000546 dfe3      	RCALL __ANEGW1
                 __MULW121:
000547 9508      	RET
                 
                 __DIVW21U:
000548 2400      	CLR  R0
000549 2411      	CLR  R1
00054a e190      	LDI  R25,16
                 __DIVW21U1:
00054b 0faa      	LSL  R26
00054c 1fbb      	ROL  R27
00054d 1c00      	ROL  R0
00054e 1c11      	ROL  R1
00054f 1a0e      	SUB  R0,R30
000550 0a1f      	SBC  R1,R31
000551 f418      	BRCC __DIVW21U2
000552 0e0e      	ADD  R0,R30
000553 1e1f      	ADC  R1,R31
000554 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000555 60a1      	SBR  R26,1
                 __DIVW21U3:
000556 959a      	DEC  R25
000557 f799      	BRNE __DIVW21U1
000558 01fd      	MOVW R30,R26
000559 01d0      	MOVW R26,R0
00055a 9508      	RET
                 
                 __CHKSIGNW:
00055b 94e8      	CLT
00055c fff7      	SBRS R31,7
00055d c002      	RJMP __CHKSW1
00055e dfcb      	RCALL __ANEGW1
00055f 9468      	SET
                 __CHKSW1:
000560 ffb7      	SBRS R27,7
000561 c006      	RJMP __CHKSW2
000562 95a0      	COM  R26
000563 95b0      	COM  R27
000564 9611      	ADIW R26,1
000565 f800      	BLD  R0,0
000566 9403      	INC  R0
000567 fa00      	BST  R0,0
                 __CHKSW2:
000568 9508      	RET
                 
                 __PUTDP1:
000569 93ed      	ST   X+,R30
00056a 93fd      	ST   X+,R31
00056b 936d      	ST   X+,R22
00056c 937c      	ST   X,R23
00056d 9508      	RET
                 
                 __GETD2S0:
00056e 81a8      	LD   R26,Y
00056f 81b9      	LDD  R27,Y+1
000570 818a      	LDD  R24,Y+2
000571 819b      	LDD  R25,Y+3
000572 9508      	RET
                 
                 __PUTPARD1:
000573 937a      	ST   -Y,R23
000574 936a      	ST   -Y,R22
000575 93fa      	ST   -Y,R31
000576 93ea      	ST   -Y,R30
000577 9508      	RET
                 
                 __PUTPARD2:
000578 939a      	ST   -Y,R25
000579 938a      	ST   -Y,R24
00057a 93ba      	ST   -Y,R27
00057b 93aa      	ST   -Y,R26
00057c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  41 r1 :  29 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :  10 r7 :   6 
r8 :   0 r9 :   0 r10:   4 r11:   3 r12:   5 r13:   3 r14:   0 r15:   0 
r16:   0 r17:  14 r18:  12 r19:  12 r20:  22 r21:  63 r22:  75 r23:  55 
r24:  53 r25:  46 r26: 114 r27:  63 r28:   5 r29:   1 r30: 221 r31: 104 
x  :  20 y  :  87 z  :   8 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  20 add   :  13 
adiw  :  12 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  16 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   3 brmi  :   7 brne  :  36 brpl  :   7 brsh  :   0 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   1 call  :  40 
cbi   :   5 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  35 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  12 
cp    :  10 cpc   :  11 cpi   :  20 cpse  :   0 dec   :  13 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   4 jmp   :  24 ld    :  40 ldd   :  12 ldi   : 149 
lds   :  60 lpm   :   7 lsl   :  14 lsr   :   2 mov   :  33 movw  :  24 
mul   :  12 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :   1 out   :  26 pop   :  18 push  :  18 rcall :  52 ret   :  38 
reti  :   3 rjmp  :  46 rol   :  29 ror   :  12 sbc   :  10 sbci  :   9 
sbi   :   6 sbic  :   1 sbis  :   2 sbiw  :  12 sbr   :   1 sbrc  :   0 
sbrs  :   3 sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  54 std   :   2 sts   :  45 sub   :   7 subi  :   9 swap  :   1 
tst   :  15 wdr   :   1 
Instructions used: 75 out of 116 (64.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000afa   2610    200   2810   16384  17.2%
[.dseg] 0x000060 0x0001e7      0    135    135    1119  12.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
