;/*******************************************************
;This program was created by the CodeWizardAVR V3.29
;Automatic Program Generator
;© Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 26/11/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega16.h>
;#include <delay.h>
;#include <stdlib.h>
;#include <alcd.h>
;float th_k=0,th_k_1=0;
;const float resolution=0.112199737628207; //56 Hole
;const float double_pi=6.283185307179586;
;bit sampling=0;
;unsigned char *str;
;float speed=0;
;float voltage;
;float temp=0;
;
;// Declare your global variables here
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0029 { // if(OCR0<255)

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002A    //OCR0=OCR0+5;
; 0000 002B // Place your code here
; 0000 002C if(speed<=295)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002D speed+=5;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002E 
; 0000 002F }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0033 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0034 //if (OCR0>=5)
; 0000 0035 // OCR0=OCR0-5;
; 0000 0036 // Place your code here
; 0000 0037 
; 0000 0038 if(speed>=5) speed-=5;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0039 
; 0000 003A }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 003E {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003F th_k+=resolution;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0040 if(th_k>double_pi) th_k-=double_pi;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0041 // Place your code here
; 0000 0042 
; 0000 0043 }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;// Timer2 output compare interrupt service routine
;interrupt [TIM2_COMP] void timer2_comp_isr(void)  //for Ts pid
; 0000 0047 {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0048   sampling=1;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0049 
; 0000 004A }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;
;
;void main(void)
; 0000 004F {
;PCODE: $00000043 VOL: 0
; 0000 0050 
; 0000 0051 
; 0000 0052 
; 0000 0053 
; 0000 0054 const float kp=0.25,ki=15,Ts=0.001;
; 0000 0055 float e_k=0,e_k_1=0;
; 0000 0056 float u_k=0,u_k_1=0;
; 0000 0057 const float a=(kp+ki*Ts),b=-kp;
; 0000 0058 float speed_real;
; 0000 0059 
; 0000 005A 
; 0000 005B PORTD.2=1;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;	kp -> Y+36
;	ki -> Y+32
;	Ts -> Y+28
;	e_k -> Y+24
;	e_k_1 -> Y+20
;	u_k -> Y+16
;	u_k_1 -> Y+12
;	a -> Y+8
;	b -> Y+4
;	speed_real -> Y+0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005C PORTD.3=1;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005D 
; 0000 005E 
; 0000 005F TCCR0=0b01001100;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0060 // Declare your local variables here
; 0000 0061 
; 0000 0062 // Input/Output Ports initialization
; 0000 0063 // Port A initialization
; 0000 0064 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0065 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0066 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0067 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0068 
; 0000 0069 // Port B initialization
; 0000 006A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 006B DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 006D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 006E 
; 0000 006F // Port C initialization
; 0000 0070 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0071 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0072 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0073 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0074 
; 0000 0075 // Port D initialization
; 0000 0076 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0077 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0078 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=P Bit2=P Bit1=T Bit0=T
; 0000 0079 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 007A 
; 0000 007B // Timer/Counter 0 initialization
; 0000 007C // Clock source: System Clock
; 0000 007D // Clock value: 125.000 kHz
; 0000 007E // Mode: Fast PWM top=0xFF
; 0000 007F // OC0 output: Non-Inverted PWM
; 0000 0080 // Timer Period: 2.048 ms
; 0000 0081 // Output Pulse(s):
; 0000 0082 // OC0 Period: 2.048 ms Width: 0 us
; 0000 0083 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0084 TCNT0=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0085 OCR0=0;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0086 
; 0000 0087 // Timer/Counter 2 initialization
; 0000 0088 // Clock source: System Clock
; 0000 0089 // Clock value: 250.000 kHz
; 0000 008A // Mode: CTC top=OCR2A
; 0000 008B // OC2 output: Disconnected
; 0000 008C // Timer Period: 1 ms
; 0000 008D ASSR=0<<AS2;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 008E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (1<<CTC2) | (0<<CS22) | (1<<CS21) | (1<<CS20);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008F TCNT2=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0090 OCR2=0xF9;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0091 
; 0000 0092 
; 0000 0093 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0094 TIMSK=(1<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0095 
; 0000 0096 // External Interrupt(s) initialization
; 0000 0097 // INT0: On
; 0000 0098 // INT0 Mode: Falling Edge
; 0000 0099 // INT1: On
; 0000 009A // INT1 Mode: Falling Edge
; 0000 009B // INT2: On
; 0000 009C // INT2 Mode: Falling Edge
; 0000 009D GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 009E MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009F MCUCSR=(0<<ISC2);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A0 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A1 
; 0000 00A2 // Alphanumeric LCD initialization
; 0000 00A3 // Connections are specified in the
; 0000 00A4 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00A5 // RS - PORTC Bit 0
; 0000 00A6 // RD - PORTC Bit 1
; 0000 00A7 // EN - PORTC Bit 2
; 0000 00A8 // D4 - PORTC Bit 4
; 0000 00A9 // D5 - PORTC Bit 5
; 0000 00AA // D6 - PORTC Bit 6
; 0000 00AB // D7 - PORTC Bit 7
; 0000 00AC // Characters/line: 16
; 0000 00AD lcd_init(16);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00AE 
; 0000 00AF // Globally enable interrupts
; 0000 00B0 #asm("sei")
;PCODE: $0000007A VOL: 0
	sei
;PCODE: $0000007B VOL: 0
; 0000 00B1 
; 0000 00B2 while (1)
;PCODE: $0000007C VOL: 0
; 0000 00B3       {
; 0000 00B4 
; 0000 00B5 
; 0000 00B6           lcd_clear();
;PCODE: $0000007D VOL: 0
; 0000 00B7       lcd_puts("speed=");
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00B8       itoa(speed,str);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00B9       lcd_puts(str);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00BA       voltage=0.047*OCR0;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00BB       lcd_gotoxy(0,1);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00BC       lcd_puts("voltage=");
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00BD       itoa(voltage,str);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00BE       lcd_puts(str);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00BF       delay_ms(20);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00C0       // Place your code here
; 0000 00C1 
; 0000 00C2 
; 0000 00C3 
; 0000 00C4 
; 0000 00C5       if(sampling==1) {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00C6 
; 0000 00C7       //mesauring speed:
; 0000 00C8       temp=th_k-th_k_1;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00C9       if(temp<0) temp+=double_pi;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00CA       speed_real=(temp)/Ts;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00CB       th_k_1=th_k;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00CC       e_k=speed-speed_real;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00CD 
; 0000 00CE 					u_k=a*e_k+b*e_k_1+u_k_1;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00CF 					u_k_1=u_k;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00D0 					e_k_1=e_k;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00D1 
; 0000 00D2 
; 0000 00D3 
; 0000 00D4                     if(u_k<0) OCR0=0;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00D5                     else if(u_k>=12) OCR0=254;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00D6                     else OCR0=21.6667*u_k;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00D7 
; 0000 00D8 
; 0000 00D9 			sampling=0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00DA 				}
; 0000 00DB 
; 0000 00DC       }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00DD }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0

	.DSEG
_0xE:
	.BYTE 0x10
