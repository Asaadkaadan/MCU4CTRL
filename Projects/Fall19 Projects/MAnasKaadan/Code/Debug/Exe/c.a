;/*******************************************************
;Chip type               : ATmega16A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <delay.h>
;#include <alcd.h>
;#include <stdio.h>
;#include <string.h>
;
;#define filling_valve (OCR1A)
;#define discharge_valve (OCR1B)
;
;
;// Declare your global variables here
; //bit s,d,p;
;
; int Mode = 0;
; int adc_data[6];
; int i;
; int _kp=0;
; int fill_display, dis_display;
;
; char buffer1[20];
; char buffer2[20];
; //char buffer3[20];
;
; volatile char message;
; volatile char data[20];
;
; float _ki= 0.00; float _kd= 0.00;
; float setpoint, sensor, error, integral, derivative, old_integral, pre_error;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 002A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002B     Mode = 1; //Manual
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002C }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0030 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0031     Mode = 2; //Auto_Mode_Full_PI
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0032 }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 0036 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0037    Mode = 3; //Auto_Mode_Half_PI
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0038 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0057 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0058    int indx = 0;
; 0000 0059    message = UDR;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;	indx -> R16,R17
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 1
; 0000 005A     if(message == '\r') {
;PCODE: $0000002A VOL: 1
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 005B         indx =0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 005C         data[0] = 0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 1
; 0000 005D     }else{
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 005E         data[indx] = message;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 1
;PCODE: $00000035 VOL: 1
;PCODE: $00000036 VOL: 0
; 0000 005F         indx++;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0060     }
;PCODE: $00000039 VOL: 0
; 0000 0061     message = 0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 1
; 0000 0062 
; 0000 0063 }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 006A {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 006B char data;
; 0000 006C while (rx_counter==0);
;PCODE: $00000042 VOL: 0
;	data -> R17
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006D data=rx_buffer[rx_rd_index++];
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 006E #if RX_BUFFER_SIZE != 256
; 0000 006F if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0070 #endif
; 0000 0071 #asm("cli")
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
	cli
;PCODE: $00000057 VOL: 0
; 0000 0072 --rx_counter;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0073 #asm("sei")
;PCODE: $0000005B VOL: 0
	sei
;PCODE: $0000005C VOL: 0
; 0000 0074 return data;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0075 }
;PCODE: $00000060 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 008B {
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 008C if (tx_counter)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 008D    {
; 0000 008E    --tx_counter;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008F    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0090 #if TX_BUFFER_SIZE != 256
; 0000 0091    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0092 #endif
; 0000 0093    }
;PCODE: $00000076 VOL: 0
; 0000 0094 }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 009B {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 009C while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $0000007D VOL: 0
;	c -> Y+0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 009D #asm("cli")
;PCODE: $00000084 VOL: 0
	cli
;PCODE: $00000085 VOL: 0
; 0000 009E if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 009F    {
; 0000 00A0    tx_buffer[tx_wr_index++]=c;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A1 #if TX_BUFFER_SIZE != 256
; 0000 00A2    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00A3 #endif
; 0000 00A4    ++tx_counter;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00A5    }
; 0000 00A6 else
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00A7    UDR=c;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00A8 #asm("sei")
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
	sei
;PCODE: $000000A5 VOL: 0
; 0000 00A9 }
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;#pragma used-
;#endif
;
;void send_txtl(char *txt)
; 0000 00AE {char l=0;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00AF     while (txt[l]!=0)
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;	*txt -> Y+1
;	l -> R17
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00B0     {
; 0000 00B1         putchar(txt[l]);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00B2         l++;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00B3     }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00B4     putchar(0xD);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00B5 }
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;
;//char recieve_txt1()
;//{
;//   char line[20];
;//   int  j = 0;
;//while(1) {
;//  line[i] = getchar();
;//  if (line[i] == "\r\n") break;
;//  i++;
;//}
;//line[i] = 0;
;//
;//}
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 00CA {
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00CB // Read the AD conversion result
; 0000 00CC adc_data[i]=ADCW;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00CD // Select next ADC input
; 0000 00CE i++;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00CF if (i==6)  i=0;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00D0 ADMUX=i;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00D1 // Delay needed for the stabilization of the ADC input voltage
; 0000 00D2 delay_us(10);
;PCODE: $000000D6 VOL: 0
; 0000 00D3 // Start the AD conversion
; 0000 00D4 ADCSRA.6=1;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00D5 }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;
;float PI_calculation(float err, float kp, float ki, float kd)
; 0000 00D8 {
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00D9     float Pout,Iout,Dout,output;
; 0000 00DA 
; 0000 00DB    // Proportional term
; 0000 00DC     Pout = kp * err;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;	err -> Y+28
;	kp -> Y+24
;	ki -> Y+20
;	kd -> Y+16
;	Pout -> Y+12
;	Iout -> Y+8
;	Dout -> Y+4
;	output -> Y+0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00DD 
; 0000 00DE    // Integral term
; 0000 00DF     integral = (old_integral + err) * 0.13;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00E0     Iout = ki * integral;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00E1 
; 0000 00E2    // Derivative term
; 0000 00E3     derivative = (err - pre_error) / 0.13;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00E4     Dout = kd * derivative;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00E5 
; 0000 00E6    // Calculate total output
; 0000 00E7     output = Pout + Iout + Dout;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00E8 
; 0000 00E9    // Save previous data(Integral value)
; 0000 00EA     old_integral = integral;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00EB 
; 0000 00EC    // Save error to previous error
; 0000 00ED     pre_error = err;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00EE 
; 0000 00EF return output;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00F0 };
;PCODE: $00000106 VOL: 0
;
;
;void main(void)
; 0000 00F4 {
;PCODE: $00000107 VOL: 0
; 0000 00F5 // Declare your local variables here
; 0000 00F6 
; 0000 00F7 
; 0000 00F8 // Input/Output Ports initialization
; 0000 00F9 // Port A initialization
; 0000 00FA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00FB DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00FC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00FD PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00FE 
; 0000 00FF // Port B initialization
; 0000 0100 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0101 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0102 // State: Bit7=T Bit6=T Bit5=T Bit4=P Bit3=T Bit2=P Bit1=T Bit0=P
; 0000 0103 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (1<<PORTB0);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0104 
; 0000 0105 // Port C initialization
; 0000 0106 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0107 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0108 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0109 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 010A 
; 0000 010B // Port D initialization
; 0000 010C // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 010D DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 010E // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=P Bit2=P Bit1=T Bit0=T
; 0000 010F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0110 
; 0000 0111 // Timer/Counter 1 initialization
; 0000 0112 // Clock source: System Clock
; 0000 0113 // Clock value: 1000.000 kHz
; 0000 0114 // Mode: Fast PWM top=ICR1
; 0000 0115 // OC1A output: Non-Inverted PWM
; 0000 0116 // OC1B output: Non-Inverted PWM
; 0000 0117 // Noise Canceler: Off
; 0000 0118 // Input Capture on Falling Edge
; 0000 0119 // Timer Period: 20 ms
; 0000 011A // Output Pulse(s):
; 0000 011B // OC1A Period: 20 ms Width: 0 us
; 0000 011C // OC1B Period: 20 ms Width: 0 us
; 0000 011D // Timer1 Overflow Interrupt: Off
; 0000 011E // Input Capture Interrupt: Off
; 0000 011F // Compare A Match Interrupt: Off
; 0000 0120 // Compare B Match Interrupt: Off
; 0000 0121 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (0<<WGM10);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0122 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0123 TCNT1H=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0124 TCNT1L=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0125 ICR1H=0x4E;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0126 ICR1L=0x1F;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0127 OCR1AH=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0128 OCR1AL=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0129 OCR1BH=0x00;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 012A OCR1BL=0x00;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 012B 
; 0000 012C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 012D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 012E 
; 0000 012F // External Interrupt(s) initialization
; 0000 0130 // INT0: On
; 0000 0131 // INT0 Mode: Falling Edge
; 0000 0132 // INT1: On
; 0000 0133 // INT1 Mode: Falling Edge
; 0000 0134 // INT2: On
; 0000 0135 // INT2 Mode: Falling Edge
; 0000 0136 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0137 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0138 MCUCSR=(0<<ISC2);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0139 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 013A 
; 0000 013B // USART initialization
; 0000 013C // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 013D // USART Receiver: On
; 0000 013E // USART Transmitter: On
; 0000 013F // USART Mode: Asynchronous
; 0000 0140 // USART Baud Rate: 9600
; 0000 0141 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0142 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0143 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0144 UBRRH=0x00;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0145 UBRRL=0x33;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0146 
; 0000 0147 // ADC initialization
; 0000 0148 // ADC Clock frequency: 125.000 kHz
; 0000 0149 // ADC Voltage Reference: AREF pin
; 0000 014A ADMUX=ADC_VREF_TYPE;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 014B ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 014C SFIOR=(0<<ACME);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 014D 
; 0000 014E // Alphanumeric LCD initialization
; 0000 014F // Connections are specified in the
; 0000 0150 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0151 // RS - PORTC Bit 1
; 0000 0152 // RD - PORTC Bit 0
; 0000 0153 // EN - PORTD Bit 7
; 0000 0154 // D4 - PORTC Bit 4
; 0000 0155 // D5 - PORTC Bit 5
; 0000 0156 // D6 - PORTC Bit 6
; 0000 0157 // D7 - PORTC Bit 7
; 0000 0158 // Characters/line: 16
; 0000 0159 lcd_init(16);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 015A 
; 0000 015B // Global enable interrupts
; 0000 015C #asm("sei")
;PCODE: $00000149 VOL: 0
	sei
;PCODE: $0000014A VOL: 0
; 0000 015D 
; 0000 015E ADCSRA.6=1;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 015F 
; 0000 0160 putchar(0xD);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0161 delay_ms(500);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0162 send_txtl("stream 500 inf -v");
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0163 
; 0000 0164        lcd_puts("Welcome");
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0165        delay_ms(500);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0166        lcd_clear();
;PCODE: $00000159 VOL: 0
; 0000 0167 
; 0000 0168     while (1)
;PCODE: $0000015A VOL: 0
; 0000 0169     {
; 0000 016A 
; 0000 016B         switch (Mode)
;PCODE: $0000015B VOL: 0
; 0000 016C         {
; 0000 016D 
; 0000 016E         case 0:
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 016F             _kp = adc_data[1]/10.23;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0170             _ki = adc_data[2]/102.3;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0171             _kd = adc_data[3]/102.3;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0172 
; 0000 0173             sprintf(buffer1,"P=%d I=%f D=%f",_kp,_ki,_kd);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0174             lcd_puts(buffer1);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0175             delay_ms(500);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0176             lcd_gotoxy(0,1);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0177 
; 0000 0178             lcd_clear();
;PCODE: $0000018C VOL: 0
; 0000 0179         break;
;PCODE: $0000018D VOL: 0
; 0000 017A 
; 0000 017B         case 1:  //Manual_Mode
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 017C 
; 0000 017D             filling_valve = (65 + adc_data[5]/4.35)*10;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 017E 
; 0000 017F             discharge_valve = (65 + adc_data[4]/4.35)*10;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0180 
; 0000 0181             fill_display = ((65 + adc_data[5]/4.35)*10)*0.06;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0182             dis_display = ((65 + adc_data[4]/4.35)*10)*0.06;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0183 
; 0000 0184             sprintf(buffer1,"SRC= %d deg",fill_display);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0185             lcd_puts(buffer1);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0186             lcd_gotoxy(0,1);
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0187             sprintf(buffer2,"DIS= %d deg",dis_display);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0188             lcd_puts(buffer2);
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0189             delay_ms(500);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 018A             lcd_clear();
;PCODE: $000001E7 VOL: 0
; 0000 018B 
; 0000 018C         break;
;PCODE: $000001E8 VOL: 0
; 0000 018D 
; 0000 018E         case 2:  //Auto_Mode_Full_PI
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 018F 
; 0000 0190             setpoint = (adc_data[0]/10.23)*10;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0191             _kp = adc_data[1]/10.23;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0192             _ki = adc_data[2]/1023;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0193             _kd = adc_data[3]/1023;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0194 
; 0000 0195 
; 0000 0196             //sensor = atof(data);
; 0000 0197             sensor = 500;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0198             error = setpoint - sensor;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0199 
; 0000 019A             sprintf(buffer1,"setpoint=%f",setpoint);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 019B             lcd_puts(buffer1);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 019C             lcd_gotoxy(0,1);
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 019D             sprintf(buffer2,"Error=%f",error);
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 019E             lcd_puts(buffer2);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 019F             delay_ms(1500);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 01A0             lcd_clear();
;PCODE: $00000230 VOL: 0
; 0000 01A1 
; 0000 01A2 //            sprintf(buffer3,"Sensor=%f",sensor);
; 0000 01A3 //            lcd_puts(buffer3);
; 0000 01A4 //            delay_ms(1500);
; 0000 01A5 //            lcd_clear();
; 0000 01A6 
; 0000 01A7             if(error>0)
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 01A8             {
; 0000 01A9                 discharge_valve = PI_calculation(error, _kp, _ki, _kd);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 01AA                 filling_valve = 60;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 01AB             }
; 0000 01AC             else if(error<0)
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 01AD             {
; 0000 01AE                 error = abs(error);
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 01AF                 filling_valve = PI_calculation(error, _kp, _ki, _kd);
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 01B0                 discharge_valve = 60;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 01B1             }
; 0000 01B2 
; 0000 01B3 
; 0000 01B4         break;
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 01B5 
; 0000 01B6         case 3:  //Auto_Mode_Half_PI
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 01B7 
; 0000 01B8             setpoint = (adc_data[0]/10.23)*10;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 01B9             _kp = adc_data[1]/10.23;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 01BA             _ki = adc_data[2]/1023;
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 01BB             _kd = adc_data[3]/1023;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 01BC 
; 0000 01BD             sensor = 500;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 01BE             error = setpoint - sensor;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 01BF 
; 0000 01C0             send_txtl("stream 500 inf p4");
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 01C1 
; 0000 01C2             sprintf(buffer1,"setpoint=%f",setpoint);
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 01C3             lcd_puts(buffer1);
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 01C4             lcd_gotoxy(0,1);
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01C5             sprintf(buffer2,"Error=%f",error);
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 01C6             lcd_puts(buffer2);
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 01C7             delay_ms(500);
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 01C8             lcd_clear();
;PCODE: $000002A7 VOL: 0
; 0000 01C9 
; 0000 01CA             if(error>0)
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 01CB             {
; 0000 01CC                 discharge_valve = 65 + adc_data[4]/4.35;
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 01CD                 filling_valve = 60;
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 01CE             }
; 0000 01CF             else if(error<0)
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 01D0             {
; 0000 01D1                 error = abs(error);
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01D2                 filling_valve = PI_calculation(error, _kp, _ki, _kd);
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 01D3                 discharge_valve = 60;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01D4             }
; 0000 01D5 
; 0000 01D6 
; 0000 01D7         break;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 01D8         };
;PCODE: $000002D3 VOL: 0
; 0000 01D9 
; 0000 01DA     }
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01DB 
; 0000 01DC 
; 0000 01DD 
; 0000 01DE }
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0

	.DSEG
_0x1B:
	.BYTE 0x2C
